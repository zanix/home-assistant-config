- id: '1679462212869'
  alias: ⏯ Ensure PiPup is Running
  description: ''
  triggers:
  - at: 04:30:00
    trigger: time
  conditions: []
  actions:
  - data:
      command: am start -n nl.rogro82.pipup/nl.rogro82.pipup.MainActivity
    target:
      entity_id:
      - media_player.living_room_googletv
      - media_player.shield_family_room
      - media_player.shield_main_bedroom
    action: androidtv.adb_command
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - data:
      command: HOME
    target:
      entity_id:
      - media_player.living_room_googletv
      - media_player.shield_family_room
      - media_player.shield_main_bedroom
    action: androidtv.adb_command
  mode: single
- id: '1665685949212'
  alias: ⏯ Family Room Media Auto Off
  description: Automatically turn off the Media Center in the Family Room
  triggers:
  - entity_id:
    - remote.androidtv_family_room
    to: 'off'
    trigger: state
    from: 'on'
  conditions:
  - condition: state
    entity_id: remote.harmony_family_room
    state: 'on'
  - condition: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    state: Shield TV
  actions:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.main_bedroom_cast
  - entity_id: remote.harmony_family_room
    action: remote.turn_off
  mode: restart
- id: '1749007053199'
  alias: ⏯ Family Room Media Off
  description: Ensure the Family Room media is turned off
  triggers:
  - trigger: state
    entity_id:
    - remote.androidtv_family_room
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.family_room_cast
      - media_player.shield_family_room
      - media_player.androidtv_family_room
  mode: single
- id: '1665700097529'
  alias: ⏯ Family Room Media State at Night
  description: Brighten/Dim the lights when Media is paused
  trigger:
  - platform: state
    entity_id:
    - media_player.androidtv_family_room
  condition:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - condition: state
    entity_id: light.family_room
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_family_room
        state: paused
      sequence:
      - data:
          transition: 5
          brightness_pct: 60
        target:
          entity_id: light.family_room
        action: light.turn_on
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_family_room
        state: playing
      sequence:
      - data:
          transition: 5
          brightness_pct: 20
        action: light.turn_on
  mode: single
- id: '1665696328059'
  alias: ⏯ Family Room Sound Mode
  description: Changes the reciever sound mode based on Source
  triggers:
  - entity_id: media_player.universal_family_room
    attribute: source
    trigger: state
  - entity_id: media_player.denon_avr_s760h
    attribute: source
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.denon_avr_s760h
      state: 'off'
    - condition: state
      entity_id: media_player.universal_family_room
      attribute: source
      state: nl.rogro82.pipup
  - condition: template
    value_template: '{{ sound_mode != state_attr("media_player.denon_avr_s760h", "sound_mode")
      }}'
  actions:
  - target:
      entity_id: media_player.denon_avr_s760h
    data:
      sound_mode: '{{ sound_mode }}'
    action: media_player.select_sound_mode
  mode: restart
  variables:
    sound_mode: "{%- if trigger.to_state.attributes.source == 'Spotify' -%}\n  MCH
      STEREO\n{%- elif trigger.to_state.attributes.source in ['SmartTube', 'YouTube',
      'YouTube Kids', 'Cartoon Network', 'PBS Kids', 'Crunchyroll'] -%}\n  DOLBY DIGITAL\n{%-
      else -%}\n  DIRECT\n{%- endif -%}"
- id: '1745528112692'
  alias: ⏯ Living Room Media Off
  description: Ensure the Living Room media is turned off
  triggers:
  - trigger: state
    entity_id:
    - remote.androidtv_living_room
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.living_room_cast
      - media_player.androidtv_living_room
  mode: single
- id: '1665699683348'
  alias: ⏯ Living Room Media State at Night
  description: Brighten/Dim the lights when Media is paused
  triggers:
  - entity_id:
    - media_player.androidtv_living_room
    trigger: state
  conditions:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - condition: state
    entity_id: light.living_room_fan_light
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_living_room
        state: paused
      sequence:
      - data:
          transition: 5
          brightness_pct: 60
        target:
          entity_id: light.living_room_fan_light
        action: light.turn_on
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_living_room
        state: playing
      sequence:
      - data:
          transition: 5
          brightness_pct: 20
        action: light.turn_on
- id: '1665696345535'
  alias: ⏯ Living Room Sound Mode
  description: Changes the soundbar sound mode based on Source
  triggers:
  - entity_id: media_player.universal_living_room
    attribute: source
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.samsung_soundbar
      state: 'off'
      enabled: false
  actions:
  - variables:
      sound_mode: "{%- if trigger.to_state.attributes.source in ['SmartTube', 'YouTube',
        'YouTube Kids', 'Cartoon Network', 'PBS Kids', 'Crunchyroll'] -%}\n  Adaptive
        Sound\n{%- elif trigger.to_state.attributes.source in ['Spotify'] -%}\n  Surround\n{%-
        else -%}\n  Standard\n{%- endif -%}"
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.samsung_soundbar_voice_enhancer
        state: 'on'
      - condition: template
        value_template: '{{ trigger.to_state.attributes.source == ''Spotify'' }}'
      sequence:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.samsung_soundbar_voice_enhancer
        data: {}
    - conditions:
      - condition: state
        entity_id: input_boolean.samsung_soundbar_voice_enhancer
        state: 'off'
      - condition: template
        value_template: '{{ trigger.to_state.attributes.source != ''Spotify'' }}'
      sequence:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.samsung_soundbar_voice_enhancer
        data: {}
  - action: select.select_option
    target:
      entity_id: select.samsung_soundbar_sound_mode
    data:
      option: '{{ sound_mode }}'
  mode: restart
- id: '1728402022145'
  alias: ⏯ Living Room Sound Night Mode
  description: Changes the soundbar night mode based on schedule and bed presence
    with 5-minute delay
  triggers:
  - trigger: state
    entity_id: binary_sensor.samsung_soundbar_night_mode
    to: 'on'
    id: 'on'
  - trigger: state
    entity_id: binary_sensor.samsung_soundbar_night_mode
    to: 'off'
    id: 'off'
  - trigger: state
    entity_id:
    - binary_sensor.bed_presence_f56148_bed_occupied_either
    to: 'on'
    id: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - trigger: state
    entity_id:
    - binary_sensor.bed_presence_f56148_bed_occupied_either
    to: 'off'
    id: 'off'
    for:
      minutes: 5
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.samsung_soundbar_night_mode
        metadata: {}
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.samsung_soundbar_night_mode
        metadata: {}
        data: {}
  mode: restart
- id: '1665685997408'
  alias: ⏯ Main Bedroom Media Auto Off
  description: Automatically turn off the Media Center in the Main Bedroom
  trigger:
  - platform: state
    entity_id:
    - remote.androidtv_main_bedroom
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable"]
      }}'
  - condition: state
    entity_id: remote.harmony_main_bedroom
    state: 'on'
  - condition: state
    entity_id: remote.harmony_main_bedroom
    attribute: current_activity
    state: Shield TV
  action:
  - entity_id: remote.harmony_main_bedroom
    action: remote.turn_off
  mode: restart
- id: '1665695943529'
  alias: ⏯ PS4 Harmony Activity
  description: Turns on the PS4 when the activity is active
  triggers:
  - entity_id:
    - remote.harmony_family_room
    to: PS4
    trigger: state
    attribute: current_activity
  conditions: []
  actions:
  - entity_id: media_player.playstation_4
    action: media_player.turn_on
  mode: single
- id: '1723130495380'
  alias: ⏯️ Samsung Soundbar Night Mode
  description: Sets night mode for the Samsung Soundbar
  trigger:
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_night_mode
    to: 'on'
    id: 'on'
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_night_mode
    to: 'off'
    id: 'off'
  condition:
  - condition: template
    value_template: '{{ not states("media_player.samsung_soundbar") in ["unknown",
      "unavailable"] }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - metadata: {}
        data:
          enabled: true
        target:
          entity_id: media_player.samsung_soundbar
        action: samsung_soundbar.set_night_mode
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - metadata: {}
        data:
          enabled: false
        target:
          entity_id: media_player.samsung_soundbar
        action: samsung_soundbar.set_night_mode
  mode: single
- id: '1723130728950'
  alias: ⏯️ Samsung Soundbar Voice Enhancer
  description: Sets voice enhancer for the Samsung Soundbar
  trigger:
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_voice_enhancer
    to: 'on'
    id: 'on'
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_voice_enhancer
    to: 'off'
    id: 'off'
  condition:
  - condition: template
    value_template: '{{ not states("media_player.samsung_soundbar") in ["unknown",
      "unavailable"] }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - metadata: {}
        data:
          enabled: true
        target:
          entity_id: media_player.samsung_soundbar
        action: samsung_soundbar.set_voice_enhancer
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - metadata: {}
        data:
          enabled: false
        target:
          entity_id: media_player.samsung_soundbar
        action: samsung_soundbar.set_voice_enhancer
  mode: single
- id: '1708236514239'
  alias: ☑️ Cat Feeder Filled
  description: Resets the cat feeder level when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: cat_feeder_full
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: cat_feeder_full
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Feeder Full
    value_template: '{{ value_json.button }}'
    trigger: mqtt
  conditions: []
  actions:
  - metadata: {}
    data:
      value: '0'
    target:
      entity_id: sensor.cat_feeder_total_weight
    action: utility_meter.calibrate
  - parallel:
    - metadata: {}
      data:
        send_to: parents
        title: Cat Feeder
        message: The Cat feeder was refilled
        notification_icon: mdi:paw
        color: '#FF9800'
        icon: local/icons/paw.png
        tag: cat-feeder
      action: script.notify_mobile
    - metadata: {}
      data:
        entity:
        - media_player.nasya
        title: Cat Feeder
        message: The Cat feeder was refilled
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: Cat Feeder
        message: The Cat feeder was refilled
        icon: local/icons/paw.png
      action: script.notify_lnxlink
  mode: single
- id: '1665680853122'
  alias: ☑️ Close Garage Door
  description: Closes the garage door when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: close_garage_door
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: close_garage_door
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Garage Door Close Door
    value_template: '{{ value_json.title ~ '' '' ~ value_json.button }}'
    trigger: mqtt
  conditions: []
  actions:
  - target:
      entity_id: cover.garage_door
    data: {}
    action: cover.close_cover
  - data:
      send_to: parents
      title: Garage Door Closed
      message: The Garage Door was closed
      notification_icon: mdi:garage-variant
      color: '#ff9800'
      icon: local/icons/garage.png
      group: Security
      tag: garage-door
      car_ui: true
      url: lovelace/security
    action: script.notify_mobile
  mode: single
- id: '1665681396617'
  alias: ☑️ Garbage Collection
  description: Confirm collection can is on the curb
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: garbage_collection
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: recycle_collection
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: garbage_collection
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: recycle_collection
  condition: []
  action:
  - variables:
      tag: '{{ trigger.event.data.tag }}'
      type: '{{ iif(tag == ''recycle_collection'', ''Recycling'', ''Garbage'') }}'
  - target:
      entity_id: input_boolean.{{ tag }}
    action: input_boolean.turn_on
  - parallel:
    - data:
        send_to: parents
        title: '{{ type }} Collection'
        message: The {{ type }} can is at the curb
        notification_icon: '{{ trigger.event.data.notification_icon }}'
        color: '{{ trigger.event.data.color }}'
        icon: '{{ trigger.event.data.icon_url }}'
        group: '{{ trigger.event.data.group }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ type }} Collection'
        message: The {{ type }} can is at the curb
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ type }} Collection'
        message: The {{ type }} can is at the curb
        icon: '{{ trigger.event.data.icon_url }}'
      action: script.notify_lnxlink
  mode: single
- id: '1756855791463'
  alias: ☑️ Guest Mode Check Handler
  description: Handles notification actions for Guest Mode check
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: disable_guest_mode
    trigger: event
  - event_type: mobile_app_notification_action
    event_data:
      action: snooze_guest_mode
    trigger: event
  - event_type: mobile_app_notification_action
    event_data:
      action: enable_guest_mode
    trigger: event
  - event_type: mobile_app_notification_action
    event_data:
      action: no_guest_mode
    trigger: event
  conditions: []
  actions:
  - variables:
      icon: local/icons/account-question.png
      color: '#4caf50'
      group: Security
      tag: guest-mode
      url: lovelace/security
      action_responses:
        disable_guest_mode:
          title: Guest Mode Disabled
          message: Guest Mode has been turned off
          icon_mdi: mdi:account-group-off
        snooze_guest_mode:
          title: Guest Mode Snoozed
          message: Will check again in 12 hours
          icon_mdi: mdi:account-group-clock
        enable_guest_mode:
          title: Guest Mode Enabled
          message: Guest Mode has been turned on
          icon_mdi: mdi:account-group
        no_guest_mode:
          title: Guest Mode Skipped
          message: Continuing without Guest Mode
          icon_mdi: mdi:account-group-off
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.action == ''disable_guest_mode'' }}'
      sequence:
      - target:
          entity_id: input_boolean.guest_mode
        action: input_boolean.turn_off
        data: {}
      - data:
          send_to: parents
          title: '{{ action_responses[''disable_guest_mode''].title }}'
          message: '{{ action_responses[''disable_guest_mode''].message }}'
          notification_icon: '{{ action_responses[''disable_guest_mode''].icon_mdi
            }}'
          color: '{{ color }}'
          icon: '{{ icon }}'
          group: '{{ group }}'
          interruption_level: passive
          tag: '{{ tag }}'
          car_ui: true
          url: '{{ url }}'
        action: script.notify_mobile
    - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.action == ''snooze_guest_mode'' }}'
      sequence:
      - data:
          send_to: parents
          title: '{{ action_responses[''snooze_guest_mode''].title }}'
          message: '{{ action_responses[''snooze_guest_mode''].message }}'
          notification_icon: '{{ action_responses[''snooze_guest_mode''].icon_mdi
            }}'
          color: '{{ color }}'
          icon: '{{ icon }}'
          group: '{{ group }}'
          interruption_level: passive
          tag: '{{ tag }}'
          car_ui: true
          url: '{{ url }}'
        action: script.notify_mobile
    - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.action == ''enable_guest_mode'' }}'
      sequence:
      - target:
          entity_id: input_boolean.guest_mode
        action: input_boolean.turn_on
        data: {}
      - data:
          send_to: parents
          title: '{{ action_responses[''enable_guest_mode''].title }}'
          message: '{{ action_responses[''enable_guest_mode''].message }}'
          notification_icon: '{{ action_responses[''enable_guest_mode''].icon_mdi
            }}'
          color: '{{ color }}'
          icon: '{{ icon }}'
          group: '{{ group }}'
          interruption_level: passive
          tag: '{{ tag }}'
          car_ui: true
          url: '{{ url }}'
        action: script.notify_mobile
    - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.action == ''no_guest_mode'' }}'
      sequence:
      - data:
          send_to: parents
          title: '{{ action_responses[''no_guest_mode''].title }}'
          message: '{{ action_responses[''no_guest_mode''].message }}'
          notification_icon: '{{ action_responses[''no_guest_mode''].icon_mdi }}'
          color: '{{ color }}'
          icon: '{{ icon }}'
          group: '{{ group }}'
          interruption_level: passive
          tag: '{{ tag }}'
          car_ui: true
          url: '{{ url }}'
        action: script.notify_mobile
  mode: queued
- id: '1665681528781'
  alias: ☑️ Ignore Door Alerts
  description: Ignore door open alerts when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: ignore_door_alerts
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: ignore_door_alerts
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Ignore Door Alerts
    value_template: '{{ value_json.button }}'
    trigger: mqtt
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.door_open_alerts
    data: {}
    action: input_boolean.turn_off
  - if:
    - condition: template
      value_template: '{{ trigger.event.data.tag != "" }}'
    then:
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: '{{ trigger.event.data.tag }}'
      action: script.notify_mobile
  - data:
      send_to: parents
      title: Door Alerts Ignored
      message: The Door Open alerts have been ignored until all doors are closed
      icon: local/icons/door-open.png
      group: Security
      tag: door-alerts-ignored
    action: script.notify_mobile
  - data:
      entity:
      - media_player.nasya
      title: Door Alerts Ignored
      message: The Door Open alerts have been ignored until all doors are closed
    action: script.notify_hass_agent
  - data:
      computer:
      - erebus
      title: Door Alerts Ignored
      message: The Door Open alerts have been ignored until all doors are closed
      icon: local/icons/door-open.png
    action: script.notify_lnxlink
  mode: single
- id: '1665681539044'
  alias: ☑️ Ignore Garage Door Alerts
  description: Ignore garage door open alerts when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: ignore_garage_door_alerts
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: ignore_garage_door_alerts
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Garage Door Ignore Alerts
    value_template: '{{ value_json.title ~ '' '' ~ value_json.button }}'
    trigger: mqtt
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.garage_door_open_alerts
    data: {}
    action: input_boolean.turn_off
  - data:
      send_to: parents
      notification_type: clear_notification
      tag: garage-door
    action: script.notify_mobile
  - data:
      send_to: parents
      title: Garage Door Alerts Ignored
      message: The Garage Door Open alerts have been ignored until the Garage Door
        is closed
      icon: local/icons/garage-open.png
      group: Security
      tag: garage-door-alerts-ignored
    action: script.notify_mobile
  - data:
      entity:
      - media_player.nasya
      title: Garage Door Alerts Ignored
      message: The Garage Door Open alerts have been ignored until the Garage Door
        is closed
    action: script.notify_hass_agent
  - data:
      computer:
      - erebus
      title: Garage Door Alerts Ignored
      message: The Garage Door Open alerts have been ignored until the Garage Door
        is closed
      icon: local/icons/garage-open.png
    action: script.notify_lnxlink
  mode: single
- id: '1665683799664'
  alias: ☑️ Ignore Window Alerts
  description: Ignore window open alerts when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: ignore_window_alerts
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: ignore_window_alerts
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Ignore Window Alerts
    value_template: '{{ value_json.button }}'
    trigger: mqtt
  actions:
  - target:
      entity_id: input_boolean.window_open_alerts
    data: {}
    action: input_boolean.turn_off
  - if:
    - condition: template
      value_template: '{{ trigger.event.data.tag != "" }}'
    then:
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: '{{ trigger.event.data.tag }}'
      action: script.notify_mobile
  - data:
      send_to: parents
      title: Window Alerts Ignored
      message: The Window Open alerts have been ignored until all windows are closed
      notification_icon: mdi:window-open
      color: '#9c27b0'
      icon: local/icons/window-open.png
      group: Security
      tag: window-alerts-ignored
    action: script.notify_mobile
  - data:
      entity:
      - media_player.nasya
      title: Window Alerts Ignored
      message: The Window Open alerts have been ignored until all windows are closed
    action: script.notify_hass_agent
  - data:
      computer:
      - erebus
      title: Window Alerts Ignored
      message: The Window Open alerts have been ignored until all windows are closed
      icon: local/icons/window-open.png
    action: script.notify_lnxlink
- id: '1665681550417'
  alias: ☑️ Retry Remote Start Ascent
  description: Starts the Ascent (usually after a failure) when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: ascent_remote_start_again
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: ascent_remote_start_again
    trigger: event
  conditions: []
  actions:
  - parallel:
    - target:
        entity_id: button.ascent_remote_start
      data: {}
      action: button.press
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: ascent
      action: script.notify_mobile
    - data:
        notification_id: ascent
      action: persistent_notification.dismiss
  mode: single
- id: '1743734864351'
  alias: ☑️ Retry Remote Start Kona
  description: Starts the Kona (usually after a failure) when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: kona_remote_start_again
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: kona_remote_start_again
    trigger: event
  conditions: []
  actions:
  - parallel:
    - action: script.kona_remote_start
      metadata: {}
      data: {}
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: kona
      action: script.notify_mobile
    - data:
        notification_id: kona
      action: persistent_notification.dismiss
  mode: single
- id: '1665681684041'
  alias: ☑️ Turn on Water Main
  description: Turns on the water main when the action is pressed
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: turn_on_water
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: turn_on_water
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Turn Water Main On
    value_template: '{{ value_json.button }}'
    trigger: mqtt
  conditions: []
  actions:
  - variables:
      title: Water Main
      message: The water main has been turned back on after the leak was detected.
  - parallel:
    - target:
        entity_id: valve.water_main_valve
      data: {}
      action: valve.open_valve
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: water-leak
      action: script.notify_mobile
    - data:
        notification_id: water-leak
      action: persistent_notification.dismiss
  - wait_for_trigger:
    - entity_id:
      - valve.water_main_valve
      to: open
      trigger: state
    timeout: 00:00:30
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:water-alert
        color: '#009688'
        icon: local/icons/water-alert.png
        group: Water Leak
        interruption_level: critical
        tag: water-leak-main-on
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: local/icons/water-alert.png
        importance: critical
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: water-leak-main-on
        large_icon: local/icons/water-alert.png
        icon_color: '#009688'
      action: script.notify_tvoverlay
  mode: single
- id: '1665696751056'
  alias: ⚙️ Action Sniffer [Zigbee]
  description: Listen for Zigbee actions
  trigger:
  - platform: mqtt
    topic: zigbee2mqtt/+/action
  condition: []
  action:
  - variables:
      device: '{{ trigger.topic.split("/")[1] }}'
      action: '{{ trigger.payload }}'
  - data:
      title: Zigbee Event Sniffer
      message: 'device: {{ device }}

        action: {{ action }}'
    action: persistent_notification.create
  - data:
      duration: 10000
      message: 'device: {{ device }}

        action: {{ action }}'
    action: browser_mod.notification
  mode: parallel
  initial_state: false
- id: '1698980625096'
  alias: ⚙️ Automated Backup
  description: Creates a full backup nightly.
  triggers:
  - at: 03:00:00
    trigger: time
  conditions:
  - condition: template
    value_template: '{{ now().isoweekday() == 7 }}'
    alias: Today is Sunday
  actions:
  - action: hassio.backup_full
    data:
      compressed: false
      homeassistant_exclude_database: false
      location: Lantea
      name: Weekly backup {{ state_attr("update.home_assistant_core_update",     "installed_version")
        }} {{ as_timestamp(now()) |     timestamp_custom("%Y-%m-%d") }}
  mode: single
- id: '1665696464819'
  alias: ⚙️ Battery Level Low
  description: Sends a notification when a device battery level is low
  triggers:
  - entity_id: sensor.low_battery_devices
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ not trigger.to_state in ['unknown', 'unavailable', none]\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable', none]\n  and
      not trigger.from_state in ['unknown', 'unavailable', none]\n  and not trigger.from_state.state
      in ['unknown', 'unavailable', none]\n  and trigger.to_state.state != trigger.from_state.state\n}}"
  actions:
  - variables:
      devices: '{{ trigger.to_state.state | int(default=0) }}'
      title: Low Battery Level{{ iif(devices > 1, 's', '') }} ({{ devices }})
      sensors: "{% if not trigger.to_state.state in ['unknown', 'unavailable', none]
        %}\n  {% set result = namespace(sensors=[]) %}\n  {% for entity in trigger.to_state.attributes.entity_id
        %}\n    {% set device = states.sensor[entity.split('.')[1]] %}\n    {% set
        name = device.name | replace(':', '') | regex_replace(find = ' battery level',
        replace = '', ignorecase = true) %}\n    {% set result.sensors = result.sensors
        + [name ~ ' (' ~ device.state | round ~ '%)'] %}\n  {% endfor %}\n{% endif
        %}\n{{ result.sensors }}"
  - if:
    - condition: template
      value_template: "{{ (trigger.to_state.state | int(default=0)) == 0\n  and (trigger.from_state.state
        | int(default=0)) > 0 }}"
    then:
    - parallel:
      - data:
          notification_id: low-battery-alert
        action: persistent_notification.dismiss
      - data:
          send_to: joshua
          notification_type: clear_notification
          tag: low-battery-alert
        action: script.notify_mobile
    else:
    - parallel:
      - data:
          title: '{{ title }}'
          message: '{{ iif(sensors | count > 0, ''- '', '''') }}{{ sensors | join(''\n-
            '') }}'
          notification_id: low-battery-alert
        action: persistent_notification.create
      - data:
          send_to: joshua
          title: '{{ title }}'
          message: '{{ sensors | join(''<br>'') }}'
          notification_icon: mdi:battery-alert
          color: '#f44336'
          icon: local/icons/battery-alert.png
          group: System
          tag: low-battery-alert
          url: dashboard-system/overview
        action: script.notify_mobile
  mode: single
- id: '1665696488378'
  alias: ⚙️ Clear TTS Cache
  description: Clears the TTS cache once a week
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: time
    weekday:
    - mon
    before: 00:00:00
    after: 00:00:00
  action:
  - data: {}
    action: tts.clear_cache
  mode: single
  initial_state: false
- id: '1665696511584'
  alias: ⚙️ Disk Space Low
  description: Sends a notification when the Disk space is low
  trigger:
  - platform: numeric_state
    entity_id: sensor.disk_use_percent
    above: 89
  condition: []
  action:
  - parallel:
    - data:
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
        notification_id: low-disk-space
      action: persistent_notification.create
    - data:
        send_to: joshua
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
        notification_icon: mdi:micro-sd
        color: '#607d8b'
        icon: local/icons/micro-sd.png
        group: System
        tag: system-disk
        url: dashboard-system/overview
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
        icon: local/icons/micro-sd.png
      action: script.notify_lnxlink
  mode: single
- id: '1665696446379'
  alias: ⚙️ Event Sniffer
  description: Listen for events and output data
  triggers:
  - event_type: mobile_app_notification_action
    trigger: event
    enabled: false
  - event_type: hass_agent_notifications
    trigger: event
    enabled: false
  - event_type: dreame_vacuum_task_status
    trigger: event
  - event_type: dreame_vacuum_consumable
    trigger: event
  - event_type: dreame_vacuum_information
    trigger: event
  - event_type: dreame_vacuum_warning
    trigger: event
  - event_type: dreame_vacuum_error
    trigger: event
  conditions: []
  actions:
  - data:
      title: Actionable Event Sniffer
      message: '{{ trigger.event.data | to_json }}'
    action: persistent_notification.create
  mode: parallel
- id: '1665696688106'
  alias: ⚙️ Event Sniffer [Z-Wave JS]
  description: Listen for Z-Wave JS events
  triggers:
  - event_type: zwave_js_value_notification
    alias: When Central Scene event is fired
    trigger: event
  - event_type: zwave_js_notification
    alias: When Notification Command Class, Entry Control Command Class is fired
    trigger: event
  conditions:
  - condition: template
    value_template: '{{ event_label.endswith("lock operation") == False }}'
    alias: 'Ignore events already identified: Manual deadbolt operation'
  actions:
  - variables:
      event_data: '{{ trigger.event.data | default("") }}'
      event_type: '{{ trigger.event.event_type | default("") }}'
      event_label: '{{ event_data.event_label | default("") }}'
      notification_label: '{{ event_data.label | default("") }}'
      node_id: '{{ event_data.node_id | default("") }}'
  - data:
      title: ZWaveJS Event Sniffer
      message: 'event_type: {{ event_type }}

        node_id: {{ node_id }}

        label: {{ label }}

        event_label: {{ event_label }}

        event_data: {{ event_data }}'
    action: persistent_notification.create
  mode: parallel
  initial_state: false
- id: '1665696525167'
  alias: ⚙️ Failed Login
  description: Sends a notification when there is a failed login
  trigger:
  - platform: persistent_notification
    update_type: added
  condition:
  - condition: template
    value_template: '{%- set notification = trigger.notification.message -%} {{ "Too
      many login attempts" in notification or "invalid authentication" in notification
      or "login attempt" in notification }}'
  action:
  - data:
      send_to: joshua
      title: '{{ trigger.notification.title }}'
      message: '{{ trigger.notification.message }}'
      notification_icon: mdi:home-assistant
      color: '#2196f3'
      icon: local/icons/home-assistant.png
    action: script.notify_mobile
  - data:
      computer:
      - erebus
      title: '{{ trigger.notification.title }}'
      message: '{{ trigger.notification.message }}'
      icon: local/icons/home-assistant.png
    action: script.notify_lnxlink
  mode: single
- id: '1734643266064'
  alias: ⚙️ Forward Reload Templates
  description: Forwards the template reloaded event so other actions can be taken
  triggers:
  - event_type: event_template_reloaded
    trigger: event
  actions:
  - delay: 00:00:01
  - event: templates_reloaded
    event_data: {}
- id: '1713385133443'
  alias: ⚙️ Offline Devices
  description: Sends a notification when a device is offline
  triggers:
  - entity_id:
    - sensor.offline_devices
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ not trigger.to_state in ['unknown', 'unavailable', none]\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable', none]\n  and
      not trigger.from_state in ['unknown', 'unavailable', none]\n  and not trigger.from_state.state
      in ['unknown', 'unavailable', none]\n  and trigger.to_state.state != trigger.from_state.state\n}}"
  actions:
  - variables:
      offline: '{{ trigger.to_state.state | int(default=0) }}'
      title: Offline Device{{ iif(offline > 1, 's', '') }} ({{ offline }})
      sensors: "{% set result = namespace(sensors=[]) %} {% for entity_id in trigger.to_state.attributes.entity_id
        %}\n  {% set state = states(entity_id) %}\n  {% set time = iif(has_value(entity_id),
        \" (\" ~ as_datetime(state) | relative_time ~ \")\", \" (Unknown)\") %}\n
        \ {% set name = state_attr(entity_id, \"friendly_name\") | regex_replace(find
        = \" last seen\", replace = \"\", ignorecase = true) %}\n  {% set result.sensors
        = result.sensors + [name ~ time] %}\n{% endfor %}{{ result.sensors }}"
  - if:
    - condition: template
      value_template: "{{ (trigger.to_state.state | int(default=0)) == 0\n  and (trigger.from_state.state
        | int(default=0)) > 0 }}"
    then:
    - data:
        notification_id: offline-devices
      action: persistent_notification.dismiss
    else:
    - data:
        title: '{{ title }}'
        message: '{{ iif(sensors | count > 0, ''- '', '''') }}{{ sensors | join(''\n-
          '') }}'
        notification_id: offline-devices
      action: persistent_notification.create
  mode: restart
- id: '1665696553212'
  alias: ⚙️ RAM Usage High
  description: Sends a notification when the RAM usage is high
  trigger:
  - platform: numeric_state
    entity_id: sensor.memory_use_percent
    above: 59
  condition: []
  action:
  - parallel:
    - data:
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
        notification_id: low-ram
      action: persistent_notification.create
    - data:
        send_to: joshua
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
        notification_icon: mdi:memory
        color: '#607d8b'
        icon: local/icons/memory.png
        group: System
        tag: system-ram
        url: dashboard-system/overview
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
        icon: local/icons/memory.png
      action: script.notify_lnxlink
  mode: single
- id: '1702017706466'
  alias: ⚙️ Scan Interval
  description: Devices with custom scan intervals
  trigger:
  - platform: time_pattern
    minutes: '*'
  action:
  - variables:
      entities:
        binary_sensor.canon_mf743c_online: 1
      total_mins: '{{ (now().timestamp() / 60) | int }}'
  - repeat:
      for_each: '{{ entities | dictsort }}'
      sequence:
      - if:
        - condition: template
          value_template: '{{ total_mins % repeat.item[1] == 0 }}'
        then:
        - target:
            entity_id: '{{ repeat.item[0] }}'
          action: homeassistant.update_entity
- id: '1665696596579'
  alias: ⚙️ Startup
  description: Actions to run at startup
  triggers:
  - event: start
    trigger: homeassistant
  conditions: []
  actions:
  - data:
      message: Startup automation starting...
    action: browser_mod.notification
  - delay:
      seconds: 60
  - parallel:
    - metadata: {}
      data:
        addon: 45df7312_zigbee2mqtt
      action: hassio.addon_restart
    - data: {}
      target:
        entity_id:
        - input_boolean.washer_status
        - input_boolean.dryer_status
      action: input_boolean.turn_off
  - data: {}
    target:
      device_id:
      - 1dee4aa37e70d346348224829cd7c84f
      - fd4ff1a9970156bb319e4d85d4450657
      - 49d046eb766685131c0c5deb9f0d2250
    action: homeassistant.reload_config_entry
  - delay:
      seconds: 30
  - data:
      entity:
      - media_player.ardena
      - media_player.athos
      - media_player.nasya
    action: script.hass_publish_sensors
  - data:
      message: Startup automation complete...
    action: browser_mod.notification
  - enabled: false
    data:
      stop_actions: false
    target:
      entity_id: automation.startup
    action: automation.turn_off
  mode: single
- id: '1698644135975'
  alias: ⚙️ Update Database Filesize Sensor
  description: Updates the file size sensor for the database.
  trigger:
  - platform: time_pattern
    minutes: /30
    seconds: '0'
    hours: '*'
  condition: []
  action:
  - data: {}
    target:
      entity_id: sensor.home_assistant_v2_db_size
    action: homeassistant.update_entity
  mode: single
- id: '1665696538493'
  alias: ⚙️ Updates Available
  description: Create a notification when there are updates pending
  triggers:
  - entity_id:
    - sensor.updates
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ not trigger.to_state in ['unknown', 'unavailable', none]\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable', none]\n  and
      not trigger.from_state in [\"unknown\", \"unavailable\", none]\n  and not trigger.from_state.state
      in [\"unknown\", \"unavailable\", none]\n  and trigger.to_state.state != trigger.from_state.state\n}}"
  actions:
  - variables:
      updates: '{{ trigger.to_state.state | int(default=0) }}'
      title: Update{{ iif(updates > 1, 's', '') }} Pending ({{ updates }})
  - if:
    - condition: template
      value_template: "{{ (trigger.to_state.state | int(default=0)) == 0\n  and (trigger.from_state.state
        | int(default=0)) > 0 }}"
    then:
    - data:
        notification_id: hacs-update
      action: persistent_notification.dismiss
    - data:
        send_to: joshua
        notification_type: clear_notification
        tag: hacs-update
      action: script.notify_mobile
    else:
    - parallel:
      - data:
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%} {%- for repo in trigger.to_state.attributes.entity_id
            -%}\n  {%- if state_attr(repo, 'installed_version') != state_attr(repo,
            'latest_version') -%}\n    {% set update = '__' ~ state_attr(repo, 'friendly_name')
            | replace(' update', '') ~ ':__ _' ~ state_attr(repo, 'installed_version')
            ~ '_ -> _' ~ state_attr(repo, 'latest_version') ~ '_' %}\n    {%- set
            list.updates = list.updates + [update] -%}\n  {%- endif -%}\n{%- endfor
            -%} {{ list.updates | join('\\n') }}"
          notification_id: hacs-update
        action: persistent_notification.create
      - data:
          send_to: joshua
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%} {%- for repo in trigger.to_state.attributes.entity_id
            -%}\n  {%- if state_attr(repo, 'installed_version') != state_attr(repo,
            'latest_version') -%}\n    {% set update = '<b>' ~ state_attr(repo, 'friendly_name')
            | replace(' update', '') ~ ':</b> <em>' ~ state_attr(repo, 'installed_version')
            ~ '</em> -> <em>' ~ state_attr(repo, 'latest_version') ~ '</em>' %}\n
            \   {%- set list.updates = list.updates + [update] -%}\n  {%- endif -%}\n{%-
            endfor -%} {{ list.updates | join('<br>') }}"
          notification_icon: mdi:update
          color: '#4caf50'
          icon: local/icons/update.png
          group: Upgrade
          tag: hacs-update
          url: config/updates
        action: script.notify_mobile
      - data:
          computer:
          - erebus
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%}\n{%- for repo in state_attr(\"sensor.updates\",
            \"entity_id\") -%}\n  {%- if state_attr(repo, 'installed_version') !=
            state_attr(repo, 'latest_version') -%}\n    {% set update = '<b>' ~ state_attr(repo,
            'friendly_name') | replace(' update', '') ~ ':</b> <i>' ~ state_attr(repo,
            'installed_version') ~ '</i> -> <i>' ~ state_attr(repo, 'latest_version')
            ~ '</i>' %}\n    {%- set list.updates = list.updates + [update] -%}\n
            \ {%- endif -%}\n{%- endfor -%}\n{{ list.updates | join(\" | \") }}"
          icon: local/icons/update.png
        action: script.notify_lnxlink
  mode: restart
- id: '1725915027719'
  alias: ⚡ Tariff Changes
  description: Sets the current tariff and sends a notification.
  triggers:
  - entity_id:
    - sensor.emporiavue_main_total_monthly
    below: 800
    id: tier_1
    trigger: numeric_state
  - entity_id:
    - sensor.emporiavue_main_total_monthly
    above: 800
    below: 2000
    id: tier_2
    trigger: numeric_state
  - entity_id:
    - sensor.emporiavue_main_total_monthly
    above: 2000
    id: tier_3
    trigger: numeric_state
  - entity_id:
    - binary_sensor.tariff_summer
    to:
    id: season
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ not trigger.from_state.state in [''unknown'', ''unavailable'',
      none, null] and not trigger.to_state.state in [''unknown'', ''unavailable'',
      none, null] }}'
  actions:
  - variables:
      season: '{{ iif(is_state(''binary_sensor.tariff_summer'', ''on''), ''summer'',
        ''winter'') }}'
      map: "{{ {\n    'summer_tier_1': ['under 800', 'summer tier 1'],\n    'summer_tier_2':
        ['over 800', 'summer tier 2'],\n    'summer_tier_3': ['over 2000', 'summer
        tier 3'],\n    'winter_tier_1': ['under 800', 'winter tier 1'],\n    'winter_tier_2':
        ['over 800', 'winter tier 2'],\n    'winter_tier_3': ['over 2000', 'winter
        tier 3'],\n} }}\n"
      tariff: "{% if trigger.id == 'season' and has_value('select.monthly_energy')
        %}\n  {{ season }}_tier_{{ states('select.monthly_energy').split('_')[2] }}\n{%
        else %}\n  {{ season }}_{{ trigger.id }}\n{% endif %}\n"
      message: Power usage is {{ map[tariff][0] }} kWh. Now charing {{ map[tariff][1]
        }} rates.
  - action: select.select_option
    data:
      option: '{{ tariff }}'
    target:
      entity_id: select.monthly_energy
  - action: script.notify_mobile
    data:
      send_to: parents
      title: Energy Tariff Changed
      message: '{{ message }}'
      notification_icon: mdi:lightning-bolt
      color: '#ffeb3b'
      icon: local/icons/lightning-bolt.png
      group: Power
      tag: energy-tariff
      url: lovelace/power
  - data:
      computer:
      - erebus
      title: Energy Tariff Changed
      message: '{{ message }}'
      icon: local/icons/lightning-bolt.png
    action: script.notify_lnxlink
  mode: single
- id: '1756939658715'
  alias: ⛩️ Automatic Garage Door
  description: ''
  use_blueprint:
    path: etiennec78/automatic-gate.yaml
    input:
      gate:
      - cover.garage_door
      persons:
      - person.amy
      - person.joshua
      driving_sensors:
      - binary_sensor.pixel_10_amy_android_auto
      - binary_sensor.pixel_10_joshua_android_auto
      travel_time_sensors:
      - sensor.amy_travel_time
      - sensor.joshua_travel_time
      itinerary_sensors:
      - input_text.amy_itinerary
      - input_text.joshua_itinerary
      wifi_devices:
      - device_tracker.pixel_10_amy
      - device_tracker.pixel_10_joshua
      locks:
      - lock.garage_entry
      dont_lock_if_people_remaining: true
      arrival_opening_behavior: timer
      arrival_closing_behavior: notif
      timer: 20
      notify_devices:
      - 5d251328aa63591bec98a091f08427b1
      - e4ca1450b85b5d46e8d6d867f7b4e8e6
      departure_opening_behavior: notif
      only_open_near:
      - wifi
      lead_time: 45
      departure_closing_behavior: notif
      travel_time_rate: continuous
- id: '1704733260383'
  alias: ✴️ Joshua Office CO2 Levels
  description: Sets MSR-1 LED color Alerts when CO2 levels in Joshua's Office are
    high
  triggers:
  - entity_id:
    - sensor.apollo_msr_1_office_co2
    to:
    trigger: state
  - event: start
    trigger: homeassistant
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 1666
      sequence:
      - data:
          song_str: Cantina:d=4,o=5,b=250:8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p
        action: esphome.apollo_msr_1_bcbde8_play_buzzer
        enabled: false
      - data:
          rgb_color:
          - 255
          - 0
          - 0
          brightness: 255
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
        action: light.turn_on
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 1333
        below: 1666
      sequence:
      - data:
          rgb_color:
          - 255
          - 100
          - 0
          brightness: 128
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
        action: light.turn_on
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 800
        below: 1333
      sequence:
      - data:
          rgb_color:
          - 255
          - 200
          - 0
          brightness: 128
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
        action: light.turn_on
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        below: 800
      sequence:
      - target:
          entity_id: light.apollo_msr_1_office_rgb_light
        data: {}
        action: light.turn_off
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  mode: single
  max_exceeded: silent
- id: '1704671260235'
  alias: ✴️ Joshua Office Light On/Off Presence
  description: Turn on/off the light based on presence
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.apollo_msr_1_office_radar_target
    id: 'on'
    to: 'on'
  - platform: state
    entity_id:
    - binary_sensor.apollo_msr_1_office_radar_target
    id: 'off'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - data: {}
        action: script.joshua_office_lights_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - target:
          entity_id: light.joshua_office_lights
        data:
          transition: 20
        action: light.turn_off
  mode: restart
- id: '1740694410995'
  alias: "\U0001F310 IP Address Changed"
  description: Sends notifications when the IP address changes
  triggers:
  - trigger: state
    entity_id:
    - sensor.external_ip
  conditions:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable",
      null] and not trigger.to_state.state in ["unknown", "unavailable", null] }}'
  actions:
  - variables:
      title: Network
      message: IP address changed {{ trigger.from_state.state }} -> {{ trigger.to_state.state
        }}
      icon: local/icons/web.png
      icon_mdi: mdi:web
      color: '#e91e63'
      tag: unifi-ip
      group: Network
  - parallel:
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        - cartago
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: restart
- id: '1669666972148'
  alias: "\U0001F310 UniFi WAN Status"
  description: Sends notifications when the network status changes
  triggers:
  - entity_id:
    - sensor.ucg_ultra_state
    to: Connected
    from: Disconnected
    id: connected
    trigger: state
  - entity_id:
    - sensor.ucg_ultra_state
    to: Disconnected
    from:
    id: disconnected
    trigger: state
  conditions: []
  actions:
  - variables:
      title: Network
      icon: local/icons/web.png
      icon_mdi: mdi:web
      color: '#e91e63'
      tag: unifi-www
      group: Network
      tv_entities:
      - media_player.living_room_googletv
      - media_player.shield_family_room
      - media_player.shield_main_bedroom
  - choose:
    - conditions:
      - condition: trigger
        id:
        - connected
      sequence:
      - variables:
          message: The Internet is back up
      - parallel:
        - data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            tag: '{{ tag }}'
          action: script.notify_mobile
        - data:
            entity: '{{ tv_entities }}'
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
          action: script.notify_lnxlink
    - conditions:
      - condition: trigger
        id:
        - disconnected
      sequence:
      - variables:
          message: The Internet is down
      - parallel:
        - data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            tag: '{{ tag }}'
          action: script.notify_mobile
        - data:
            entity: '{{ tv_entities }}'
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
          action: script.notify_lnxlink
    default: []
  mode: restart
- id: '1737664483359'
  alias: "\U0001F37D️ Dishwasher Timer"
  description: Starts the timer when the dishwasher starts
  triggers:
  - trigger: state
    entity_id:
    - sensor.ge_dishwasher_operating_mode
    not_to:
    - unavailable
    - unknown
    not_from:
    - unavailable
    - unknown
  conditions: []
  actions:
  - variables:
      time_remaining: '{{ states(''sensor.ge_dishwasher_time_remaining'') | float(0)
        }}'
  - choose:
    - conditions:
      - condition: state
        entity_id: sensor.ge_dishwasher_operating_mode
        state: Cycle Active
      - condition: template
        value_template: '{{ not is_state(''timer.ge_dishwasher'', ''active'') }}'
      sequence:
      - action: timer.start
        metadata: {}
        data:
          duration: '{{ time_remaining }}:00'
        target:
          entity_id: timer.ge_dishwasher
    - conditions:
      - condition: state
        entity_id: sensor.ge_dishwasher_operating_mode
        state: Cycle Active
      - condition: template
        value_template: '{{ is_state(''timer.ge_dishwasher'', ''active'') }}'
      - condition: template
        value_template: '{% set timer_remaining = (as_timestamp(states.timer.ge_dishwasher.attributes.finishes_at)
          - as_timestamp(now())) / 60 | round(0) %} {% set time_diff = time_remaining
          - timer_remaining | abs %} {{ time_diff > 5 }}

          '
      sequence:
      - target:
          entity_id: timer.ge_dishwasher
        data:
          duration: '{{ time_remaining }}:00'
        action: timer.start
    - conditions:
      - condition: state
        entity_id: sensor.ge_dishwasher_operating_mode
        state: Cycle Complete
      sequence:
      - action: timer.finish
        metadata: {}
        data: {}
        target:
          entity_id: timer.ge_dishwasher
  mode: single
- id: '1665687778783'
  alias: "\U0001F37D️ Dishwasher is Done"
  description: Sends notification when the dishwasher is done
  triggers:
  - entity_id:
    - sensor.ge_dishwasher_operating_mode
    to: Cycle Complete
    trigger: state
  conditions: []
  actions:
  - variables:
      title: Dishwasher
      message: The dishwasher is done!
      icon: local/icons/dishwasher.png
      mdi_icon: mdi:dishwasher
      color: '#2196f3'
      tag: dishwasher
  - parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ mdi_icon }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
        interruption_level: critical
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
    alias: Send a notification to each device
  mode: single
  max_exceeded: silent
- id: '1755697332991'
  alias: "\U0001F37D️ Microwave Finished"
  description: Sends notification when the microwave is finished
  triggers:
  - entity_id:
    - sensor.emporiavue_sub_kitchen_island_power
    above: 100
    trigger: numeric_state
  actions:
  - variables:
      title: Microwave Finished
      message: Enjoy your meal!
      mdi_icon: mdi:microwave
      icon: local/icons/microwave.png
      color: '#e91e63'
  - wait_for_trigger:
    - entity_id:
      - sensor.emporiavue_sub_kitchen_island_power
      for:
        hours: 0
        minutes: 0
        seconds: 5
      below: 5
      trigger: numeric_state
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
  - action: script.notify_mobile
    data:
      send_to: joshua
      location: home
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ mdi_icon }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
  mode: restart
- id: '1730497546367'
  alias: "\U0001F37D️ Oven Bake Timer Completed"
  description: Sends notification when the oven bake timer is finished
  triggers:
  - entity_id:
    - sensor.ge_oven_cook_time_remaining
    to: 'Off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable",
      none] }}'
    alias: Check for offline device
  actions:
  - variables:
      title: Oven Timer
      message: The oven bake timer has finished
      icon: local/icons/stove.png
      color: '#f44336'
      tag: oven
      icon_mdi: mdi:stove
  - parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
        interruption_level: critical
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: Oven
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: Oven
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Oven
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      alias: Send a notification to each device
      action: script.notify_tvoverlay
  mode: single
- id: '1737664900410'
  alias: "\U0001F37D️ Oven Cook Timer"
  description: Starts a timer when the oven cook timer starts
  triggers:
  - trigger: state
    entity_id:
    - sensor.ge_oven_cook_time_remaining
    not_to:
    - unavailable
    - unknown
    not_from:
    - unavailable
    - unknown
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.from_state.state == "Off" and trigger.to_state.state
          != "Off" }}'
      sequence:
      - action: timer.start
        metadata: {}
        data:
          duration: '{{ trigger.to_state.state }}:00'
        target:
          entity_id: timer.ge_oven_cook
    - conditions:
      - condition: template
        value_template: '{{ trigger.from_state.state != "Off" and trigger.to_state.state
          == "Off" }}'
      sequence:
      - action: timer.finish
        metadata: {}
        data: {}
        target:
          entity_id: timer.ge_oven_cook
  mode: single
- id: '1737665076651'
  alias: "\U0001F37D️ Oven Kitchen Timer"
  description: Starts a timer when the oven cook timer starts
  triggers:
  - trigger: state
    entity_id:
    - sensor.ge_oven_kitchen_timer
    not_to:
    - unavailable
    - unknown
    not_from:
    - unavailable
    - unknown
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.from_state.state == "Off" and trigger.to_state.state
          != "Off" }}'
      sequence:
      - action: timer.start
        metadata: {}
        data:
          duration: '{{ trigger.to_state.state }}:00'
        target:
          entity_id: timer.ge_oven_kitchen
    - conditions:
      - condition: template
        value_template: '{{ trigger.from_state.state != "Off" and trigger.to_state.state
          == "Off" }}'
      sequence:
      - action: timer.finish
        metadata: {}
        data: {}
        target:
          entity_id: timer.ge_oven_kitchen
  mode: single
- id: '1723166117553'
  alias: "\U0001F37D️ Oven Kitchen Timer Completed"
  description: Sends notification when the oven kitchen timer is finished
  triggers:
  - entity_id:
    - sensor.ge_oven_kitchen_timer
    to: 'Off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable",
      none] }}'
  actions:
  - variables:
      title: Oven Timer
      message: The oven kitchen timer has finished
      icon: local/icons/stove.png
      color: '#f44336'
      tag: oven
      icon_mdi: mdi:stove
  - parallel:
    - action: script.notify_mobile
      data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
        interruption_level: critical
    - action: script.notify_hass_agent
      data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
    - action: script.notify_lnxlink
      data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
    - action: script.notify_tvoverlay
      data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
  mode: single
- id: '1723165470472'
  alias: "\U0001F37D️ Oven is Preheated"
  description: Sends notification when the oven is preheated
  triggers:
  - entity_id:
    - sensor.ge_oven_current_state
    from: Preheat
    to: Bake
    trigger: state
  conditions: []
  actions:
  - variables:
      title: Oven
      message: The oven is preheated!
      icon: local/icons/stove.png
      color: '#f44336'
      tag: oven
      icon_mdi: mdi:stove
  - parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
        interruption_level: critical
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  mode: single
- id: '1665697728164'
  alias: "\U0001F384 XMas Lights On/Off"
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: -00:20:00
    id: 'on'
  - platform: time
    at: input_datetime.xmas_lights_off
    id: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.is_xmas
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - entity_id: switch.eve
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - target:
          entity_id: switch.eve
        data: {}
        action: switch.turn_off
  mode: single
- id: '1665697781484'
  alias: "\U0001F384 XMas Tree On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.xmas_tree
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.xmas_tree
    id: 'off'
    to: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.is_xmas
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - data: {}
        target:
          entity_id: light.xmas_tree
        action: light.turn_on
      - data: {}
        target:
          entity_id: light.wled_mario_star_main
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data: {}
        target:
          entity_id: light.xmas_tree
        action: light.turn_off
      - data: {}
        target:
          entity_id: light.wled_mario_star_main
        action: light.turn_off
  mode: single
- id: '1665689705099'
  alias: "\U0001F3E2 Joshua Office Mode"
  description: Actions on day/night mode for the office
  triggers:
  - at: input_datetime.office_startup
    id: day
    trigger: time
  - at: input_datetime.office_night_mode
    id: night
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - day
      - condition: state
        entity_id: person.joshua
        state: home
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      sequence:
      - data:
          entity_id: switch.erebus
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id:
        - night
      sequence:
      - action: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id:
          - switch.joshua_office_shelf_led
          - switch.joshua_office_workbench
  mode: single
- id: '1706291631355'
  alias: "\U0001F431 Cat Feeder Empty Notification"
  description: Sends a notification when the Cat feeder is nearly empty
  triggers:
  - entity_id:
    - sensor.cat_feeder_total_weight
    above: 1340
    trigger: numeric_state
  conditions: []
  actions:
  - variables:
      title: Cat Feeder
      message: The Cat feeder is nearly empty
      icon: local/icons/paw.png
      icon_mdi: mdi:paw
      color: '#ff9800'
      tag: cat-feeder
      group: Cat Feeder
  - parallel:
    - metadata: {}
      data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
        actions:
        - action: cat_feeder_full
          title: Feeder Full
      action: script.notify_mobile
    - metadata: {}
      data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        actions:
        - action: cat_feeder_full
          title: Feeder Full
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
        actions:
        - Feeder Full
      action: script.notify_lnxlink
  mode: single
- id: '1709917613454'
  alias: "\U0001F431 Cat Feeder Error"
  description: Sends a notification when the Cat feeder has an error
  triggers:
  - entity_id:
    - binary_sensor.cat_feeder_error
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - variables:
      title: Cat Feeder Error
      message: The Cat feeder is stuck
      icon: local/icons/paw.png
      icon_mdi: mdi:paw
      color: '#ff0000'
      tag: cat-feeder
      group: Cat Feeder
  - parallel:
    - metadata: {}
      data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - metadata: {}
      data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1734069674224'
  alias: "\U0001F431 Cat Litterbox Full"
  description: Sends a notification when the Litterbox is full
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.luna_box_garbage_can_full
    to: 'on'
  conditions: []
  actions:
  - variables:
      title: Litterbox
      message: The Litterbox bin is full
      icon: local/icons/paw.png
      icon_mdi: mdi:paw
      color: '#ff9800'
      tag: litterbox
      group: Litterbox
  - parallel:
    - metadata: {}
      data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - metadata: {}
      data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1734069969369'
  alias: "\U0001F431 Cat Litterbox Litter Low"
  description: Sends a notification when the Litterbox litter is nearly empty
  triggers:
  - trigger: state
    entity_id:
    - sensor.luna_box_cat_litter_state
    to: insufficient
  conditions: []
  actions:
  - variables:
      title: Litterbox
      message: The Litterbox litter is low
      icon: local/icons/paw.png
      icon_mdi: mdi:paw
      color: '#ff9800'
      tag: litterbox
      group: Litterbox
  - parallel:
    - metadata: {}
      data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - metadata: {}
      data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1665686312416'
  alias: "\U0001F4A1 All Lights off when Away"
  description: Turns off all the lights when no one is home
  trigger:
  - platform: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 15
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: sun
    after: sunrise
    after_offset: 00:45:00
  - condition: sun
    before: sunset
    before_offset: -00:45:00
  - condition: state
    entity_id: light.all_lights
    state: 'on'
  action:
  - parallel:
    - data: {}
      target:
        entity_id: light.all_lights
      action: light.turn_off
    - data:
        send_to: parents
        title: Lights Out
        message: The lights have been turned off since no one is home.
        notification_icon: mdi:lightbulb
        color: '#9e9e9e'
        icon: local/icons/lightbulb.png
        group: Light
        car_ui: true
      action: script.notify_mobile
  mode: single
- id: '1665686481763'
  alias: "\U0001F4A1 Dim Front Lights at Night"
  description: Dims the front lights at night
  triggers:
  - at: input_datetime.lights_front_night_dim
    trigger: time
  conditions: []
  actions:
  - data:
      transition: 360
      brightness_pct: 25
      color_temp_kelvin: 3000
    target:
      entity_id: light.outside_garage
    action: light.turn_on
  - data:
      transition: 360
      brightness_pct: 1
      color_temp_kelvin: 3000
    target:
      entity_id: light.outside_entry
    action: light.turn_on
  mode: single
- id: '1665686521519'
  alias: "\U0001F4A1 Front Lights off at Sunrise"
  description: Turns the front lights off at sunrise
  trigger:
  - platform: sun
    event: sunrise
    offset: +00:20:00
  condition: []
  action:
  - action: light.turn_off
    data: {}
    target:
      entity_id:
      - light.outside_garage
      - light.outside_entry
  mode: single
- id: '1665686549835'
  alias: "\U0001F4A1 Front Lights on at Sunset"
  description: Turns the front lights on at sunset
  triggers:
  - event: sunset
    offset: -00:20:00
    trigger: sun
  conditions:
  - condition: time
    before: input_datetime.lights_front_night_dim
    after: 00:00:00
  actions:
  - variables:
      scene: '{{ states(''sensor.seasonal_lights'')}}'
  - action: scene.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{ scene }}'
  mode: single
- id: '1665686584864'
  alias: "\U0001F4A1 Living Room Lamps on/off"
  description: Turns on/off the Living Room lamps
  triggers:
  - event: sunset
    offset: -00:20:00
    id: 'on'
    trigger: sun
  - at: input_datetime.living_room_lamps_off
    id: 'off'
    trigger: time
  - trigger: state
    entity_id:
    - binary_sensor.bed_presence_f56148_bed_occupied_both
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    id: 'off'
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - if:
        - condition: state
          entity_id: light.living_room_floor_lamp
          state: 'off'
        then:
        - entity_id: light.living_room_floor_lamp
          data:
            transition: 30
            brightness: 100
            color_temp_kelvin: 2700
          action: light.turn_on
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - entity_id: light.living_room_floor_lamp
        action: light.turn_off
  mode: single
- id: '1728622562146'
  alias: "\U0001F4A1 School Departure Light Indicator"
  description: Changes some light colors when it's time to go school.
  triggers:
  - at: 07:15:00
    trigger: time
    id: warn
  - trigger: time
    at: 07:20:00
    id: leave
  conditions:
  - condition: state
    entity_id: cover.garage_door
    state: closed
    enabled: false
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - warn
      sequence:
      - data:
          rgb_color:
          - 255
          - 255
          - 0
          brightness_pct: 100
        action: light.turn_on
        target:
          entity_id: light.kitchen_island
    - conditions:
      - condition: trigger
        id:
        - leave
      sequence:
      - data:
          rgb_color:
          - 255
          - 0
          - 0
        action: light.turn_on
        target:
          entity_id: light.kitchen_island
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - cover.garage_door
          to: closed
        timeout:
          hours: 0
          minutes: 10
          seconds: 0
          milliseconds: 0
      - action: light.turn_on
        metadata: {}
        data:
          color_temp_kelvin: 3000
        target:
          entity_id: light.kitchen_island
- id: '1665686715952'
  alias: "\U0001F4A1 Turn Lights On when Arrive"
  description: Turns lights on when someone arrives home after sunset
  triggers:
  - entity_id: group.people
    from: not_home
    to: home
    for:
      minutes: 1
    trigger: state
  conditions:
  - condition: sun
    after: sunset
    after_offset: -0:30:00
  - condition: time
    before: '23:59:59'
    after: 00:00:00
  actions:
  - parallel:
    - entity_id: light.mud_room
      action: light.turn_on
    - entity_id: light.living_room_fan_light
      data:
        brightness: 255
      action: light.turn_on
    - data:
        brightness: 255
      action: light.turn_on
      target:
        entity_id: light.dining_room
    - data:
        send_to: parents
        title: Lights On
        message: Welcome home, some lights have been turned on for you since it's
          dark.
        notification_icon: mdi:lightbulb-on
        color: '#ffeb3b'
        icon: local/icons/lightbulb-on.png
        group: Light
      action: script.notify_mobile
  - delay:
      minutes: 5
  - entity_id: light.mud_room
    action: light.turn_off
  mode: single
- id: '1665697635082'
  alias: "\U0001F4A7 Shut-Off Valve Overheated"
  description: Sends a notification if the water shut-off valve overheats
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.water_main_valve_overheat_detected
    to: 'on'
  conditions: []
  actions:
  - variables:
      title: Water Valve Overheated
      message: The water main shut-off valve has overheated.
      icon: local/icons/water-alert.png
      icon_mdi: mdi:water-alert
      color: '#009688'
      group: Water Leak
      tag: water-valve-overheat
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: water-valve-overheat
      action: persistent_notification.create
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: lovelace/utility
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
        importance: critical
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
    - data:
        media_player:
        - media_player.living_room_speaker
        - media_player.family_room_speaker
        - media_player.office_speaker
        message: '{{ message }}'
      action: script.notify_speech
  mode: single
- id: '1665697614552'
  alias: "\U0001F4A7 Softener Salt Level Low"
  description: Sends a notification when the water softener salt level is low
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.water_softener_salt_monitor_salt_level
    below: 15
    for:
      hours: 24
  conditions: []
  actions:
  - variables:
      title: Water Softener
      message: The salt level in the water softener is low.
      icon: local/icons/arrow-expand-vertical.png
      icon_mdi: mdi:arrow-expand-vertical
      color: '#03a9f4'
      tag: water-softener
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1665697122708'
  alias: "\U0001F4A7 Water Leak Detected"
  description: Shuts off the water main and sends a notification when a water leak
    is detected
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.basement_bathroom_sink_leak_water_leak
    - binary_sensor.basement_bathroom_toilet_water_leak_detected
    - binary_sensor.bathroom_sink_leak_water_leak
    - binary_sensor.bathroom_toilet_leak_water_leak_detected
    - binary_sensor.dishwasher_leak_water_leak_detected
    - binary_sensor.fridge_leak_water_leak
    - binary_sensor.kitchen_sink_leak_water_leak
    - binary_sensor.main_bathroom_left_sink_leak_water_leak
    - binary_sensor.main_bathroom_right_sink_leak_water_leak
    - binary_sensor.main_bathroom_toilet_water_leak_detected
    - binary_sensor.washer_leak_water_leak_detected
    - binary_sensor.water_heater_leak_water_leak_detected
    - binary_sensor.water_main_valve_water_leak_detected
    to: 'on'
  conditions: []
  actions:
  - variables:
      title: Water Leak Detected
      location: "{{ trigger.to_state.name\n  | regex_replace(find=' water', replace='',
        ignorecase=true)\n  | regex_replace(find=' leak', replace='', ignorecase=true)\n
        \ | regex_replace(find=' detected', replace='', ignorecase=true)\n  | regex_replace(find='
        moisture', replace='', ignorecase=true)\n  | trim\n}}"
      message: There is a water leak in the {{ location }} and the water main has
        been shut off.
      icon: local/icons/water-alert.png
      icon_mdi: mdi:water-alert
      color: '#009688'
      group: Water Leak
      tag: water-leak
      actions_water:
      - action: turn_on_water
        title: Turn Water Main On
  - parallel:
    - target:
        entity_id: valve.water_main_valve
      data: {}
      action: valve.close_valve
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
    - data:
        media_player:
        - media_player.living_room_speaker
        - media_player.family_room_speaker
        - media_player.office_speaker
        message: '{{ message }}'
      action: script.notify_speech
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - valve.water_main_valve
      to: closed
    timeout: 00:00:30
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      tag: '{{ tag }}'
      car_ui: true
      interruption_level: critical
      channel: Water Leak
      importance: high
      url: lovelace/utility
      actions: '{{ actions_water }}'
    action: script.notify_mobile
  - data:
      entity:
      - media_player.nasya
      title: '{{ title }}'
      message: '{{ message }}'
      actions: '{{ actions_water }}'
    action: script.notify_hass_agent
  - data:
      computer:
      - erebus
      title: '{{ title }}'
      message: '{{ message }}'
      tag: '{{ tag }}'
      icon: '{{ icon }}'
      importance: critical
      actions:
      - Turn Water Main On
    action: script.notify_lnxlink
  - delay:
      minutes: 5
  mode: single
- id: '1665689633891'
  alias: "\U0001F4AC Ascent Failed Notification"
  description: Sends a notification when the Ascent fails to start
  triggers:
  - event_type: subaru_command_failed
    event_data:
      command: remote_start
    trigger: event
  conditions: []
  actions:
  - variables:
      title: Ascent Remote Start
      icon: local/icons/subaru.png
      icon_mdi: mdi:car-connected
      color: '#0e4bef'
      tag: ascent
      group: Ascent
      url: lovelace#ascent
      message: "The Ascent didn't start.{{ \" \" }} {%- if 'doorNotLocked' in trigger.event.data.message
        -%}\n  A door wasn't locked.\n{%- elif 'doorNotClosed' in trigger.event.data.message
        -%}\n  A door wasn't closed.\n{%- elif 'Climate preset' in trigger.event.data.message
        -%}\n  The {{ trigger.event.data.message }}\n{%- elif 'fuelLevelTooLow' in
        trigger.event.data.message -%}\n  Fuel level is low.\n{%- elif 'otherCommandsOngoing'
        in trigger.event.data.message -%}\n  Another command is in-progress.\n{%-
        elif 'never received' in trigger.event.data.message -%}\n  The message wasn't
        recieved.\n{%- elif 'ignitionIsOn' in trigger.event.data.message -%}\n  The
        car is already running.\n{%- elif '500' in trigger.event.data.message -%}\n
        \ The service is offline.\n{%- elif 'unknown' in trigger.event.data.message
        -%}\n  I have no idea why. Please try again.\n{% endif %}"
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
        url: '{{ url }}'
        actions:
        - action: ascent_remote_start_again
          title: Retry
      action: script.notify_mobile
    - alias: Check the car is in the garage
      if:
      - condition: state
        entity_id: device_tracker.ascent
        state: home
      then:
      - parallel:
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            message: '{{ message }}'
          action: script.notify_speech
  mode: single
- id: '1704385020720'
  alias: "\U0001F4AC Ascent Fuel Level Low"
  description: Sends a notification when the Ascent's fuel level is low
  triggers:
  - entity_id:
    - sensor.ascent_range
    below: 31
    trigger: numeric_state
  conditions: []
  actions:
  - variables:
      title: Ascent Fuel Low
      icon: local/icons/subaru.png
      icon_mdi: mdi:car-connected
      color: '#0e4bef'
      group: Ascent
      url: lovelace#ascent
      tag: ascent-fuel
      summary: The fuel level in the Ascent is low (<30 miles).
      fuel_level: '{{ states(''sensor.ascent_fuel_level'') | float(100) }}'
      tank_capacity: 19.3
      gallons_remaining: '{{ (100 - fuel_level) / 100 * tank_capacity }}'
      stations:
        Costco: '{{ states(''sensor.costco_regular_gas'') | float(3) }}'
        Maverik: '{{ (states(''sensor.maverik_regular_gas'') | float(3)) - 0.1 }}'
      message: "Current gas prices. {%- for name, price in stations.items() %}\n  {{
        name }}: {{ \"${:.2f}\".format(price) }} ⸱ {{ \"${:.2f}\".format(gallons_remaining
        * price) }}\n{%- endfor %}\n"
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: parents
        title: '{{ title }}'
        subtitle: '{{ summary }} ⤵️'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        tag: '{{ tag }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1678829415008'
  alias: "\U0001F4AC Ascent Remote Start Expired Notification"
  description: Sends a notification when the Ascent remote start expires
  triggers:
  - event_type: timer.finished
    event_data:
      entity_id: timer.ascent_remote_start
    trigger: event
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: cover.garage_door
      state: open
    - condition: state
      entity_id: device_tracker.ascent
      state: home
  actions:
  - variables:
      title: Ascent Remote Start
      message: The Ascent shut off and is no longer running.
      icon: local/icons/subaru.png
      icon_mdi: mdi:car-connected
      color: '#114be6'
      tag: ascent
      group: Ascent
      url: lovelace#ascent
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
        actions:
        - action: ascent_remote_start_again
          title: Start Again
      action: script.notify_mobile
    - alias: Check the car is in the garage
      if:
      - condition: state
        entity_id: device_tracker.ascent
        state: home
      then:
      - parallel:
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            message: '{{ message }}'
          action: script.notify_speech
  mode: single
- id: '1673152651576'
  alias: "\U0001F4AC Ascent Started"
  description: Actions when the Ascent starts
  triggers:
  - event_type: subaru_command_successful
    event_data:
      command: remote_start
    trigger: event
  conditions: []
  actions:
  - variables:
      title: Ascent Remote Start
      message: The Ascent started and is running.
      icon: local/icons/subaru.png
      icon_mdi: mdi:car-connected
      color: '#114be6'
      tag: ascent
      group: Ascent
      url: lovelace#ascent
  - data: {}
    target:
      entity_id: timer.ascent_remote_start
    action: timer.start
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - alias: Check the car is in the garage
      if:
      - condition: state
        entity_id: device_tracker.ascent
        state: home
      then:
      - parallel:
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            message: '{{ message }}'
          action: script.notify_speech
  - wait_for_trigger:
    - entity_id:
      - cover.garage_door
      to: closed
      trigger: state
    - event_type: subaru_command_successful
      event_data:
        command: remote_stop
      trigger: event
    - entity_id:
      - binary_sensor.pixel_10_amy_android_auto
      - binary_sensor.pixel_10_joshua_android_auto
      to: 'on'
      trigger: state
    timeout:
      minutes: 10
      seconds: 5
    continue_on_timeout: false
  - data: {}
    target:
      entity_id: timer.ascent_remote_start
    action: timer.cancel
  mode: single
- id: '1713983450425'
  alias: "\U0001F4AC Bambu P1S Print Completed"
  description: Notify when the print is finished or failed.
  triggers:
  - entity_id:
    - sensor.bambu_p1s_print_status
    to: finish
    id: Completed
    trigger: state
  - entity_id:
    - sensor.bambu_p1s_print_status
    to: failed
    id: Failed
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable",
      "offline"] }}'
  actions:
  - variables:
      title: 3D Print {{ trigger.id }}
      icon: local/icons/bambu-lab.png
      icon_mdi: mdi:printer-3d
      color: '#16c344'
      tag: 3d-printer
      group: 3D Printer
      url: lovelace/bambu
      camera: camera.bambu_p1s_camera
      time: '{{ as_timestamp(now()) | timestamp_custom("%-m/%-d/%Y %-I:%M %p") }}'
      model: '{{ states("sensor.bambu_p1s_task_name") | replace(".3mf","") | replace(".stl",
        "") | replace(".gcode","") }}'
      message: '{{ model }} {{ trigger.id | lower }} printing at {{ time }}'
      cooled_message: Bed has cooled down. {{ message }}
      cooled_message_short: Bed has cooled down, you can remove {{ model }}
  - parallel:
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        camera: '{{ camera }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        camera: '{{ camera }}'
      action: script.notify_lnxlink
  - alias: Wait for bed to cool
    wait_for_trigger:
    - entity_id:
      - sensor.bambu_p1s_bed_temperature
      below: 46
      trigger: numeric_state
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
  - parallel:
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ cooled_message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        camera: '{{ camera }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ cooled_message_short }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  - metadata: {}
    data: {}
    target:
      entity_id: light.bambu_p1s_chamber_light
    action: light.turn_off
  mode: single
- id: '1713973263507'
  alias: "\U0001F4AC Bambu P1S Print Status"
  description: Notify current print status every 10% (or 25% for short prints).
  triggers:
  - entity_id:
    - sensor.bambu_p1s_print_progress
    to:
    from:
    trigger: state
  conditions:
  - alias: Update at 10% intervals
    condition: template
    value_template: "{%- if has_value(\"sensor.bambu_p1s_end_time\")\n  and has_value(\"sensor.bambu_p1s_start_time\")\n
      \ and has_value(\"sensor.bambu_p1s_print_progress\")\n  and not states(\"sensor.bambu_p1s_print_progress\")
      in [\"0\", \"100\"]\n-%}\n  {%- set total_time = (as_datetime(states(\"sensor.bambu_p1s_end_time\"))
      - as_datetime(states(\"sensor.bambu_p1s_start_time\"))).total_seconds() / 60
      -%}\n  {%- if total_time > 60 -%}\n    {%- set step = 10 -%}\n  {%- else -%}\n
      \   {%- set step = 25 -%}\n  {%- endif -%}\n  {{ states(\"sensor.bambu_p1s_print_progress\")
      | int % step == 0 }}\n{%- else -%}\n  {{ false }}\n{%- endif -%}"
  actions:
  - variables:
      progress: '{{ states("sensor.bambu_p1s_print_progress") }}%'
      title: 3D Print Status {{ progress }}
      icon: local/icons/bambu-lab.png
      icon_mdi: mdi:printer-3d
      color: '#16c344'
      tag: 3d-printer
      group: 3D Printer
      url: lovelace/bambu
      camera: camera.bambu_p1s_camera
      model: "{{ states(\"sensor.bambu_p1s_task_name\")\n  | replace(\".3mf\", \"\")\n
        \ | replace(\".stl\", \"\")\n  | replace(\".gcode\", \"\")\n}}"
      end_time: '{{ states(''sensor.bambu_p1s_end_time'') | as_timestamp }}'
      time_remaining: '{% set time_to_end = states(''sensor.bambu_p1s_remaining_time'')
        | int %} {% set hours = (time_to_end / 60) | int %} {% set minutes = time_to_end
        % 60 %} {{ ''{:01}h {:01}m''.format(hours, minutes) }}'
      finish_time: "{% if end_time | timestamp_custom('%Y-%m-%d') == now().date()
        | string %}\n  {{ end_time | timestamp_custom('%-I:%M %p') }}\n{% else %}\n
        \ {{ end_time | timestamp_custom('%m/%d %-I:%M %p') }}\n{% endif %}"
      message: '{{ model }} will finish in {{ time_remaining }} at {{ finish_time
        }}'
  - parallel:
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        camera: '{{ camera }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
        interruption_level: critical
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1714000511725'
  alias: "\U0001F4AC Bambu P1S Printer Error"
  description: Notify on printer errors.
  triggers:
  - device_id: b9e70ce89bcabdccae4b86eeae1918f2
    domain: bambu_lab
    type: event_printer_error
    trigger: device
  conditions: []
  actions:
  - variables:
      title: P1S Issue Detected - {{ trigger.event.data.code }}
      message: '{{ trigger.event.data.error }}'
      icon: local/icons/bambu-lab.png
      icon_mdi: mdi:printer-3d
      color: '#16c344'
      group: 3D Printer Error
      url: lovelace/bambu
      wiki_url: '{{ trigger.event.data.url }}'
  - parallel:
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        sticky: true
        url: '{{ url }}'
        actions:
        - action: URI
          title: Bambu Lab Wiki
          uri: '{{ wiki_url }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
        importance: critical
      action: script.notify_lnxlink
  mode: single
- id: '1665687879665'
  alias: "\U0001F4AC Door Closed"
  description: Clears notification when doors are closed
  triggers:
  - entity_id:
    - binary_sensor.front_door_contact
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_contact
    - binary_sensor.garage_side_door_contact
    - binary_sensor.cold_storage_contact_contact
    from: 'on'
    to: 'off'
    for:
      seconds: 30
    trigger: state
  conditions: []
  actions:
  - data:
      send_to: parents
      notification_type: clear_notification
      tag: door-{{ trigger.to_state.object_id }}
    action: script.notify_mobile
  - if:
    - condition: template
      value_template: '{{ expand("binary_sensor.all_doors") | selectattr("state",
        "==", "on") | map(attribute="entity_id") | list | count == 0 }}'
    then:
    - target:
        entity_id: input_boolean.door_open_alerts
      data: {}
      action: input_boolean.turn_on
    - data:
        send_to: parents
        notification_type: clear_notification
        tag: door-alerts-ignored
      action: script.notify_mobile
  mode: parallel
- id: '1665687917160'
  alias: "\U0001F4AC Door Left Open"
  description: Sends notification when a door is left open
  triggers:
  - entity_id:
    - binary_sensor.front_door_contact
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_contact
    - binary_sensor.garage_side_door_contact
    - binary_sensor.cold_storage_contact_contact
    from: 'off'
    to: 'on'
    for:
      minutes: 5
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  actions:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.door_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, ''off'') }}'
      sequence:
      - variables:
          title: '{{ trigger.to_state.name }}'
          message: The {{ title }} has been open for {{ trigger.to_state.last_changed  |
            relative_time }}.
          icon: local/icons/door-open.png
          icon_mdi: mdi:door-open
          color: '#00bcd4'
          tag: door-{{ trigger.to_state.object_id }}
          group: Security
          url: lovelace/security
      - parallel:
        - data:
            send_to: parents
            location: home
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            group: '{{ group }}'
            interruption_level: critical
            tag: '{{ tag }}'
            url: '{{ url }}'
            actions:
            - action: ignore_door_alerts
              title: Ignore Alerts
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
            actions:
            - action: ignore_door_alerts
              title: Ignore Alerts
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
            importance: critical
            actions:
            - Ignore Door Alerts
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            - media_player.family_room_speaker
            - media_player.office_speaker
            message: '{{ message }}'
          action: script.notify_speech
      - wait_template: '{{ is_state(trigger.to_state.entity_id, ''off'') }}'
        timeout: 00:05:00
  mode: parallel
- id: '1665687973181'
  alias: "\U0001F4AC Door Left Open and Leaving"
  description: Sends notification if a door is open and everybody leaves
  triggers:
  - trigger: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 1
  conditions:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: template
    value_template: '{{ expand("binary_sensor.all_doors") | selectattr("state", "==",
      "on") | map(attribute="entity_id") | list | count > 0 }}'
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  actions:
  - variables:
      title: Door Left Open
      icon: local/icons/door-open.png
      icon_mdi: mdi:door-open
      color: '#00bcd4'
      group: Security
      url: lovelace/security
      message: "{%- from \"util.jinja\" import get_friendly_names -%} {%- set doors
        = expand(\"binary_sensor.all_doors\") | selectattr(\"state\", \"==\", \"on\")
        | map(attribute=\"entity_id\") | list -%} {%- if doors | length == 1 -%}\n
        \ The {{ get_friendly_names(doors) }} was open when you left!\n{%- else -%}\n
        \ The {{ get_friendly_names(doors) }} were open when you left!\n{%- endif
        -%}"
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      car_ui: true
      interruption_level: critical
      url: '{{ url }}'
      actions:
      - action: ignore_door_alerts
        title: Ignore
    action: script.notify_mobile
  mode: single
- id: '1665687990814'
  alias: "\U0001F4AC Door Opened and Away"
  description: Sends notification if a door is open when people are away
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.front_door_contact
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_contact
    - binary_sensor.garage_side_door_contact
    - binary_sensor.cold_storage_contact_contact
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: group.people
    state: not_home
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  actions:
  - variables:
      title: Door Opened
      message: The {{ trigger.to_state.attributes.friendly_name }} opened and no one
        is home.
      icon: local/icons/door-open.png
      icon_mdi: mdi:door-open
      color: '#00bcd4'
      tag: door-{{ trigger.to_state.object_id }}
      group: Security
      url: lovelace/security
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      interruption_level: critical
      tag: '{{ tag }}'
      car_ui: true
      url: '{{ url }}'
      actions:
      - action: ignore_door_alerts
        title: Ignore
    action: script.notify_mobile
  mode: single
- id: '1665689270166'
  alias: "\U0001F4AC Garage Door Closed"
  description: Clears notifications when the garage door closes
  trigger:
  - platform: state
    entity_id: cover.garage_door
    to: closed
  condition: []
  action:
  - target:
      entity_id: input_boolean.garage_door_open_alerts
    data: {}
    action: input_boolean.turn_on
  - data:
      send_to: parents
      notification_type: clear_notification
      tag: garage-door
    action: script.notify_mobile
  mode: single
- id: '1665689284289'
  alias: "\U0001F4AC Garage Door Left Open"
  description: Sends notification if the garage door is left open
  triggers:
  - trigger: state
    entity_id:
    - cover.garage_door
    to: open
    for:
      minutes: 30
  conditions:
  - condition: state
    entity_id: binary_sensor.garage_multisensor_motion_detection
    state: 'off'
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  actions:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.garage_door_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, ''closed'') }}'
      sequence:
      - variables:
          title: '{{ trigger.to_state.name }}'
          message: The {{ title }} has been open for {{ trigger.to_state.last_changed
            | relative_time }}.
          icon: local/icons/garage-open.png
          icon_mdi: mdi:garage-open
          color: '#ff9800'
          tag: garage-door
          group: Security
          url: lovelace/security
          notification_actions:
          - action: ignore_garage_door_alerts
            title: Ignore Alerts
          - action: close_garage_door
            title: Close Door
      - parallel:
        - data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            group: '{{ group }}'
            interruption_level: critical
            tag: '{{ tag }}'
            car_ui: true
            url: '{{ url }}'
            actions: '{{ notification_actions }}'
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
            actions: '{{ notification_actions }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
            importance: critical
            actions:
            - Ignore Alerts
            - Close Door
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            - media_player.family_room_speaker
            - media_player.office_speaker
            message: '{{ message }}'
          action: script.notify_speech
      - wait_template: '{{ is_state(trigger.to_state.entity_id, ''closed'') }}'
        timeout: 00:30:00
  mode: single
- id: '1665689297011'
  alias: "\U0001F4AC Garage Door Left Open and Leaving"
  description: Sends notification if a door is open and everybody leaves
  triggers:
  - trigger: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 1
  conditions:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: cover.garage_door
    state: open
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  actions:
  - variables:
      title: Garage Door Open
      message: The Garage Door was left open when you left! Close it!
      icon: local/icons/garage-open.png
      icon_mdi: mdi:garage-open
      color: '#ff9800'
      tag: garage-door
      group: Security
      url: lovelace/security
      notification_actions:
      - action: ignore_garage_door_alerts
        title: Ignore Alerts
      - action: close_garage_door
        title: Close
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      interruption_level: critical
      tag: '{{ tag }}'
      car_ui: true
      url: '{{ url }}'
      actions: '{{ notification_actions }}'
    action: script.notify_mobile
  mode: single
- id: '1665689312993'
  alias: "\U0001F4AC Garage Door Opened and Away"
  description: Sends notification if the garage door opens while people are away
  triggers:
  - trigger: state
    entity_id: cover.garage_door
    to: open
  conditions:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: group.people
    state: not_home
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  actions:
  - variables:
      title: Garage Door Open
      message: The Garage Door opened and no one is home.
      icon: local/icons/garage-open.png
      icon_mdi: mdi:garage-open
      color: '#ff9800'
      tag: garage-door
      group: Security
      url: lovelace/security
      notification_actions:
      - action: ignore_garage_door_alerts
        title: Ignore Alerts
      - action: close_garage_door
        title: Close
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      interruption_level: critical
      tag: '{{ tag }}'
      car_ui: true
      url: '{{ url }}'
      actions: '{{ notification_actions }}'
    action: script.notify_mobile
  mode: single
- id: '1691033044070'
  alias: "\U0001F4AC Garbage Collection"
  description: Sends a notification when the garbage or recycling need to be taken
    to the curb.
  triggers:
  - event: start
    offset: '-6:0:0'
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Tomorrow (6pm)'
    id: garbage-tomorrow
    trigger: calendar
  - event: start
    offset: -0:0:0
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Today (12am)'
    id: garbage-today
    trigger: calendar
  - event: end
    offset: -0:0:0
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Clear (12am)'
    id: garbage-clear
    trigger: calendar
  - event: start
    offset: '-6:0:0'
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Tomorrow (6pm)'
    id: recycle-tomorrow
    trigger: calendar
  - event: start
    offset: -0:0:0
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Today (12am)'
    id: recycle-today
    trigger: calendar
  - event: end
    offset: -0:0:0
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Clear (12am)'
    id: recycle-clear
    trigger: calendar
  conditions: []
  actions:
  - variables:
      name: '{{ trigger.calendar_event.summary }}'
      type: '{{ trigger.id.split(''-'')[0] }}'
      day: '{{ trigger.id.split(''-'')[1] }}'
      object_id: '{{ type ~ ''_collection'' }}'
      tag: '{{ object_id }}'
      icon: '{{ state_attr(''calendar.'' ~ object_id, ''icon'') }}'
      icon_image: '{{ icon | replace(''mdi:'', '''') }}'
      icon_color: '#{{ iif(type == ''recycle'', ''4caf50'', ''745246'') }}'
      description: "{% if trigger.calendar_event.description != \"\" %}\n  {{ \" \"
        }}({{ trigger.calendar_event.description }})\n{%- endif -%}"
  - choose:
    - conditions:
      - condition: trigger
        id:
        - garbage-today
        - garbage-tomorrow
        - recycle-today
        - recycle-tomorrow
      - condition: template
        value_template: '{{ is_state("input_boolean." ~ object_id, "off") }}'
      sequence:
      - data:
          send_to: parents
          title: '{{ name }} Collection'
          message: The {{ name }} can will be picked up {{ day }} {{ description }}
          notification_icon: '{{ icon }}'
          color: '{{ icon_color }}'
          icon: local/icons/{{ icon_image }}.png
          group: Collection
          tag: '{{ tag }}'
          url: lovelace/main
          actions:
          - action: '{{ object_id }}'
            title: On the curb
        action: script.notify_mobile
    - conditions:
      - condition: trigger
        id:
        - garbage-clear
        - recycle-clear
      sequence:
      - target:
          entity_id: input_boolean.{{ object_id }}
        action: input_boolean.turn_off
      - data:
          send_to: parents
          notification_type: clear_notification
          tag: '{{ tag }}'
        action: script.notify_mobile
  mode: parallel
- id: '1756855661235'
  alias: "\U0001F4AC Guest Mode Check Reminder"
  description: Sends notification to check Guest Mode status when returning home,
    after 12 hours, or when leaving without it on
  triggers:
  - entity_id: group.people
    from: not_home
    to: home
    id: returning_home
    trigger: state
  - entity_id: input_boolean.guest_mode
    to: 'on'
    for:
      hours: 12
    id: time_check
    trigger: state
  - entity_id:
    - group.people
    from: home
    to: not_home
    id: leaving_home
    trigger: state
    for:
      hours: 0
      minutes: 20
      seconds: 0
  conditions:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.id in [''returning_home'', ''time_check''] }}'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'on'
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''leaving_home'' }}'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
  actions:
  - variables:
      title: '{% if trigger.id == ''leaving_home'' %} Guest Mode Off {% else %} Guest
        Mode Active {% endif %}'
      message: '{% if trigger.id == ''leaving_home'' %} Would you like to enable Guest
        Mode before leaving? {% else %} Do you still need guest mode active? {% endif
        %}'
      icon: local/icons/account-question.png
      icon_mdi: mdi:account-question
      color: '#4caf50'
      tag: guest-mode
      group: Security
      url: lovelace/security
      notification_actions: "{% if trigger.id == 'leaving_home' %} [\n  {\"action\":
        \"enable_guest_mode\", \"title\": \"Enable Guest Mode\"},\n  {\"action\":
        \"no_guest_mode\", \"title\": \"No Guests\"}\n] {% else %} [\n  {\"action\":
        \"disable_guest_mode\", \"title\": \"No Guests\"},\n  {\"action\": \"snooze_guest_mode\",
        \"title\": \"Still Have Guests\"}\n] {% endif %}"
  - data:
      send_to: joshua
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      tag: '{{ tag }}'
      car_ui: true
      url: '{{ url }}'
      actions: '{{ notification_actions }}'
    action: script.notify_mobile
  mode: single
- id: '1725463478923'
  alias: "\U0001F4AC Kona Battery Low"
  description: Sends a notification when the Kona's battery charge is low
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.kona_car_battery_level
    below: 41
    for:
      hours: 0
      minutes: 30
      seconds: 0
  conditions: []
  actions:
  - variables:
      title: Kona Battery Low
      message: The battery charge in the Kona is low.
      icon: local/icons/hyundai.png
      icon_mdi: mdi:car-connected
      color: '#0e4bef'
      group: Kona
      url: lovelace#kona
      tag: kona-battery
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        tag: '{{ tag }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1743734517684'
  alias: "\U0001F4AC Kona Failed Notification"
  description: Sends a notification when the Kona fails to start
  triggers:
  - trigger: event
    event_type: hyundai_command_failed
    event_data:
      command: remote_start
  conditions: []
  actions:
  - variables:
      title: Kona Remote Start
      message: Something went wrong when trying to start the Kona, please try again.
      icon: local/icons/hyundai.png
      icon_mdi: mdi:car-connected
      color: '#0e4bef'
      group: Kona
      tag: kona
      url: lovelace#kona
      notification_actions:
      - action: kona_remote_start_again
        title: Retry
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
        url: '{{ url }}'
        actions: '{{ notification_actions }}'
      action: script.notify_mobile
    - alias: Check the car is in the garage
      if:
      - condition: state
        entity_id: device_tracker.kona_location
        state: home
      then:
      - parallel:
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            message: '{{ message }}'
          action: script.notify_speech
  mode: single
- id: '1725462823177'
  alias: "\U0001F4AC Kona Fuel Level Low"
  description: Sends a notification when the Kona's fuel level is low
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.kona_fuel_driving_range
    below: 31
  conditions: []
  actions:
  - variables:
      title: Kona Fuel Low
      icon: local/icons/hyundai.png
      icon_mdi: mdi:car-connected
      color: '#0e4bef'
      group: Kona
      url: lovelace#kona
      tag: kona-fuel
      summary: The fuel level in the Kona is low (<30 miles).
      fuel_level: '{{ states(''sensor.kona_fuel_level'') | float(100) }}'
      tank_capacity: 13.2
      gallons_remaining: '{{ (100 - fuel_level) / 100 * tank_capacity }}'
      stations:
        Costco: '{{ states(''sensor.costco_regular_gas'') | float(3) }}'
        Maverik: '{{ (states(''sensor.maverik_midgrade_gas'') | float(3)) - 0.1 }}'
      message: "Current gas prices. {%- for name, price in stations.items() %}\n  {{
        name }}: {{ \"${:.2f}\".format(price) }} ⸱ {{ \"${:.2f}\".format(gallons_remaining
        * price) }}\n{%- endfor %}\n"
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: parents
        title: '{{ title }}'
        subtitle: '{{ summary }} ⤵️'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        tag: '{{ tag }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1743734754522'
  alias: "\U0001F4AC Kona Remote Start Expired Notification"
  description: Sends a notification when the Kona remote start expires
  triggers:
  - trigger: event
    event_type: timer.finished
    event_data:
      entity_id: timer.kona_remote_start
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: cover.garage_door
      state: open
    - condition: state
      entity_id: device_tracker.kona_location
      state: home
  actions:
  - variables:
      title: Kona Remote Start
      message: The Kona shut off and is no longer running.
      icon: local/icons/hyundai.png
      icon_mdi: mdi:car-connected
      color: '#114be6'
      group: Kona
      tag: kona
      url: lovelace#kona
      notification_actions:
      - action: kona_remote_start_again
        title: Start Again
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
        actions: '{{ notification_actions }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
      action: script.notify_tvoverlay
    - data:
        media_player:
        - media_player.living_room_speaker
        message: '{{ message }}'
      action: script.notify_speech
  mode: single
- id: '1743734374088'
  alias: "\U0001F4AC Kona Started"
  description: Actions when the Kona starts
  triggers:
  - trigger: event
    event_type: hyundai_command_successful
    event_data:
      command: remote_start
  conditions: []
  actions:
  - variables:
      title: Kona Remote Start
      message: The Kona started and is running.
      icon: local/icons/hyundai.png
      icon_mdi: mdi:car-connected
      color: '#114be6'
      group: Kona
      tag: kona
      url: lovelace#kona
  - data: {}
    target:
      entity_id: timer.kona_remote_start
    action: timer.start
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - alias: Check the car is in the garage
      if:
      - condition: state
        entity_id: device_tracker.kona_location
        state: home
      then:
      - parallel:
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            message: '{{ message }}'
          action: script.notify_speech
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - cover.garage_door
      to: closed
    - trigger: event
      event_type: hyundai_command_successful
      event_data:
        command: remote_stop
    - trigger: state
      entity_id:
      - binary_sensor.pixel_10_amy_android_auto
      - binary_sensor.pixel_10_joshua_android_auto
      to: 'on'
    timeout:
      minutes: 10
      seconds: 5
    continue_on_timeout: false
  - data: {}
    target:
      entity_id: timer.kona_remote_start
    action: timer.cancel
  mode: single
- id: '1665700388935'
  alias: "\U0001F4AC Window Left Open"
  description: Sends notification if a window is left open
  triggers:
  - trigger: state
    entity_id: binary_sensor.front_door_contact
    from: 'off'
    to: 'on'
    for:
      minutes: 30
  conditions:
  - condition: state
    entity_id: input_boolean.window_open_alerts
    state: 'on'
  actions:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.window_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, ''off'') }}'
      sequence:
      - variables:
          title: '{{ trigger.to_state.name }}'
          message: The {{ title }} has been open for {{ trigger.to_state.last_changed
            | relative_time }}.
          icon: local/icons/window-open.png
          icon_mdi: mdi:window-open
          color: '#9c27b0'
          tag: window-{{ trigger.to_state.object_id }}
          group: Security
          url: lovelace/security
          notification_actions:
          - action: ignore_window_alerts
            title: Ignore Alerts
      - parallel:
        - data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            group: '{{ group }}'
            interruption_level: critical
            tag: '{{ tag }}'
            url: '{{ url }}'
            actions: '{{ notification_actions }}'
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
            actions: '{{ notification_actions }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
            importance: critical
            actions:
            - Ignore Window Alerts
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
        - data:
            media_player:
            - media_player.living_room_speaker
            - media_player.family_room_speaker
            - media_player.office_speaker
            message: '{{ message }}'
          action: script.notify_speech
      - wait_template: '{{ is_state(trigger.to_state.entity_id, ''off'') }}'
        timeout: 00:05:00
  mode: parallel
- id: '1710955585340'
  alias: "\U0001F4C5 Emma's Projector On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.emma_projector
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.emma_projector
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      - condition: state
        entity_id: light.nebula_projector_emma_light
        state: 'off'
      sequence:
      - data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
        action: switch.turn_off
  mode: single
- id: '1710955623615'
  alias: "\U0001F4C5 Ethan's Projector On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.ethan_projector
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.ethan_projector
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      - condition: state
        entity_id: light.nebula_projector_ethan_light
        state: 'off'
      sequence:
      - data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
        action: switch.turn_off
  mode: single
- id: '1682570311827'
  alias: "\U0001F4C5 Garbage Collection Event Generator"
  description: Creates collection events for the next year.
  triggers:
  - at: 00:00:00
    trigger: time
  conditions:
  - condition: template
    value_template: '{{ now().month == 12 and now().day == 1 }}'
  actions:
  - data:
      frequency: '2'
      pickup_day: '4'
      name: Garbage
      calendar: calendar.garbage_collection
      holiday_entity: calendar.collection
      year: '{{ now().year + 1 }}'
    action: script.generate_collection_dates
  - data:
      frequency: '1'
      pickup_day: '1'
      name: Recycling
      calendar: calendar.recycle_collection
      holiday_entity: calendar.collection
      year: '{{ now().year + 1 }}'
    action: script.generate_collection_dates
  mode: single
- id: '1704594011311'
  alias: "\U0001F4C5 Grow Light On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.grow_light
    id: 'on'
    to: 'on'
  - platform: state
    entity_id:
    - schedule.grow_light
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - target:
          entity_id:
          - switch.grow_light
        data: {}
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data: {}
        target:
          entity_id:
          - switch.grow_light
        action: switch.turn_off
  mode: single
- id: '1699834374599'
  alias: "\U0001F4C5 Living Room Fan On/Off"
  description: ''
  triggers:
  - entity_id: schedule.living_room_fan
    id: 'on'
    to: 'on'
    trigger: state
  - entity_id: schedule.living_room_fan
    id: 'off'
    to: 'off'
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - data:
          percentage: 33
        target:
          entity_id: fan.living_room_ceiling
        action: fan.turn_on
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data: {}
        target:
          entity_id: fan.living_room_ceiling
        action: fan.turn_off
  mode: single
- id: '1699834405375'
  alias: "\U0001F4C5 Main Bedroom Fan On/Off"
  description: ''
  triggers:
  - entity_id: schedule.main_bedroom_fan
    id: 'on'
    to: 'on'
    trigger: state
  - entity_id: schedule.main_bedroom_fan
    id: 'off'
    to: 'off'
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      - condition: state
        entity_id: binary_sensor.bed_presence_f56148_bed_occupied_either
        state: 'off'
      sequence:
      - data:
          percentage: 33
        target:
          entity_id: fan.main_bedroom_ceiling
        action: fan.turn_on
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - binary_sensor.bed_presence_f56148_bed_occupied_either
          to: 'off'
          for:
            hours: 0
            minutes: 0
            seconds: 30
        continue_on_timeout: true
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
      - data:
          percentage: 33
        target:
          entity_id: fan.main_bedroom_ceiling
        action: fan.turn_on
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - action: fan.turn_off
        target:
          entity_id:
          - fan.main_bedroom_ceiling
        data: {}
        enabled: false
      - action: fan.turn_on
        metadata: {}
        data:
          percentage: 33
        target:
          entity_id: fan.main_bedroom_ceiling
  mode: single
- id: '1748056193923'
  alias: "\U0001F4C5 Update KidsChore UI Helpers"
  description: ''
  triggers:
  - trigger: homeassistant
    event: start
  - trigger: time_pattern
    minutes: /5
  actions:
  - action: input_datetime.set_datetime
    target:
      entity_id: input_datetime.kc_ui_set_date_helper
    data:
      datetime: '{{ (now().replace(hour=23, minute=0, second=0, microsecond=0) + timedelta(days=1)).isoformat()
        }}'
- id: '1665723372482'
  alias: "\U0001F4CB [Controller] Ikea Remote Main Bedroom"
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1524_e1810.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: event.ikea_remote_main_bedroom_action
      helper_last_controller_event: input_text.ikea_remote_main_bedroom_event
      helper_double_press_delay: 400
      button_center_double_press: true
      button_up_double_press: true
      button_down_double_press: true
      button_up_long_loop: false
      button_down_long_loop: false
      action_button_left_short:
      - action: fan.decrease_speed
        data:
          percentage_step: 33
        target:
          entity_id: fan.main_bedroom_ceiling
      action_button_right_short:
      - data:
          percentage_step: 33
        target:
          entity_id: fan.main_bedroom_ceiling
        action: fan.increase_speed
      action_button_up_short:
      - data:
          brightness_step_pct: 10
          transition: 1
        target:
          entity_id: light.main_bedroom_fan_light
        action: light.turn_on
      action_button_up_double:
      - data:
          brightness_pct: 100
          transition: 1
        target:
          entity_id: light.main_bedroom_fan_light
        action: light.turn_on
      action_button_down_short:
      - data:
          brightness_step_pct: -10
          transition: 1
        target:
          entity_id: light.main_bedroom_fan_light
        action: light.turn_on
      action_button_down_double:
      - data:
          brightness_pct: 2
          transition: 1
        target:
          entity_id: light.main_bedroom_fan_light
        action: light.turn_on
      action_button_center_short:
      - data:
          transition: 1
        target:
          entity_id: light.main_bedroom_main_lights
        action: light.toggle
      action_button_center_double:
      - data: {}
        target:
          entity_id: fan.main_bedroom_ceiling
        action: fan.toggle
- id: '1667780182339'
  alias: "\U0001F4CB [Inovelli] Amy Office Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      up_single: []
      up_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.amy_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.amy_office_lights_day_mode
          data: {}
      down_single: []
      down_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.amy_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.amy_office_lights_night_mode
          data: {}
      switch: event.amy_office_switch_action
- id: '1673311612826'
  alias: "\U0001F4CB [Inovelli] Emma Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.emma_bedroom_action
      config_single:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
      config_double:
      - action: select.select_next
        metadata: {}
        data:
          cycle: true
        target:
          entity_id: select.nebula_projector_emma_scene
      config_triple:
      - if:
        - condition: state
          entity_id: switch.nebula_projector_emma_main_switch
          state: 'on'
        then:
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.nebula_projector_emma_laser
- id: '1667779119970'
  alias: "\U0001F4CB [Inovelli] Ethan Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.ethan_bedroom_action
      config_single:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
      config_double:
      - action: select.select_next
        metadata: {}
        data:
          cycle: true
        target:
          entity_id: select.nebula_projector_ethan_scene
      config_triple:
      - if:
        - condition: state
          entity_id: switch.nebula_projector_ethan_main_switch
          state: 'on'
        then:
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.nebula_projector_ethan_laser
- id: '1738556679313'
  alias: "\U0001F4CB [Inovelli] Family Room Aux Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.family_room_aux_action
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.family_room_aux
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: light.toggle
          target:
            entity_id:
            - light.family_room_lamp
          data: {}
      up_triple:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.family_room_aux
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.family_room_play_mode
          metadata: {}
          data:
            activity: Computer
- id: '1667779287274'
  alias: "\U0001F4CB [Inovelli] Family Room Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.family_room_action
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.family_room
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: light.toggle
          target:
            entity_id:
            - light.family_room_lamp
          data: {}
      up_triple:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.family_room
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.family_room_play_mode
          metadata: {}
          data:
            activity: Computer
- id: '1667779442976'
  alias: "\U0001F4CB [Inovelli] Garage Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.garage_action
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.garage
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.garage_door_light
      config_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.garage
            color: Pink
            effect: Chase
            duration: 3 Seconds
        - data: {}
          target:
            entity_id: cover.garage_door
          action: cover.toggle
      - delay:
          seconds: 3
      - data:
          skip_condition: true
        target:
          entity_id:
          - automation.garage_light_switch_status
        action: automation.trigger
      config_triple:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.garage
            color: Blue
            effect: Chase
            duration: 3 Seconds
        - data: {}
          action: script.ascent_remote_start
      - delay:
          seconds: 3
      - data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
        action: automation.trigger
      config_quadruple:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.garage
            color: Cyan
            effect: Chase
            duration: 3 Seconds
        - data: {}
          action: script.kona_remote_start
      - delay:
          seconds: 3
      - data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
        action: automation.trigger
      down_triple:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.garage
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - target:
            entity_id: light.inside_lights
          data: {}
          action: light.turn_off
      - delay:
          seconds: 3
      - data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
        action: automation.trigger
- id: '1667779857021'
  alias: "\U0001F4CB [Inovelli] Joshua Office Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.joshua_office_switch_action
      up_single:
      - action: script.joshua_office_lights_on
        data: {}
      - action: adaptive_lighting.set_manual_control
        metadata: {}
        data:
          manual_control: true
          lights:
          - light.joshua_office
      up_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.joshua_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.joshua_office_lights_day_mode
          data: {}
        - action: adaptive_lighting.set_manual_control
          metadata: {}
          data:
            manual_control: true
            lights:
            - light.joshua_office
      down_single:
      - action: light.turn_off
        data: {}
        target:
          entity_id: light.joshua_office_lights
      down_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.joshua_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: script.joshua_office_lights_night_mode
          data: {}
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.joshua_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.joshua_office_workbench
      config_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.joshua_office_switch
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - action: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.joshua_office_shelf_led
- id: '1667779650555'
  alias: "\U0001F4CB [Inovelli] Living Room Fan Light Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.living_room_fan_light_action
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            color: Yellow
            effect: Chase
            duration: 3 Seconds
            target:
              entity_id: light.living_room_fan_light
        - data: {}
          target:
            entity_id:
            - light.living_room_floor_lamp
          action: light.toggle
      config_double:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            color: Yellow
            effect: Chase
            duration: 3 Seconds
            target:
              entity_id: light.living_room_fan_light
        - data: {}
          target:
            entity_id: light.living_room_lights
          action: light.turn_off
- id: '1667779709981'
  alias: "\U0001F4CB [Inovelli] Main Bedroom Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: event.main_bedroom_action
      config_single:
      - parallel:
        - action: script.inovelli_blue_led
          data:
            target:
              entity_id: light.main_bedroom
            color: Yellow
            effect: Chase
            duration: 3 Seconds
        - data: {}
          target:
            entity_id: light.main_bedroom_floor_lamp
          action: light.toggle
- id: '1739377887654'
  alias: "\U0001F4CB [Sensor Light] Basement Hallway"
  description: ''
  use_blueprint:
    path: Blackshome/sensor-light.yaml
    input:
      motion_trigger:
      - binary_sensor.basement_hallway_motion_occupancy
      light_switch:
        entity_id: light.basement_hallway
      include_night_lights: night_lights_enabled
      night_lights_conditions:
      - sun_enabled
      night_lights:
        entity_id: light.basement_hallway
      include_night_light_control:
      - use_brightness
      - use_transition
      include_light_control:
      - use_brightness
      night_light_transition_on: 1
      night_light_transition_off: 2
- id: '1756940133048'
  alias: "\U0001F4CD Itinerary Tracker Notification"
  description: ''
  use_blueprint:
    path: etiennec78/itinerary-tracker-notification.yaml
    input:
      persons:
      - person.amy
      - person.joshua
      notify_devices:
      - 5d251328aa63591bec98a091f08427b1
      - e4ca1450b85b5d46e8d6d867f7b4e8e6
      driving_sensors:
      - binary_sensor.pixel_10_amy_android_auto
      - binary_sensor.pixel_10_joshua_android_auto
      travel_time_sensors:
      - sensor.amy_travel_time
      - sensor.joshua_travel_time
      speaker_tts_service:
        entity_id: tts.home_assistant_cloud
      speaker_tts_devices:
      - media_player.living_room_speaker
      - media_player.family_room_speaker
      - media_player.office_speaker
      drive_start_tts: true
- id: '1665682398363'
  alias: "\U0001F4E6 Clear Packages Out for Delivery"
  description: Clears package delivery notification when packages are delivered
  triggers:
  - entity_id: sensor.mail_packages_in_transit
    to: '0'
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ (trigger.from_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in ['unknown', 'unavailable']\n  and not trigger.to_state.state
      in ['unknown', 'unavailable'] }}"
  actions:
  - data:
      send_to: parents
      notification_type: clear_notification
      tag: delivery-packages-pending
    action: script.notify_mobile
  mode: single
- id: '1741307009888'
  alias: "\U0001F4E6 Mail Delivered"
  description: Notifies when mail has been delivered
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.usps_mail_delivered
    to: 'on'
  conditions:
  - condition: template
    value_template: "{{ not trigger.from_state.state in ['unknown', 'unavailable']\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable'] }}"
  actions:
  - variables:
      title: Mail Delivery
      message: Mail is delivered
      icon: local/icons/mailbox-up.png
      icon_mdi: mdi:mailbox-up
      color: '#2096f3'
      group: Delivery
      tag: delivery-mail
      camera: camera.mail_usps_camera
      image: '{{ state_attr("sensor.hass_config", "internal_url") }}{{ state_attr("camera.mail_usps_camera",
        "entity_picture") }}'
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        camera: '{{ camera }}'
        url: lovelace/main
        group: '{{ group }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        camera: '{{ camera }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
        camera: '{{ camera }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        image: '{{ image }}'
        large_icon: '{{ icon_mdi }}'
        icon_color: '{{ color }}'
        duration: 15
      action: script.notify_tvoverlay
  mode: single
- id: '1665682414590'
  alias: "\U0001F4E6 Mail Today"
  description: Notifies when mail will be delivered today
  triggers:
  - trigger: state
    entity_id: sensor.mail_usps_mail
  conditions:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in ['unknown', 'unavailable']\n  and not trigger.to_state.state
      in ['unknown', 'unavailable'] }}"
  actions:
  - variables:
      title: Mail Today
      message: '{{ trigger.to_state.state }} {{ "item" if trigger.to_state.state ==
        "1" else "items" }} will be in the mailbox today.'
      icon: local/icons/mailbox.png
      icon_mdi: mdi:mail
      color: '#2096f3'
      group: Delivery
      tag: delivery-mail
      camera: camera.mail_usps_camera
      image: '{{ state_attr("sensor.hass_config", "internal_url") }}{{ state_attr("camera.mail_usps_camera",
        "entity_picture") }}'
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        camera: '{{ camera }}'
        url: lovelace/main
        group: '{{ group }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        camera: '{{ camera }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
        camera: '{{ camera }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        image: '{{ image }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
        duration: 15
      action: script.notify_tvoverlay
  mode: single
- id: '1665682445018'
  alias: "\U0001F4E6 Packages Delivered"
  description: Notifies when packages have been delivered
  triggers:
  - trigger: state
    entity_id: sensor.mail_packages_delivered
  conditions:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in ['unknown', 'unavailable']\n  and not trigger.to_state.state
      in ['unknown', 'unavailable'] }}"
  actions:
  - variables:
      title: Package Delivery
      message: '{{ trigger.to_state.state }} {{ "package is" if trigger.to_state.state
        == "1" else "packages are" }} delivered.'
      icon: local/icons/package-variant.png
      icon_mdi: mdi:package-variant
      color: '#795548'
      group: Delivery
      tag: delivery-packages-delivered
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  mode: single
- id: '1665682458887'
  alias: "\U0001F4E6 Packages Out for Delivery"
  description: Notifies when packages are out for delivery
  triggers:
  - trigger: state
    entity_id: sensor.mail_packages_in_transit
  conditions:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in [\"unknown\", \"unavailable\"]\n  and not trigger.to_state.state
      in [\"unknown\", \"unavailable\"] }}"
  actions:
  - variables:
      title: Package Delivery
      message: '{{ trigger.to_state.state }} {{ "package is" if trigger.to_state.state
        == "1" else "packages are" }} out for delivery.'
      icon: local/icons/package.png
      icon_mdi: mdi:package
      color: '#795548'
      group: Delivery
      tag: delivery-packages-pending
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  mode: single
- id: '1665685653869'
  alias: "\U0001F4E6 Update USPS Mail Camera"
  description: Updates the mail image camera when mail is updated
  trigger:
  - platform: state
    entity_id: sensor.mail_updated
  - platform: homeassistant
    event: start
  condition: []
  action:
  - data: {}
    action: mail_and_packages.update_image
  mode: single
- id: '1665686891355'
  alias: "\U0001F512 Door Lock Jammed"
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.front_door_lock_jammed
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.garage_entry_lock_jammed
    to: 'on'
  conditions: []
  actions:
  - variables:
      lock: '{{ trigger.to_state.attributes.friendly_name | replace('' jammed'', '''')
        }}'
      title: '{{ lock }} Issue'
      message: Check the {{ lock }}, something is wrong.
      icon: local/icons/lock-smart.png
      icon_mdi: mdi:lock-smart
      color: '#03a9f4'
      group: Security
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        car_ui: true
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
    - data:
        media_player:
        - media_player.living_room_speaker
        message: '{{ message }}'
      action: script.notify_speech
  mode: single
- id: '1665686913548'
  alias: "\U0001F512 Lock Doors when Away"
  description: ''
  triggers:
  - trigger: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 5
  conditions:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: lock.all_locks
    state: unlocked
  actions:
  - if:
    - condition: state
      entity_id: schedule.front_door_auto_lock
      state: 'off'
    - condition: state
      entity_id: lock.front_door
      state: unlocked
    - condition: state
      entity_id: binary_sensor.front_door_contact
      state: 'off'
    then:
    - metadata: {}
      data: {}
      target:
        entity_id: lock.front_door
      action: lock.lock
  - if:
    - condition: state
      entity_id: schedule.garage_entry_auto_lock
      state: 'off'
    - condition: state
      entity_id: lock.garage_entry
      state: unlocked
    - condition: state
      entity_id: binary_sensor.garage_entry_contact
      state: 'off'
    then:
    - metadata: {}
      data: {}
      target:
        entity_id: lock.garage_entry
      action: lock.lock
  - variables:
      title: Door Lock
      message: The doors have been locked since no one is home.
      icon: local/icons/lock-smart.png
      icon_mdi: mdi:lock
      color: '#03a9f4'
      group: Security
  - data:
      send_to: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: '{{ icon_mdi }}'
      color: '{{ color }}'
      icon: '{{ icon }}'
      group: '{{ group }}'
      car_ui: true
    action: script.notify_mobile
  mode: single
- id: '1665688920005'
  alias: "\U0001F514 Doorbell Object or Ring"
  description: Activity when an object is detected or rung at night
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.doorbell_visitor
    to: 'on'
  - platform: event
    event_type: custom_frigate_doorbell_object
    event_data:
      object: person
  condition:
  - condition: or
    conditions:
    - condition: time
      after: input_datetime.lights_front_night_dim
      before: 00:00:00
    - condition: sun
      before: sunrise
      before_offset: -01:00:00
  action:
  - data:
      brightness_pct: 80
    target:
      entity_id: light.outside_entry
    action: light.turn_on
  - delay:
      minutes: 5
  - data:
      transition: 180
      brightness_pct: 8
    target:
      entity_id: light.outside_entry
    action: light.turn_on
  mode: restart
- id: '1665688080710'
  alias: "\U0001F514 Doorbell Ring"
  description: Actions when the ring doorbell is pressed
  triggers:
  - entity_id:
    - binary_sensor.doorbell_visitor
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - variables:
      camera_name: doorbell
      camera: camera.{{ camera_name }}
      base_url: '{{ state_attr(''sensor.hass_config'', ''external_url'') }}'
      link_id: '{% from ''util.jinja'' import random_string %}{{ random_string(40)
        }}'
      volume: '{{ iif(is_state(''schedule.quiet_hours'', ''on''), 40, 90) }}'
      media_location: media-source://media_source/local/sounds/ds9_doorchime.mp3
      title: Doorbell
      message: Ring Ring!
      actions:
      - action: URI
        title: Snapshot
        uri: '{{ base_url }}{{ state_attr(camera, ''entity_picture'') }}'
      - action: URI
        title: Stream
        uri: '{{ base_url }}/webrtc/embed?url={{ link_id }}'
  - data:
      link_id: '{{ link_id }}'
      url: rtsp://127.0.0.1:8554/{{ camera_name }}
      open_limit: 0
      time_to_live: 600
    action: webrtc.create_link
  - parallel:
    - if:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      then:
      - repeat:
          for_each:
          - media_player.family_room_speaker
          - media_player.office_speaker
          sequence:
          - target:
              entity_id: script.media_play
            data:
              variables:
                media_player: '{{ repeat.item }}'
                media_location: '{{ media_location }}'
                volume: '{{ volume }}'
            action: script.turn_on
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:doorbell-video
        color: '#e91e63'
        icon: local/icons/doorbell-video.png
        camera: '{{ camera }}'
        url: lovelace/security#camera-doorbell
        group: Doorbell
        interruption_level: critical
        tag: doorbell-ring
        car_ui: true
        channel: Doorbell Ring
        importance: high
        actions: '{{ actions }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        tag: doorbell-ring
        camera: '{{ camera }}'
        duration: 20
        actions: '{{ actions }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        - cartago
        title: '{{ title }}'
        message: '{{ message }}'
        icon: local/icons/doorbell-video.png
        importance: critical
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        video: '{{ camera }}'
      action: script.notify_pipup
    - if:
      - condition: state
        entity_id: light.wled_joshua_office_desk
        state: 'on'
      then:
      - data:
          value: '180'
        target:
          entity_id: number.wled_joshua_office_desk_speed
        action: number.set_value
      - target:
          entity_id: light.wled_joshua_office_desk
        data:
          effect: Sunrise
        action: light.turn_on
      - delay:
          seconds: 5
      - target:
          entity_id: light.wled_joshua_office_desk
        data:
          effect: Solid
        action: light.turn_on
  mode: single
- id: '1693003933194'
  alias: "\U0001F514 Frigate Doorbell - Event Handler"
  description: Sends notifications when an object is detected on the Doorbell camera
  triggers:
  - event_type: custom_frigate_doorbell_object
    id: initial
    trigger: event
  - event_type: custom_frigate_doorbell_object_update
    id: update
    trigger: event
  conditions: []
  actions:
  - variables:
      id: '{{ trigger.event.data.id }}'
      camera_name: '{{ trigger.event.data.camera_name }}'
      title: '{{ trigger.event.data.title }}'
      message: '{{ trigger.event.data.message }}'
      object: '{{ trigger.event.data.object }}'
      label: '{{ trigger.event.data.label }}'
      loitering: '{{ trigger.event.data.loitering | default(false) }}'
      icon: '{{ trigger.event.data.icon }}'
      image: '{{ trigger.event.data.image }}'
      clip: '{{ trigger.event.data.clip }}'
      actions: '{{ trigger.event.data.actions }}'
  - parallel:
    - if:
      - condition: trigger
        id:
        - initial
      then:
      - data:
          media_player:
          - media_player.living_room_speaker
          - media_player.family_room_speaker
          - media_player.office_speaker
          message: A {{ label }} was detected at the front door.
        action: script.notify_speech
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon }}'
        color: '#e91e63'
        image: '{{ image }}?format=android'
        group: '{{ camera_name }} Notification{{ '' Loitering'' if loitering }}'
        tag: '{{ id }}{{ ''-loitering'' if loitering }}'
        car_ui: true
        interruption_level: critical
        sticky: true
        channel: Doorbell Motion
        importance: high
        url: lovelace/security#camera-doorbell
        actions: '{{ actions }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        image: '{{ image }}'
        duration: 10
        actions: '{{ actions }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        image: '{{ image }}?format=android'
        importance: critical
        actions:
        - Silence Doorbell
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        tag: '{{ id }}{{ ''-loitering'' if loitering }}'
        image: '{{ image }}'
      action: script.notify_tvoverlay
    - if:
      - condition: trigger
        id:
        - initial
      then:
      - if:
        - condition: state
          entity_id: light.wled_joshua_office_desk
          state: 'on'
        then:
        - data:
            value: '80'
          target:
            entity_id: number.wled_joshua_office_desk_speed
          action: number.set_value
        - target:
            entity_id: light.wled_joshua_office_desk
          data:
            effect: Phased
          action: light.turn_on
        - delay:
            seconds: 5
        - target:
            entity_id: light.wled_joshua_office_desk
          data:
            effect: Solid
          action: light.turn_on
  mode: parallel
- id: '1692245318569'
  alias: "\U0001F514 Frigate Doorbell - Object Seen"
  description: Sends a notification when an object is detected on a camera
  triggers:
  - topic: frigate/events
    id: frigate-event
    payload: Doorbell/new
    value_template: '{{ value_json[''after''][''camera''] }}/{{ value_json[''type'']
      }}'
    trigger: mqtt
  - event_type: mobile_app_notification_action
    event_data:
      action: silence-doorbell
    id: silence
    trigger: event
  - event_type: hass_agent_notifications
    event_data:
      action: silence-doorbell
    id: silence
    trigger: event
  - topic: lnxlink/+/monitor_controls/notify/button_press
    payload: Silence Doorbell
    value_template: '{{ value_json.button }}'
    trigger: mqtt
    id: silence
  actions:
  - variables:
      camera: doorbell
      camera_name: '{{ camera | title }}'
      base_url: '{{ state_attr(''sensor.hass_config'', ''external_url'') }}'
      attachment: snapshot.jpg
      alert_once: false
      update_thumbnail: false
      zones: []
      zone_all: false
      labels:
      - person
      - cat
      - dog
      disable_times: []
      cooldown: 30
      silence_timer: 30
      loitering: false
      loiter_timer: 0
      fps: '{{ states(''sensor.'' + camera + ''_camera_fps'') | int(5) }}'
      state_entities:
        binary_sensor.front_door_contact: 2
        binary_sensor.doorbell_visitor: 1
      states_filter:
      - 'off'
      debug: false
  - choose:
    - alias: Silence New Object Notifications
      conditions:
      - condition: trigger
        id: silence
      sequence:
      - parallel:
        - variables:
            title: Doorbell Motion Silenced
            message: Motion notifications have been silenced for {{ silence_timer
              }} minutes.
        - data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: mdi:doorbell-video
            color: '#e91e63'
            group: '{{ camera_name }} Notification'
            car_ui: true
            interruption_level: critical
            channel: Doorbell Motion
            importance: high
            url: lovelace/security#camera-doorbell
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            importance: critical
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ message }}'
            large_icon: local/icons/doorbell-video.png
            icon_color: '#e91e63'
          action: script.notify_tvoverlay
      - target:
          entity_id: '{{ this.entity_id }}'
        data:
          stop_actions: false
        action: automation.turn_off
      - delay:
          minutes: '{{ silence_timer }}'
      - target:
          entity_id: '{{ this.entity_id }}'
        action: automation.turn_on
        data: {}
    - alias: Frigate Event
      conditions:
      - condition: trigger
        id: frigate-event
      - condition: template
        value_template: '{{ is_state(this.entity_id, ''on'') }}'
      - condition: template
        value_template: '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds
          > cooldown }}'
      - condition: template
        value_template: '{{ not disable_times | length or not now().hour in disable_times
          | map(''int'') | list }}'
      sequence:
      - variables:
          event: '{{ trigger.payload_json }}'
          id: '{{ trigger.payload_json[''after''][''id''] }}'
          object: '{{ trigger.payload_json[''after''][''label''] }}'
          label: '{{ object | title }}'
          entered_zones: '{{ trigger.payload_json[''after''][''entered_zones''] |
            lower }}'
          zone_multi_filter: '{{ zones | length and zone_all and entered_zones | length
            and zones and zones | reject(''in'', entered_zones) | list | length ==
            0 }}'
          title: '{{ camera_name }} ({{ label }})'
          message: A {{ label }} {{ 'is loitering' if loitering else 'was detected'
            }} on the {{ camera_name }} camera{% if entered_zones %} in the {{ entered_zones
            | join(', ') | replace('_',' ') }}{% endif %}.
          clip: /api/frigate/notifications/{{ id }}/{{ camera }}/clip.mp4
          link_id: '{% from ''util.jinja'' import random_string %}{{ random_string(40)
            }}'
          stream: '{{ base_url }}/webrtc/embed?url={{ link_id }}'
          icon: mdi:{{ 'account-outline' if label == 'Person' else 'dog' if label
            == 'Dog' else 'cat' if label == 'Cat' else 'car' if label == 'Car' else
            'motorbike' if label == 'Motorcycle' else 'home-assistant' }}
          actions:
          - action: URI
            title: Snapshot
            uri: '{{ base_url }}/api/frigate/notifications/{{ id }}/snapshot.jpg'
          - action: URI
            title: Stream
            uri: '{{ stream }}'
          - action: silence-{{ camera }}
            title: Silence ({{ silence_timer }} min)
            destructive: true
      - data:
          link_id: '{{ link_id }}'
          url: rtsp://127.0.0.1:8554/{{ camera | lower }}
          open_limit: 0
          time_to_live: 600
        action: webrtc.create_link
      - alias: 'Debug: set notification'
        choose:
        - conditions:
          - condition: template
            value_template: '{{ debug }}'
          sequence:
          - data:
              title: Frigate Notification
              message: "Info:\n  - FPS: {{ fps }}\n  - Frigate event Id: {{ id }}\n
                \ - Object (Formatted): {{ object }} ({{ label }})\n\nConfig:\n  -
                Camera (Formatted): {{ camera }} ({{ camera_name }})\n  - Base URL:
                {{ base_url }}\n  - Alert once: {{ alert_once }}\n  - Update thumbnails:
                {{ update_thumbnail }}\n  - Clip: {{ clip }}\n  - Icon: {{ icon }}\n
                \ - Cooldown: {{ cooldown }}s\n  - Loiter timer: {{ loiter_timer }}s\n
                \ - Title: {{ title }}\n  - Message: {{ message }}\n  - Actions: {{
                actions | tojson }}\n\nFilters:\n  - Zones:\n    - Zone filter on:
                {{ zones | length }}\n    - Required zones: {{ zones | join(', ')
                }}\n    - All Zones on: {{ zone_all }}\n    - Entered Zones: {{ entered_zones
                }}\n    - Zone Filter TEST: {{ 'PASS (Multi)' if zone_multi_filter
                else 'PASS' if ( not zones | length or not zone_all and zones | select('in',
                entered_zones) | list | length ) else 'FAIL (Multi)' if zone_all else
                'FAIL' }}\n  - Required objects TEST:\n    - Labels: {{ labels | join(',
                ') }}\n    - TEST: {{ 'PASS' if not labels | length or object in labels
                else 'FAIL' }}\n  - Disabled times: {{ disable_times }}\n  - State
                Filter:\n    - State filter on: {{ iif(state_entities | list | count
                > 0, 'True', 'False') }}\n    - State filter entity: {{ state_entities
                | tojson }}\n    - Required states: {{ states_filter | join(', ')
                }}\n  {%- set state_filter = namespace(allow=[]) -%}\n  {%- for entity,
                time in state_entities.items() -%}\n    {%- set state =\n      states(entity)
                in states_filter\n      and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
                | int / 60 > time\n    -%}\n    {%- set state_filter.allow = state_filter.allow
                + [state] -%}\n  {%- endfor %}\n    - State Filter TEST: {{ iif(state_filter.allow
                | reject | first | default(true), 'PASS', 'FAIL') }}\n"
            action: persistent_notification.create
      - alias: Notifications enabled for object label
        condition: template
        value_template: '{{ not labels | length or object in labels }}'
      - alias: Notify on new object
        choose:
        - conditions:
          - condition: template
            value_template: '{{ not zones | length or (not zone_all and zones | select(''in'',
              entered_zones) | list | length > 0) or (zone_all and entered_zones |
              length > 0 and zones | reject(''in'', entered_zones) | list | length
              == 0) }}'
          - condition: template
            value_template: "{%- set state_filter = namespace(allow=[]) -%} {%- for
              entity, time in state_entities.items() -%}\n  {%- set state =\n    states(entity)
              in states_filter\n    and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
              | int / 60 > time\n  -%}\n  {%- set state_filter.allow = state_filter.allow
              + [state] -%}\n{%- endfor -%} {{ iif(state_filter.allow | reject | first
              | default(true), true, false) }}"
          sequence:
          - alias: Fire event for other automations and scripts
            event: custom_frigate_doorbell_object
            event_data:
              id: '{{ id }}'
              camera_name: '{{ camera_name }}'
              title: '{{ title }}'
              message: '{{ message }}'
              object: '{{ object }}'
              label: '{{ label }}'
              icon: '{{ icon }}'
              image: api/frigate/notifications/{{ id }}/{{ attachment }}
              clip: '{{ clip }}'
              actions: '{{ actions }}'
      - repeat:
          sequence:
          - wait_for_trigger:
            - topic: frigate/events
              payload: '{{ id }}'
              value_template: '{{ value_json[''after''][''id''] }}'
              trigger: mqtt
            timeout:
              minutes: 2
            continue_on_timeout: false
          - variables:
              event: '{{ wait.trigger.payload_json }}'
              loitering: '{{ loiter_timer and event[''before''][''motionless_count'']
                / fps / 60 < loiter_timer and event[''after''][''motionless_count'']
                / fps / 60 >= loiter_timer }}'
              new_snapshot: '{{ update_thumbnail and event[''before''][''snapshot''][''frame_time'']
                != event[''after''][''snapshot''][''frame_time''] }}'
              last_zones: '{{ event[''before''][''entered_zones''] | lower }}'
              entered_zones: '{{ event[''after''][''entered_zones''] | lower }}'
              zone_filter: '{{ not zones | length or zones | select(''in'', entered_zones)
                | list | length > 0 }}'
              zone_multi_filter: '{{ not zones | length or not zone_all or ( entered_zones
                | list | length > 0 and zones and zones | reject(''in'', entered_zones)
                | list | length == 0 ) }}'
              stationary_moved: '{{ event[''after''][''position_changes''] > event[''before''][''position_changes'']
                }}'
              zone_only_changed: '{{ zones | length and (entered_zones | length >
                0 and not last_zones | length) }}'
              entered_zones_changed: '{{ zones | length > 0 and (zones | select(''in'',
                entered_zones) | list | length > 0 and not zones | select(''in'',
                last_zones) | list | length) }}'
              state_true: "{%- set state_filter = namespace(allow=[]) -%} {%- for
                entity, time in state_entities.items() -%}\n  {%- set state =\n    states(entity)
                in states_filter\n    and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
                | int / 60 > time\n  -%}\n  {%- set state_filter.allow = state_filter.allow
                + [state] -%}\n{%- endfor -%} {{ iif(state_filter.allow | reject |
                first | default(true), true, false) }}"
              sub_label: "{% if event['after']['sub_label'] %}\n  {{ event['after']['sub_label'][0]
                }}\n{% else %}\n  {{ event['after']['sub_label'] }}\n{% endif %}\n"
              sub_label_before: "{% if event['before']['sub_label'] %}\n  {{ event['before']['sub_label'][0]
                }}\n{% else %}\n  {{ event['before']['sub_label'] }}\n{% endif %}\n"
              sub_label_changed: '{{ sub_label != sub_label_before }}'
              update: '{{ alert_once or (new_snapshot and not loitering and not zone_only_changed
                and not entered_zones_changed and not sub_label_changed) }}'
              title: "{% if sub_label %}\n  {{ title | replace('A Person', sub_label
                | title) | replace('Person', sub_label | title) }}\n{% else %}\n  {{
                title }}\n{% endif %}\n"
              message: "{% if sub_label %}\n  {{ message | replace('A Person', sub_label
                | title) | replace('Person', sub_label | title) }}\n{% else %}\n  {{
                message }}\n{% endif %}\n"
          - alias: Update thumbnail at end of event
            choose:
            - conditions:
              - condition: template
                value_template: '{{ wait.trigger.payload_json[''type''] == ''end''
                  }}'
              - condition: template
                value_template: '{{ (''snapshot'' in attachment and update_thumbnail)
                  or clip | length > 0 }}'
              sequence:
              - delay:
                  seconds: 5
              - variables:
                  new_snapshot: '{{ update_thumbnail }}'
          - alias: 'Debug: set notification'
            choose:
            - conditions:
              - condition: template
                value_template: '{{ debug }}'
              sequence:
              - data:
                  title: Frigate Notification Loop
                  message: "Info:\n  - Last zones: {{ last_zones }}\n  - Current zones:
                    {{ entered_zones }}\n  - Sublabel: {{ sub_label }}\n  - URL: api/frigate/notifications/{{
                    id }}/{{ camera + '/clip.mp4' if clip | length > 0 and wait.trigger.payload_json['type']
                    == 'end' else attachment }}\n  - Clip: \"{{ clip }}\"\n\nTriggers:\n
                    \ - New snapshot: {{ new_snapshot }}\n  - Stationary moved: {{
                    stationary_moved }}\n  - Entered zones changed: {{ entered_zones_changed
                    }}\n  - Sublabel changed: {{ sub_label_changed }}\n\nConditions:\n
                    \ - Loitering: {{ loitering }}\n  - Zone filter test: {{ 'ON'
                    if zones | length else 'OFF' }} - {{ 'PASS' if zone_filter else
                    'FAIL' }}\n  - Multi-zone filter: {{ 'OFF' if not zones | length
                    or not zone_all else 'ON' }} - {{ 'PASS' if not zones | length
                    or not zone_all or ( entered_zones | length and zones and zones
                    | reject('in', entered_zones) | list | length == 0 ) else 'FAIL'
                    }}\n  - Image: api/frigate/notifications/{{ id }}/{{ attachment
                    }}\n"
                action: persistent_notification.create
          - alias: Notify on loitering or significant change
            choose:
            - conditions:
              - condition: template
                value_template: '{{ loitering or (zone_filter and zone_multi_filter
                  and state_true and (new_snapshot or stationary_moved or zone_only_changed
                  or entered_zones_changed or sub_label_changed)) }}'
              sequence:
              - alias: Fire event for other automations and scripts
                event: custom_frigate_doorbell_object_update
                event_data:
                  id: '{{ id }}'
                  camera_name: '{{ camera_name }}'
                  title: '{{ title }}'
                  message: '{{ message }}'
                  loitering: '{{ loitering }}'
                  object: '{{ object }}'
                  label: '{{ label }}'
                  icon: '{{ icon }}'
                  image: api/frigate/notifications/{{ id }}/{{ attachment }}
                  clip: '{{ clip }}'
                  actions: '{{ actions }}'
          until:
          - condition: template
            value_template: '{{ not wait.trigger or wait.trigger.payload_json[''type'']
              == ''end'' }}'
  mode: parallel
- id: '1727824341800'
  alias: "\U0001F557 Main Bedroom Ceiling Fan Default Light Status"
  description: Adjusts the Main Bedroom ceiling fan light status based on the time
    of day.
  triggers:
  - trigger: state
    entity_id:
    - schedule.main_bedroom_fan
    to: 'on'
    id: bright
  - trigger: state
    entity_id:
    - schedule.main_bedroom_fan
    to: 'off'
    id: dim
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - bright
      - condition: state
        entity_id: binary_sensor.bed_presence_f56148_bed_occupied_either
        state: 'off'
      sequence:
      - action: script.inovelli_blue_led_set_defaults
        metadata: {}
        data:
          entity_id:
          - fan.main_bedroom_ceiling
          color_on: Green
    - conditions:
      - condition: trigger
        id:
        - bright
      sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - binary_sensor.bed_presence_f56148_bed_occupied_either
          to: 'off'
          for:
            hours: 0
            minutes: 2
            seconds: 0
        continue_on_timeout: true
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
      - action: script.inovelli_blue_led_set_defaults
        metadata: {}
        data:
          entity_id:
          - fan.main_bedroom_ceiling
          color_on: Green
    - conditions:
      - condition: trigger
        id:
        - dim
      sequence:
      - action: script.inovelli_blue_led_set_defaults
        metadata: {}
        data:
          entity_id:
          - fan.main_bedroom_ceiling
          color_on: Red
  mode: single
- id: '1665682307865'
  alias: "\U0001F5A5️ [Ardena] Power on Activity"
  description: Turns on/off Ardena when the Family Room Harmony activity is changed
  trigger:
  - platform: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    to: Computer
    id: power_on
  - platform: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    from: Computer
    to: PowerOff
    id: power_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - power_on
      sequence:
      - entity_id: switch.ardena
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id:
        - power_off
      - condition: state
        entity_id: binary_sensor.ardena_connected
        state: 'on'
      sequence:
      - data: {}
        target:
          entity_id: button.ardena_sleep
        action: button.press
  mode: restart
- id: '1745441734623'
  alias: "\U0001F5A5️ [Erebus] Microphone/Camera Active"
  description: Changes basement hallway light animation when microphone or webcam
    is in use
  triggers:
  - entity_id:
    - binary_sensor.erebus_microphone_used
    trigger: state
    to:
  - entity_id:
    - binary_sensor.erebus_camera_used
    to:
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: binary_sensor.erebus_microphone_used
          state: 'on'
        - condition: state
          entity_id: binary_sensor.erebus_camera_used
          state: 'on'
      sequence:
      - action: script.inovelli_blue_led
        metadata: {}
        data:
          led: All
          color: Red
          level: 100
          effect: Small to Big
          duration: 4 Hours
          target:
            entity_id: light.basement_hallway
      alias: When microphone or webcam are active
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.erebus_microphone_used
          state: 'on'
        - condition: state
          entity_id: binary_sensor.erebus_camera_used
          state: 'on'
      sequence:
      - action: script.inovelli_blue_led
        metadata: {}
        data:
          target:
            entity_id: light.basement_hallway
      alias: When microphone and webcam are inactive
  mode: restart
- id: '1665695979311'
  alias: "\U0001F5A5️ [Quest] Charge Complete"
  description: Sends notification when Quest is done charging
  triggers:
  - entity_id:
    - sensor.quest_battery_level
    above: 95
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: sensor.quest_battery_state
    state: charging
  - condition: state
    entity_id: sensor.quest_charger_type
    state: ac
  - condition: state
    entity_id: binary_sensor.quest_in_use
    state: 'off'
  actions:
  - variables:
      title: Quest is Charged
      message: The Quest is charged, you should unplug it
      icon: local/icons/battery-charging-high.png
      icon_mdi: mdi:battery-charging-high
      color: '#4caf50'
      tag: quest
      group: Quest
  - parallel:
    - data:
        send_to: joshua
        location: home
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1665696049425'
  alias: "\U0001F5A5️ [Quest] Interactive"
  description: Actions to take when the Quest is being used
  triggers:
  - entity_id: binary_sensor.quest_in_use
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.quest_in_use
        state: 'on'
      sequence:
      - parallel:
        - data:
            transition: 1
            brightness_pct: 100
          target:
            entity_id: light.family_room
          action: light.turn_on
    - conditions:
      - condition: state
        entity_id: binary_sensor.quest_in_use
        state: 'off'
      - or:
        - condition: sun
          after: sunset
          after_offset: -01:00:00
        - condition: sun
          before: sunrise
      sequence:
      - parallel:
        - data:
            transition: 1
            brightness_pct: 25
          target:
            entity_id: light.family_room
          action: light.turn_on
    default: []
  mode: single
- id: '1751496724109'
  alias: "\U0001F5A5️ [Work Josh] Microphone/Camera Active"
  description: Changes basement hallway light animation when microphone or webcam
    is in use
  triggers:
  - entity_id:
    - binary_sensor.workjosh_mic_active
    trigger: state
    to:
  - entity_id:
    - binary_sensor.workjosh_webcam_active
    to:
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: binary_sensor.workjosh_mic_active
          state: 'on'
        - condition: state
          entity_id: binary_sensor.workjosh_webcam_active
          state: 'on'
      sequence:
      - parallel:
        - action: script.inovelli_blue_led
          metadata: {}
          data:
            led: All
            color: Red
            level: 100
            effect: Small to Big
            duration: 4 Hours
            target:
              entity_id: light.basement_hallway
        - action: media_player.media_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.erebus
        - action: switch.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: switch.erebus_bash_mute
        - action: notify.mobile_app_pixel_10_joshua
          data:
            message: command_dnd
            data:
              command: priority_only
      alias: When microphone or webcam are active
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.workjosh_mic_active
          state: 'on'
        - condition: state
          entity_id: binary_sensor.workjosh_webcam_active
          state: 'on'
      sequence:
      - parallel:
        - action: script.inovelli_blue_led
          metadata: {}
          data:
            target:
              entity_id: light.basement_hallway
        - action: switch.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: switch.erebus_bash_mute
        - action: notify.mobile_app_pixel_10_joshua
          data:
            message: command_dnd
            data:
              command: 'off'
      alias: When microphone and webcam are inactive
  mode: restart
- id: '1665695892233'
  alias: "\U0001F5A8️ Low Toner"
  description: Sends a notification when the printer toner is low
  triggers:
  - entity_id: sensor.canon_mf743c_black_toner
    below: 7
    trigger: numeric_state
  - entity_id: sensor.canon_mf743c_cyan_toner
    below: 7
    trigger: numeric_state
  - entity_id: sensor.canon_mf743c_magenta_toner
    below: 7
    trigger: numeric_state
  - entity_id: sensor.canon_mf743c_yellow_toner
    below: 7
    trigger: numeric_state
  conditions:
  - condition: template
    value_template: '{{ not trigger.to_state.state in [''unknown'', ''unavailable'']
      }}'
  actions:
  - variables:
      title: Printer Alert
      message: The {{ trigger.to_state.attributes.friendly_name }} is low
      icon: local/icons/printer-alert.png
      icon_mdi: mdi:printer-alert
      color: '#ff5722'
      tag: printer-toner-low
      group: System
      url: dashboard-system/overview
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1665695909455'
  alias: "\U0001F5A8️ Out of Paper"
  description: Sends a notification when the printer runs out of paper
  triggers:
  - entity_id: sensor.canon_mf743c_paper_tray
    to: empty
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ not trigger.to_state.state in [''unknown'', ''unavailable'']
      }}'
  actions:
  - variables:
      title: Printer Alert
      message: The {{ trigger.to_state.attributes.friendly_name }} is out of paper
      icon: local/icons/printer-alert.png
      icon_mdi: mdi:printer-alert
      color: '#ff5722'
      tag: printer-paper-low
      group: System
      url: dashboard-system/overview
  - parallel:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: '{{ tag }}'
      action: persistent_notification.create
    - data:
        send_to: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        tag: '{{ tag }}'
        url: '{{ url }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
  mode: single
- id: '1679340622496'
  alias: "\U0001F5FA️ Arriving Home"
  description: Sends a notification when someone is arriving home.
  trigger:
  - platform: state
    entity_id:
    - person.joshua
    - person.amy
    to: home
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.state == "not_home" }}'
  - condition: template
    value_template: '{{ trigger.to_state.attributes.gps_accuracy | int < 30 }}'
  - condition: time
    after: 08:00:00
    before: '22:00:00'
  action:
  - variables:
      name: '{{ trigger.to_state.attributes.friendly_name }}'
      message: '{%- from "message.jinja" import welcome_home -%} {%- set person =
        {"Amy": "Mom", "Joshua": "Dad"}[name] -%} {{ welcome_home(person) }}'
  - parallel:
    - data:
        send_to: parents
        title: '{{ name }} is Home'
        message: '{{ message }}'
        notification_icon: mdi:map-marker-account
        color: '#ff5722'
        icon: local/icons/map-marker-account.png
        group: Presence
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ name }} is Home'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ name }} is Home'
        message: '{{ message }}'
        icon: local/icons/map-marker-account.png
      action: script.notify_lnxlink
    - data:
        media_player:
        - media_player.living_room_speaker
        - media_player.family_room_speaker
        - media_player.office_speaker
        message: '{{ message }}'
      action: script.notify_speech
  - delay:
      minutes: 5
  mode: single
  max_exceeded: silent
- id: '1677559331389'
  alias: "\U0001F5FA️ Leaving Zone"
  description: Sends a notification when someone is leaving a zone.
  triggers:
  - trigger: state
    entity_id:
    - person.joshua
    - person.amy
    to: not_home
    for:
      minutes: 1
  conditions:
  - condition: template
    value_template: "{{\n  not trigger.from_state.state in [\"home\", \"not_home\",
      trigger.to_state.state]\n  and trigger.to_state.state != \"home\"\n}}"
  - condition: time
    after: 08:00:00
    before: '22:00:00'
  actions:
  - variables:
      zone_name: '{{ trigger.from_state.state }}'
      name: '{{ trigger.to_state.attributes.friendly_name }}'
      person: '{{ {''Amy'': ''Mom'', ''Joshua'': ''Dad''}[name] }}'
      title: '{{ name }} Leaving {{ zone_name }}'
      message: '{%- from "message.jinja" import leaving_zone -%} {{ leaving_zone(person,
        zone_name) }}'
      icon: local/icons/map-marker-account.png
      icon_mdi: mdi:map-marker-account
      color: '#ff5722'
      group: Presence
  - parallel:
    - data:
        send_to: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        media_player:
        - media_player.living_room_speaker
        - media_player.family_room_speaker
        - media_player.office_speaker
        message: '{{ message }}'
      action: script.notify_speech
  mode: single
- id: '1725260717620'
  alias: "\U0001F6A6 Amy Office Light Switch Status"
  description: Set Amy Office light switch LED light status
  trigger:
  - platform: state
    id: 'on'
    entity_id:
    - light.amy_office
    from: 'off'
    to: 'on'
  - platform: state
    id: 'off'
    entity_id:
    - light.amy_office
    from: 'on'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data:
          color: Red
          effect: Solid
          level: 1
          target:
            entity_id: light.amy_office_switch
        action: script.inovelli_blue_led
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - data:
          color: Green
          effect: Solid
          level: 40
          target:
            entity_id: light.amy_office_switch
        action: script.inovelli_blue_led
  mode: restart
- id: '1710965030799'
  alias: "\U0001F6A6 Emma Light Switch Status"
  description: Set Emma light switch LED on state changed
  trigger:
  - platform: state
    entity_id:
    - switch.nebula_projector_emma_main_switch
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_emma_main_switch
        state: 'off'
      sequence:
      - data:
          target:
            entity_id: light.emma_bedroom
          led: Led 1
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_emma_main_switch
        state: 'on'
      sequence:
      - data:
          level: 40
          target:
            entity_id: light.emma_bedroom
          led: Led 1
          effect: Pulse
          color: Red
        action: script.inovelli_blue_led
  mode: restart
- id: '1710964633068'
  alias: "\U0001F6A6 Ethan Light Switch Status"
  description: Set Ethan light switch LED on state changed
  trigger:
  - platform: state
    entity_id:
    - switch.nebula_projector_ethan_main_switch
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_ethan_main_switch
        state: 'off'
      sequence:
      - data:
          target:
            entity_id: light.ethan_bedroom
          led: Led 1
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_ethan_main_switch
        state: 'on'
      sequence:
      - data:
          level: 40
          target:
            entity_id: light.ethan_bedroom
          led: Led 1
          effect: Pulse
          color: Red
        action: script.inovelli_blue_led
  mode: restart
- id: '1722871416531'
  alias: "\U0001F6A6 Garage Entry Light Switch Status"
  description: Set garage entry light switch LED when garage entry lock state has
    changed
  trigger:
  - platform: state
    entity_id:
    - lock.garage_entry
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''locked'' }}'
      sequence:
      - data:
          target:
            entity_id: light.outside_garage_switch
        action: script.inovelli_blue_led
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''unlocked'' }}'
      sequence:
      - data:
          color: Red
          effect: Open/Close
          level: 40
          target:
            entity_id: light.outside_garage_switch
        action: script.inovelli_blue_led
  mode: restart
- id: '1665688313389'
  alias: "\U0001F6A6 Garage Light Switch Status"
  description: Set Garage light switch LED when Garage Door and light status
  triggers:
  - entity_id:
    - cover.garage_door
    - light.garage
    - timer.ascent_remote_start
    - timer.kona_remote_start
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: timer.ascent_remote_start
        state: active
      sequence:
      - data:
          color: Blue
          effect: Fast Siren
          level: 60
          target:
            entity_id: light.garage
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: timer.kona_remote_start
        state: active
      sequence:
      - data:
          color: Cyan
          effect: Fast Siren
          level: 60
          target:
            entity_id: light.garage
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: opening
      sequence:
      - data:
          color: Yellow
          effect: Fast Rising
          level: 40
          target:
            entity_id: light.garage
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: closing
      sequence:
      - data:
          color: Yellow
          effect: Fast Falling
          level: 40
          target:
            entity_id: light.garage
        action: script.inovelli_blue_led
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: open
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: light.garage
            state: 'on'
          sequence:
          - data:
              color: Pink
              effect: Medium Rising
              level: 40
              target:
                entity_id: light.garage
            action: script.inovelli_blue_led
        - conditions:
          - condition: state
            entity_id: light.garage
            state: 'off'
          sequence:
          - data:
              color: Red
              effect: Medium Rising
              level: 40
              target:
                entity_id: light.garage
            action: script.inovelli_blue_led
    default:
    - data:
        target:
          entity_id: light.garage
      action: script.inovelli_blue_led
  mode: restart
- id: '1665688406559'
  alias: "\U0001F6A6 Joshua Office Light Switch Status"
  description: Set Joshua Office light switch LED light status
  trigger:
  - platform: state
    id: 'on'
    entity_id:
    - light.joshua_office
    from: 'off'
    to: 'on'
  - platform: state
    id: 'off'
    entity_id:
    - light.joshua_office
    from: 'on'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - data:
          color: Red
          effect: Solid
          level: 1
          target:
            entity_id: light.joshua_office_switch
        action: script.inovelli_blue_led
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - data:
          color: Green
          effect: Solid
          level: 40
          target:
            entity_id: light.joshua_office_switch
        action: script.inovelli_blue_led
  mode: restart
- id: front_door_lock_state_change
  alias: "\U0001F6A6 Outside Entry Light Switch Status"
  description: Set Outside Entry light switch LED when Front Door lock state has changed
  trigger:
  - platform: state
    entity_id:
    - lock.front_door
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''locked'' }}'
      sequence:
      - data:
          target:
            entity_id: light.outside_entry_switch
        action: script.inovelli_blue_led
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''unlocked'' }}'
      sequence:
      - data:
          color: Red
          effect: Open/Close
          level: 40
          target:
            entity_id: light.outside_entry_switch
        action: script.inovelli_blue_led
  mode: restart
- id: '1755697837330'
  alias: "\U0001F916 Robot Vacuum Error"
  description: Sends notification when a robot vacuum is stuck
  triggers:
  - entity_id:
    - vacuum.r2dee2
    - vacuum.dustin_mopman
    to: error
    trigger: state
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - variables:
      title: Vacuum Stuck
      message: '{{ trigger.to_state.attributes.friendly_name }} needs help!'
      icon: local/icons/robot-vacuum.png
      color: '#4caf50'
      tag: '{{ trigger.entity_id.split(''.'')[1] }}-vacuum-error'
      icon_mdi: mdi:robot-vacuum
  - repeat:
      sequence:
      - parallel:
        - action: script.notify_mobile
          data:
            send_to: parents
            title: '{{ title }}'
            message: '{{ message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            tag: '{{ tag }}'
        - action: script.notify_speech
          data:
            media_player:
            - media_player.living_room_speaker
            - media_player.family_room_speaker
            - media_player.office_speaker
            message: '{{ message }}'
        - action: script.notify_lnxlink
          data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ message }}'
            icon: '{{ icon }}'
        - action: script.notify_hass_agent
          data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ message }}'
      - delay:
          hours: 0
          minutes: 30
          seconds: 0
          milliseconds: 0
      until:
      - condition: template
        value_template: '{{ not is_state(trigger.entity_id, ''error'') }}'
  mode: single
- id: '1665686040957'
  alias: "\U0001F9FA Dryer Notifications"
  description: Actions when the dryer is running and is done, with door monitoring
    and reminders
  triggers:
  - trigger: numeric_state
    entity_id: sensor.emporiavue_main_dryer_power
    above: 100
    for:
      minutes: 1
  conditions: []
  actions:
  - variables:
      title: Dryer
      icon: local/icons/tumble-dryer.png
      icon_mdi: mdi:tumble-dryer
      color: '#ff9800'
      tag: laundry-dryer
      group: Laundry
      end_reminder_notification_max_count: 3
  - alias: Set start time and start power tracking
    variables:
      start_time: '{{ now().timestamp() }}'
      start_power_consumption: '{{ states(''sensor.emporiavue_main_dryer_daily'')
        | float }}'
  - action: input_select.select_option
    target:
      entity_id: input_select.dryer_status
    data:
      option: Drying
  - wait_for_trigger:
    - trigger: numeric_state
      entity_id: sensor.emporiavue_main_dryer_power
      below: 100
      for:
        seconds: 30
    alias: Wait until appliance has finished
  - action: input_select.select_option
    target:
      entity_id: input_select.dryer_status
    data:
      option: Finished
  - alias: Set message and stop power tracking
    variables:
      summary: The dryer is done!
      message: '{% set message = namespace(text='''') %} {% set message.text = message.text
        + summary %} {# power_tracking_cost #} {% set kwh = (states(''sensor.emporiavue_main_dryer_daily'')
        | float - start_power_consumption | float) %} {% set cost = kwh * (states(''sensor.tariff_price'')
        | float) %} {% set message.text = message.text + ''\n'' + ''Consumption: ''
        + (kwh | round(2) | string) + '' kWh'' %} {% set message.text = message.text
        + ''\n'' + ''Approx Cost: '' + (cost | round(2) | string) %} {# duration_tracking
        #} {% set end_time = now().timestamp() %} {% set duration = (end_time - start_time)
        | int %} {% set hours = (duration // 3600) %} {% set minutes = ((duration
        % 3600) // 60) %} {% set seconds = (duration % 60) %} {% set message.text
        = message.text + ''\n'' + ''Duration: '' + ''%02d:%02d:%02d'' | format(hours,
        minutes, seconds) %} {# end duration_tracking #} {{ message.text }}'
  - alias: Parallel actions for end notification
    parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        subtitle: '{{ summary }} ⤵️'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ summary }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  - wait_for_trigger:
    - trigger: state
      entity_id: binary_sensor.dryer_contact
      to: 'on'
    timeout:
      minutes: 10
  - repeat:
      while:
      - condition: template
        value_template: '{{ (is_state(''binary_sensor.dryer_contact'', ''off'')) and
          (repeat.index <= end_reminder_notification_max_count) }}'
      sequence:
      - variables:
          reminder_message: Hey! Your fresh laundry has been waiting for {{ states.input_select.dryer_status.last_changed
            | relative_time }}, don't leave it hanging!
      - alias: Parallel actions for reminder notification
        parallel:
        - data:
            send_to: parents
            location: home
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            group: '{{ group }}'
            interruption_level: critical
            tag: '{{ tag }}'
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ reminder_message }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            icon: '{{ icon }}'
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
      - choose:
        - alias: Check reminder notification entity is OFF and max count is less before
            waiting
          conditions:
          - condition: template
            value_template: '{{ (is_state(''binary_sensor.dryer_contact'', ''off''))
              and (repeat.index <= end_reminder_notification_max_count - 1) }}'
          sequence:
          - wait_for_trigger:
            - trigger: state
              entity_id: binary_sensor.dryer_contact
              to: 'on'
            timeout:
              minutes: 10
  - choose:
    - alias: Perform the run status action
      conditions:
      - condition: state
        entity_id: binary_sensor.dryer_contact
        state: 'off'
      sequence:
      - action: input_select.select_option
        target:
          entity_id: input_select.dryer_status
        data:
          option: Waiting
  - choose:
    - alias: Entity is ON, check run status options
      conditions:
      - condition: state
        entity_id: binary_sensor.dryer_contact
        state: 'on'
      sequence:
      - action: input_select.select_option
        target:
          entity_id: input_select.dryer_status
        data:
          option: Ready
    - alias: Entity is OFF, wait for it to turn ON
      conditions:
      - condition: state
        entity_id: binary_sensor.dryer_contact
        state: 'off'
      sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id: binary_sensor.dryer_contact
          to: 'on'
      - action: input_select.select_option
        target:
          entity_id: input_select.dryer_status
        data:
          option: Ready
  - variables:
      attended_message: Fresh laundry on the move, let the folding begin!
  - alias: Parallel actions for end notification
    parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ attended_message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ attended_message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ attended_message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ attended_message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  mode: single
  max_exceeded: silent
- id: '1665686051361'
  alias: "\U0001F9FA Washer Notifications"
  description: Actions when the washer is running and is done, with door monitoring
    and reminders
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.emporiavue_main_washer_power
    above: 40
    for:
      minutes: 1
  conditions: []
  actions:
  - variables:
      title: Washer
      icon: local/icons/washing-machine.png
      icon_mdi: mdi:washing-machine
      color: '#ff9800'
      tag: laundry-washer
      group: Laundry
      end_reminder_notification_max_count: 3
  - alias: Set start time and start power tracking
    variables:
      start_time: '{{ now().timestamp() }}'
      start_power_consumption: '{{ states(''sensor.emporiavue_main_washer_daily'')
        | float }}'
  - action: input_select.select_option
    target:
      entity_id: input_select.washer_status
    data:
      option: Washing
  - wait_for_trigger:
    - trigger: numeric_state
      entity_id: sensor.emporiavue_main_washer_power
      below: 40
      for:
        seconds: 30
    alias: Wait until appliance has finished
  - action: input_select.select_option
    target:
      entity_id: input_select.washer_status
    data:
      option: Finished
  - alias: Set message and stop power tracking
    variables:
      summary: The washer is done!
      message: '{% set message = namespace(text='''') %} {% set message.text = message.text
        + summary %} {# power_tracking_cost #} {% set kwh = (states(''sensor.emporiavue_main_washer_daily'')
        | float - start_power_consumption | float) %} {% set cost = kwh * (states(''sensor.tariff_price'')
        | float) %} {% set message.text = message.text + ''\n'' + ''Consumption: ''
        + (kwh | round(2) | string) + '' kWh'' %} {% set message.text = message.text
        + ''\n'' + ''Approx Cost: '' + (cost | round(2) | string) %} {# duration_tracking
        #} {% set end_time = now().timestamp() %} {% set duration = (end_time - start_time)
        | int %} {% set hours = (duration // 3600) %} {% set minutes = ((duration
        % 3600) // 60) %} {% set seconds = (duration % 60) %} {% set message.text
        = message.text + ''\n'' + ''Duration: '' + ''%02d:%02d:%02d'' | format(hours,
        minutes, seconds) %} {# end duration_tracking #} {{ message.text }}'
  - alias: Parallel actions for end notification
    parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        subtitle: '{{ summary }} ⤵️'
        message: '{{ message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ summary }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  - wait_for_trigger:
    - trigger: state
      entity_id: binary_sensor.washer_contact
      to: 'on'
    timeout:
      minutes: 10
  - repeat:
      while:
      - condition: template
        value_template: '{{ (is_state(''binary_sensor.washer_contact'', ''off''))
          and (repeat.index <= end_reminder_notification_max_count) }}'
      sequence:
      - variables:
          reminder_message: Hey! Your fresh laundry has been waiting for {{ states.input_select.washer_status.last_changed
            | relative_time }}, don't leave it hanging!
      - alias: Parallel actions for reminder notification
        parallel:
        - data:
            send_to: parents
            location: home
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            notification_icon: '{{ icon_mdi }}'
            color: '{{ color }}'
            icon: '{{ icon }}'
            group: '{{ group }}'
            interruption_level: critical
            tag: '{{ tag }}'
          action: script.notify_mobile
        - data:
            entity:
            - media_player.nasya
            title: '{{ title }}'
            message: '{{ reminder_message }}'
          action: script.notify_hass_agent
        - data:
            computer:
            - erebus
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            icon: '{{ icon }}'
          action: script.notify_lnxlink
        - data:
            entity:
            - media_player.living_room_googletv
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ title }}'
            message: '{{ reminder_message }}'
            tag: '{{ tag }}'
            large_icon: '{{ icon }}'
            icon_color: '{{ color }}'
          action: script.notify_tvoverlay
      - choose:
        - alias: Check reminder notification entity is OFF and max count is less before
            waiting
          conditions:
          - condition: template
            value_template: '{{ (is_state(''binary_sensor.washer_contact'', ''off''))
              and (repeat.index <= end_reminder_notification_max_count - 1) }}'
          sequence:
          - wait_for_trigger:
            - trigger: state
              entity_id: binary_sensor.washer_contact
              to: 'on'
            timeout:
              minutes: 10
  - choose:
    - alias: Perform the run status action
      conditions:
      - condition: state
        entity_id: binary_sensor.washer_contact
        state: 'off'
      sequence:
      - action: input_select.select_option
        target:
          entity_id: input_select.washer_status
        data:
          option: Waiting
  - choose:
    - alias: Entity is ON, check run status options
      conditions:
      - condition: state
        entity_id: binary_sensor.washer_contact
        state: 'on'
      sequence:
      - action: input_select.select_option
        target:
          entity_id: input_select.washer_status
        data:
          option: Ready
    - alias: Entity is OFF, wait for it to turn ON
      conditions:
      - condition: state
        entity_id: binary_sensor.washer_contact
        state: 'off'
      sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id: binary_sensor.washer_contact
          to: 'on'
      - action: input_select.select_option
        target:
          entity_id: input_select.washer_status
        data:
          option: Ready
  - variables:
      attended_message: Fresh laundry on the move, let the drying begin!
  - alias: Parallel actions for end notification
    parallel:
    - data:
        send_to: parents
        location: home
        title: '{{ title }}'
        message: '{{ attended_message }}'
        notification_icon: '{{ icon_mdi }}'
        color: '{{ color }}'
        icon: '{{ icon }}'
        group: '{{ group }}'
        interruption_level: critical
        tag: '{{ tag }}'
      action: script.notify_mobile
    - data:
        entity:
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ attended_message }}'
      action: script.notify_hass_agent
    - data:
        computer:
        - erebus
        title: '{{ title }}'
        message: '{{ attended_message }}'
        icon: '{{ icon }}'
      action: script.notify_lnxlink
    - data:
        entity:
        - media_player.living_room_googletv
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ attended_message }}'
        tag: '{{ tag }}'
        large_icon: '{{ icon }}'
        icon_color: '{{ color }}'
      action: script.notify_tvoverlay
  mode: single
  max_exceeded: silent
