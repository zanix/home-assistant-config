- id: '1665680853122'
  alias: ☑️ Close Garage Door
  description: Closes the garage door when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: close_garage_door
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: close_garage_door
  condition: []
  action:
  - service: cover.close_cover
    target:
      entity_id: cover.garage_door
    data: {}
  - service: script.notify_mobile
    data:
      who: parents
      title: Garage Door Closed
      message: The Garage Door was closed
      notification_icon: mdi:garage-variant
      color: '#ff9800'
      icon_url: local/icons/garage.png
      group: Security
      tag: garage-door
      url: lovelace/security
  mode: single
- id: '1665681396617'
  alias: ☑️ Garbage Collection
  description: Confirm collection can is on the curb
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: garbage_collection
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: recycle_collection
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: garbage_collection
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: recycle_collection
  condition: []
  action:
  - variables:
      tag: '{{ trigger.event.data.tag }}'
      type: '{{ iif(tag == ''recycle_collection'', ''Recycling'', ''Garbage'') }}'
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.{{ tag }}
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ type }} Collection'
        message: The {{ type }} can is at the curb
        notification_icon: '{{ trigger.event.data.notification_icon }}'
        color: '{{ trigger.event.data.color }}'
        icon_url: '{{ trigger.event.data.icon_url }}'
        group: '{{ trigger.event.data.group }}'
        tag: '{{ tag }}'
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ type }} Collection'
        message: The {{ type }} can is at the curb
  mode: single
- id: '1665681528781'
  alias: ☑️ Ignore Door Alerts
  description: Ignore door open alerts when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: ignore_door_alerts
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: ignore_door_alerts
  condition: []
  action:
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.door_open_alerts
    data: {}
  - if:
    - condition: template
      value_template: '{{ trigger.event.data.tag != "" }}'
    then:
    - service: script.notify_mobile
      data:
        who: parents
        message: clear_notification
        tag: '{{ trigger.event.data.tag }}'
  - service: script.notify_mobile
    data:
      who: parents
      title: Door Alerts Ignored
      message: The Door Open alerts have been ignored until all doors are closed
      icon_url: local/icons/door-open.png
      group: Security
      tag: door-alerts-ignored
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      - media_player.nasya
      title: Door Alerts Ignored
      message: The Door Open alerts have been ignored until all doors are closed
  mode: single
- id: '1665681539044'
  alias: ☑️ Ignore Garage Door Alerts
  description: Ignore garage door open alerts when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: ignore_garage_door_alerts
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: ignore_garage_door_alerts
  condition: []
  action:
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.garage_door_open_alerts
    data: {}
  - service: script.notify_mobile
    data:
      who: parents
      message: clear_notification
      tag: garage-door
  - service: script.notify_mobile
    data:
      who: parents
      title: Garage Door Alerts Ignored
      message: The Garage Door Open alerts have been ignored until the Garage Door
        is closed
      icon_url: local/icons/garage-open.png
      group: Security
      tag: garage-door-alerts-ignored
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      - media_player.nasya
      title: Garage Door Alerts Ignored
      message: The Garage Door Open alerts have been ignored until the Garage Door
        is closed
  mode: single
- id: '1665683799664'
  alias: ☑️ Ignore Window Alerts
  description: Ignore window open alerts when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: ignore_window_alerts
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: ignore_window_alerts
  action:
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.window_open_alerts
    data: {}
  - if:
    - condition: template
      value_template: '{{ trigger.event.data.tag != "" }}'
    then:
    - service: script.notify_mobile
      data:
        who: parents
        message: clear_notification
        tag: '{{ trigger.event.data.tag }}'
  - service: script.notify_mobile
    data:
      who: parents
      title: Window Alerts Ignored
      message: The Window Open alerts have been ignored until all windows are closed
      notification_icon: mdi:window-open
      color: '#9c27b0'
      icon_url: local/icons/window-open.png
      group: Security
      tag: window-alerts-ignored
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      - media_player.nasya
      title: Window Alerts Ignored
      message: The Window Open alerts have been ignored until all windows are closed
- id: '1665681550417'
  alias: ☑️ Retry Remote Start Subaru
  description: Starts the Subaru (usually after a failure) when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: remote_start_again
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: remote_start_again
  condition: []
  action:
  - parallel:
    - service: button.press
      target:
        entity_id: button.ascent_remote_start
      data: {}
    - service: script.notify_mobile
      data:
        who: parents
        message: clear_notification
        tag: subaru
    - service: persistent_notification.dismiss
      data:
        notification_id: subaru
  mode: single
- id: '1665681684041'
  alias: ☑️ Turn on Water Main
  description: Turns on the water main when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: turn_on_water
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: turn_on_water
  condition: []
  action:
  - variables:
      title: Water Main
      message: The water main has been turned back on after the leak was detected.
  - parallel:
    - service: valve.open_valve
      target:
        entity_id: valve.water_main_valve
      data: {}
    - service: script.notify_mobile
      data:
        who: parents
        message: clear_notification
        tag: water-leak
    - service: persistent_notification.dismiss
      data:
        notification_id: water-leak
  - wait_for_trigger:
    - platform: state
      entity_id:
      - valve.water_main_valve
      to: open
    timeout: 00:00:30
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:water-alert
        color: '#009688'
        icon_url: local/icons/water-alert.png
        group: Water Leak
        priority: high
        tag: water-leak-main-on
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        icon_url: local/icons/water-alert.png
  mode: single
- id: '1665682232855'
  alias: "\U0001F5A5️ [Ardena] Power Actions"
  description: Actions to run when Ardena is on/off
  trigger:
  - platform: state
    entity_id: binary_sensor.ardena_connected
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.ardena_connected
        state: 'on'
      sequence:
      - service: fan.turn_on
        entity_id: fan.computer
    - conditions:
      - condition: state
        entity_id: binary_sensor.ardena_connected
        state: 'off'
      sequence:
      - service: fan.turn_off
        entity_id: fan.computer
  mode: single
- id: '1665682307865'
  alias: "\U0001F5A5️ [Ardena] Power on Activity"
  description: Turns on Ardena when the Family Room Harmony activity is set to Computer
  trigger:
  - platform: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    to: Computer
  condition: []
  action:
  - service: switch.turn_on
    entity_id: switch.ardena
  mode: restart
- id: '1665682318040'
  alias: "\U0001F5A5️ [Ardena] Sleep When Harmony Off"
  description: Puts Ardena to sleep when the Family Room Harmony activity is Off
  trigger:
  - platform: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    from: Computer
    to: PowerOff
  condition:
  - condition: state
    entity_id: binary_sensor.ardena_connected
    state: 'on'
  action:
  - service: button.press
    data: {}
    target:
      entity_id: button.ardena_sleep
  mode: single
- id: '1665682398363'
  alias: "\U0001F4E6 Clear Packages Out for Delivery"
  description: Clears package delivery notification when packages are delivered
  trigger:
  - platform: state
    entity_id: sensor.mail_packages_in_transit
    to: '0'
  condition:
  - condition: template
    value_template: "{{ (trigger.from_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in [\"unknown\", \"unavailable\"]\n  and not trigger.to_state.state
      in [\"unknown\", \"unavailable\"] }}"
  action:
  - service: script.notify_mobile
    data:
      who: parents
      message: clear_notification
      tag: delivery-packages-pending
  mode: single
- id: '1665682414590'
  alias: "\U0001F4E6 Mail Today"
  description: Notifies when mail will be delivered today
  trigger:
  - platform: state
    entity_id: sensor.mail_usps_mail
  condition:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in [\"unknown\", \"unavailable\"]\n  and not trigger.to_state.state
      in [\"unknown\", \"unavailable\"] }}"
  action:
  - variables:
      message: '{{ trigger.to_state.state }} {{ "item" if trigger.to_state.state ==
        "1" else "items" }} will be in the mailbox today.'
  - service: script.notify_mobile
    data:
      who: parents
      title: Mail Today
      message: '{{ message }}'
      notification_icon: mdi:mail
      color: '#2096f3'
      camera: camera.mail_usps_camera
      url: lovelace/main
      group: Delivery
      tag: delivery-mail
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      - media_player.nasya
      title: Mail Today
      message: '{{ message }}'
      camera: camera.mail_usps_camera
  - service: script.notify_pipup
    data:
      entity:
      - media_player.shield_living_room
      - media_player.shield_family_room
      - media_player.shield_main_bedroom
      title: Mail Today
      message: '{{ message }}'
      image: '{{ state_attr("camera.mail_usps_camera", "file_path")[1:] }}'
      duration: 15
  mode: single
- id: '1665682445018'
  alias: "\U0001F4E6 Packages Delivered"
  description: Notifies when packages have been delivered
  trigger:
  - platform: state
    entity_id: sensor.mail_packages_delivered
  condition:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in [\"unknown\", \"unavailable\"]\n  and not trigger.to_state.state
      in [\"unknown\", \"unavailable\"] }}"
  action:
  - variables:
      message: '{{ trigger.to_state.state }} {{ "package is" if trigger.to_state.state
        == "1" else "packages are" }} delivered.'
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: Package Delivery
        message: '{{ message }}'
        notification_icon: mdi:package-variant
        color: '#795548'
        icon_url: local/icons/package-variant.png
        group: Delivery
        tag: delivery-packages-delivered
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Package Delivery
        message: '{{ message }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Package Delivery
        message: '{{ message }}'
        icon_url: local/icons/package-variant.png
  mode: single
- id: '1665682458887'
  alias: "\U0001F4E6 Packages Out for Delivery"
  description: Notifies when packages are out for delivery
  trigger:
  - platform: state
    entity_id: sensor.mail_packages_in_transit
  condition:
  - condition: template
    value_template: "{{ (trigger.to_state.state | int(default=0)) > 0\n  and (trigger.to_state.state
      | int(default=0)) != (trigger.from_state.state | int(default=0))\n  and not
      trigger.from_state.state in [\"unknown\", \"unavailable\"]\n  and not trigger.to_state.state
      in [\"unknown\", \"unavailable\"] }}"
  action:
  - variables:
      message: '{{ trigger.to_state.state }} {{ "package is" if trigger.to_state.state
        == "1" else "packages are" }} out for delivery.'
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: Package Delivery
        message: '{{ message }}'
        notification_icon: mdi:package
        color: '#795548'
        icon_url: local/icons/package.png
        group: Delivery
        tag: delivery-packages-pending
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Package Delivery
        message: '{{ message }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Package Delivery
        icon_url: local/icons/package.png
        message: '{{ message }}'
  mode: single
- id: '1665683659569'
  alias: ⚡ Tariff Summer Off-Peak
  description: Sets the current tariff to Summer Off-Peak and sends a notification.
  trigger:
  - platform: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    below: 700
  - platform: state
    entity_id:
    - binary_sensor.tariff_summer
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_summer
    state: 'on'
  - condition: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    below: 700
  action:
  - service: select.select_option
    data:
      entity_id: select.monthly_energy
      option: summer_off_peak
  - service: script.notify_mobile
    data:
      who: parents
      title: Energy Tariff Off-Peak
      message: Power usage is under 700 kWh. Now charing summer off-peak rates.
      notification_icon: mdi:lightning-bolt
      color: '#ffeb3b'
      icon_url: local/icons/lightning-bolt.png
      group: Power
      tag: energy-tariff
      url: lovelace/power
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: Energy Tariff Off-Peak
      message: Power usage is under 700 kWh. Now charing summer off-peak rates.
  mode: single
- id: '1665683670178'
  alias: ⚡ Tariff Summer Peak
  description: Sets the current tariff to Summer On-Peak and sends a notification.
  trigger:
  - platform: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    above: 700
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_summer
    state: 'on'
  action:
  - service: select.select_option
    data:
      entity_id: select.monthly_energy
      option: summer_peak
  - service: script.notify_mobile
    data:
      who: parents
      title: Energy Tariff Peak
      message: Power usage is over 700 kWh. Now charing summer peak rates.
      notification_icon: mdi:lightning-bolt
      color: '#ffeb3b'
      icon_url: local/icons/lightning-bolt.png
      group: Power
      tag: energy-tariff
      url: lovelace/power
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: Energy Tariff Peak
      message: Power usage is over 700 kWh. Now charing summer peak rates.
  mode: single
- id: '1665683680197'
  alias: ⚡ Tariff Winter Off-Peak
  description: Sets the current tariff to Winter Off-Peak and sends a notification.
  trigger:
  - platform: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    below: 1000
  - platform: state
    entity_id:
    - binary_sensor.tariff_winter
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_winter
    state: 'on'
  - condition: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    below: 1000
  action:
  - service: select.select_option
    data:
      entity_id: select.monthly_energy
      option: winter_off_peak
  - service: script.notify_mobile
    data:
      who: parents
      title: Energy Tariff Off-Peak
      message: Power usage is under 1000 kWh. Now charing winter off-peak rates.
      notification_icon: mdi:lightning-bolt
      color: '#ffeb3b'
      icon_url: local/icons/lightning-bolt.png
      group: Power
      tag: energy-tariff
      url: lovelace/power
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: Energy Tariff Off-Peak
      message: Power usage is under 1000 kWh. Now charing winter off-peak rates.
  mode: single
- id: '1665683694303'
  alias: ⚡ Tariff Winter Peak
  description: Sets the current tariff to Winter On-Peak and sends a notification.
  trigger:
  - platform: numeric_state
    entity_id: sensor.sol_ark_grid_net_monthly
    above: 1000
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_winter
    state: 'on'
  action:
  - service: select.select_option
    data:
      entity_id: select.monthly_energy
      option: winter_peak
  - service: script.notify_mobile
    data:
      who: parents
      title: Energy Tariff Peak
      message: Power usage is over 1000 kWh. Now charing winter peak rates.
      notification_icon: mdi:lightning-bolt
      color: '#ffeb3b'
      icon_url: local/icons/lightning-bolt.png
      group: Power
      tag: energy-tariff
      url: lovelace/power
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: Energy Tariff Peak
      message: Power usage is over 1000 kWh. Now charing winter peak rates.
  mode: single
- id: '1665685653869'
  alias: "\U0001F4E6 Update USPS Mail Camera"
  description: Updates the mail image camera when mail is updated
  trigger:
  - platform: state
    entity_id: sensor.mail_updated
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: mail_and_packages.update_image
    data: {}
  mode: single
- id: '1665685949212'
  alias: ⏯ Family Room Media Auto Off
  description: Automatically turn off the Media Center in the Family Room
  trigger:
  - platform: state
    entity_id:
    - remote.androidtv_family_room
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable"]
      }}'
  - condition: state
    entity_id: remote.harmony_family_room
    state: 'on'
  - condition: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    state: Shield TV
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_family_room
  mode: restart
- id: '1665685997408'
  alias: ⏯ Main Bedroom Media Auto Off
  description: Automatically turn off the Media Center in the Main Bedroom
  trigger:
  - platform: state
    entity_id:
    - remote.androidtv_main_bedroom
    to: 'off'
  condition:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable"]
      }}'
  - condition: state
    entity_id: remote.harmony_main_bedroom
    state: 'on'
  - condition: state
    entity_id: remote.harmony_main_bedroom
    attribute: current_activity
    state: Shield TV
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_main_bedroom
  mode: restart
- id: '1665686040957'
  alias: "\U0001F9FA Dryer Running"
  description: Actions when the dryer is running and is done
  trigger:
  - platform: numeric_state
    entity_id: sensor.emporiavue_dryer_power
    for:
      minutes: 1
    above: 100
  condition: []
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.dryer_status
    data: {}
  - wait_for_trigger:
    - platform: numeric_state
      entity_id: sensor.emporiavue_dryer_power
      below: 100
      for:
        hours: 0
        minutes: 0
        seconds: 30
  - parallel:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.dryer_status
      data: {}
    - service: script.notify_mobile
      data:
        who: parents
        title: Laundry
        message: The dryer is done!
        notification_icon: mdi:tumble-dryer
        color: '#ff9800'
        icon_url: local/icons/tumble-dryer.png
        group: Laundry
        priority: high
        tag: laundry-dryer
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Laundry
        message: The dryer is done!
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Laundry
        message: The dryer is done!
        icon_url: local/icons/tumble-dryer.png
  mode: single
  max_exceeded: silent
- id: '1665686051361'
  alias: "\U0001F9FA Washer Running"
  description: Actions when the washer is running and is done
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.emporiavue_washer_power
    for:
      minutes: 1
    above: 40
  condition: []
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.washer_status
    data: {}
  - wait_for_trigger:
    - platform: numeric_state
      entity_id: sensor.emporiavue_washer_power
      below: 10
      for:
        minutes: 1
  - parallel:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.washer_status
      data: {}
    - service: script.notify_mobile
      data:
        who: parents
        title: Laundry
        message: The washer is done!
        notification_icon: mdi:washing-machine
        color: '#2196f3'
        icon_url: local/icons/washing-machine.png
        group: Laundry
        priority: high
        tag: laundry-washer
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Laundry
        message: The washer is done!
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Laundry
        message: The washer is done!
        icon_url: local/icons/washing-machine.png
  mode: single
  max_exceeded: silent
- id: '1665686312416'
  alias: "\U0001F4A1 All Lights off when Away"
  description: Turns off all the lights when no one is home
  trigger:
  - platform: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 15
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: sun
    after: sunrise
    after_offset: 00:45:00
  - condition: sun
    before: sunset
    before_offset: -00:45:00
  - condition: state
    entity_id: light.all_lights
    state: 'on'
  action:
  - parallel:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.all_lights
    - service: script.notify_mobile
      data:
        who: parents
        title: Lights Out
        message: The lights have been turned off since no one is home.
        notification_icon: mdi:lightbulb
        color: '#9e9e9e'
        icon_url: local/icons/lightbulb.png
        group: Light
  mode: single
- id: '1665686481763'
  alias: "\U0001F4A1 Dim Front Lights at Night"
  description: Dims the front lights at night
  trigger:
  - platform: time
    at: input_datetime.lights_front_night_dim
  condition: []
  action:
  - service: light.turn_on
    data:
      transition: 360
      brightness_pct: 25
    target:
      entity_id: light.outside_garage
  mode: single
- id: '1665686521519'
  alias: "\U0001F4A1 Front Lights off at Sunrise"
  description: Turns the front lights off at sunrise
  trigger:
  - platform: sun
    event: sunrise
    offset: +00:20:00
  condition: []
  action:
  - service: light.turn_off
    entity_id: light.outside_garage
  mode: single
- id: '1665686549835'
  alias: "\U0001F4A1 Front Lights on at Sunset"
  description: Turns the front lights on at sunset
  trigger:
  - platform: sun
    event: sunset
    offset: -00:20:00
  condition:
  - condition: time
    before: input_datetime.lights_front_night_dim
    after: 00:00:00
  action:
  - service: light.turn_on
    data:
      brightness_pct: 100
    target:
      entity_id: light.outside_garage
  mode: single
- id: '1665686584864'
  alias: "\U0001F4A1 Living Room Lamps off at Night"
  description: Turns off the Living Room lamps at night
  trigger:
  - platform: time
    at: input_datetime.living_room_lamps_off
  condition: []
  action:
  - service: light.turn_off
    entity_id: light.living_room_floor_lamp
  - service: light.turn_off
    entity_id: light.living_room_lamp
  mode: single
- id: '1665686606211'
  alias: "\U0001F4A1 Living Room Lamps on at Sunset"
  description: Turns the Living Room lamps on at sunset
  trigger:
  - platform: sun
    event: sunset
    offset: -00:20:00
  condition: []
  action:
  - if:
    - condition: state
      entity_id: light.living_room_floor_lamp
      state: 'off'
    then:
    - service: light.turn_on
      entity_id: light.living_room_floor_lamp
      data:
        transition: 30
        brightness: 100
        color_temp: 370
  - if:
    - condition: state
      entity_id: light.living_room_lamp
      state: 'off'
    then:
    - service: light.turn_on
      entity_id: light.living_room_lamp
      data:
        transition: 30
        brightness: 100
  mode: single
- id: '1665686715952'
  alias: "\U0001F4A1 Turn Lights On when Arrive"
  description: Turns lights on when someone arrives home after sunset
  trigger:
  - platform: state
    entity_id: group.people
    from: not_home
    to: home
    for:
      minutes: 1
  condition:
  - condition: sun
    after: sunset
    after_offset: -0:30:00
  - condition: time
    before: '23:59:59'
    after: 00:00:00
  action:
  - parallel:
    - service: homeassistant.turn_on
      entity_id: switch.garage_entry_light
    - service: light.turn_on
      entity_id: light.living_room
      data:
        brightness: 255
    - service: light.turn_on
      entity_id: light.kitchen
      data:
        brightness: 255
    - service: script.notify_mobile
      data:
        who: parents
        title: Lights On
        message: Welcome home, some lights have been turned on for you since it's
          dark.
        notification_icon: mdi:lightbulb-on
        color: '#ffeb3b'
        icon_url: local/icons/lightbulb-on.png
        group: Light
  - delay:
      minutes: 5
  - service: homeassistant.turn_off
    entity_id: switch.garage_entry_light
  mode: single
- id: '1665686891355'
  alias: "\U0001F512 Door Lock Jammed"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_lock_jammed
    to: 'on'
  - platform: state
    entity_id:
    - binary_sensor.garage_entry_lock_jammed
    to: 'on'
  condition: []
  action:
  - variables:
      lock: '{{ trigger.to_state.attributes.friendly_name | replace('' jammed'', '''')
        }}'
      message: Check the {{ lock }}, something is wrong.
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ lock }} Issue'
        message: '{{ message }}'
        notification_icon: mdi:lock-smart
        color: '#03a9f4'
        icon_url: local/icons/lock-smart.png
        group: Security
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ lock }} Issue'
        message: '{{ message }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ lock }} Issue'
        message: '{{ message }}'
        icon_url: local/icons/lock-smart.png
    - service: script.notify_speech
      data:
        media_player: media_player.cast_living_room_speaker
        message: '{{ message }}'
  mode: single
- id: '1665686913548'
  alias: "\U0001F512 Lock Doors when Away"
  description: ''
  trigger:
  - platform: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 5
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: lock.all_locks
    state: unlocked
  action:
  - if:
    - condition: state
      entity_id: schedule.front_door_auto_lock
      state: 'off'
    - condition: state
      entity_id: lock.front_door
      state: unlocked
    - condition: state
      entity_id: binary_sensor.front_door_window_door_is_open
      state: 'off'
    then:
    - service: lock.lock
      metadata: {}
      data: {}
      target:
        entity_id: lock.front_door
  - if:
    - condition: state
      entity_id: schedule.garage_entry_auto_lock
      state: 'off'
    - condition: state
      entity_id: lock.garage_entry
      state: unlocked
    - condition: state
      entity_id: binary_sensor.garage_entry_window_door_is_open
      state: 'off'
    then:
    - service: lock.lock
      metadata: {}
      data: {}
      target:
        entity_id: lock.garage_entry
  - service: script.notify_mobile
    data:
      who: parents
      title: Door Lock
      message: The doors have been locked since no one is home.
      notification_icon: mdi:lock
      color: '#03a9f4'
      icon_url: local/icons/lock-smart.png
      group: Security
  mode: single
- id: '1665687778783'
  alias: "\U0001F37D️ Dishwasher is Done"
  description: Sends notification when the dishwasher is done
  trigger:
  - platform: state
    entity_id:
    - sensor.ge_dishwasher_operating_mode
    to: Cycle Complete
  condition: []
  action:
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: Dishwasher
        message: The dishwasher is done!
        notification_icon: mdi:dishwasher
        color: '#2196f3'
        icon_url: local/icons/dishwasher.png
        tag: dishwasher
        priority: high
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Dishwasher
        message: The dishwasher is done!
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Dishwasher
        message: The dishwasher is done!
        icon_url: local/icons/dishwasher.png
  mode: single
  max_exceeded: silent
- id: '1665687879665'
  alias: "\U0001F4AC Door Closed"
  description: Clears notification when doors are closed
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_window_door_is_open
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_window_door_is_open
    - binary_sensor.garage_side_door_contact_door_is_open
    from: 'on'
    to: 'off'
    for:
      seconds: 30
  condition: []
  action:
  - service: script.notify_mobile
    data:
      who: parents
      message: clear_notification
      tag: door-{{ trigger.to_state.object_id }}
  - if:
    - condition: template
      value_template: '{{ expand("binary_sensor.all_doors") | selectattr("state",
        "==", "on") | map(attribute="entity_id") | list | count == 0 }}'
    then:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.door_open_alerts
      data: {}
    - service: script.notify_mobile
      data:
        who: parents
        message: clear_notification
        tag: door-alerts-ignored
  mode: single
- id: '1665687917160'
  alias: "\U0001F4AC Door Left Open"
  description: Sends notification when a door is left open
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_window_door_is_open
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_window_door_is_open
    - binary_sensor.garage_side_door_contact_door_is_open
    from: 'off'
    to: 'on'
    for:
      minutes: 5
  condition:
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  action:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.door_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, "off") }}'
      sequence:
      - variables:
          name: '{{ trigger.to_state.name }}'
          message: The {{ name }} has been open for {{ trigger.to_state.last_changed
            | relative_time }}.
      - parallel:
        - service: script.notify_mobile
          data:
            who: parents
            title: '{{ name }}'
            message: '{{ message }}'
            notification_icon: mdi:door-open
            color: '#00bcd4'
            icon_url: local/icons/door-open.png
            group: Security
            priority: high
            tag: door-{{ trigger.to_state.object_id }}
            url: lovelace/security
            actions:
            - action: ignore_door_alerts
              title: Ignore Alerts
        - service: script.notify_hass_agent
          data:
            entity:
            - media_player.erebus
            - media_player.nasya
            title: '{{ name }}'
            message: '{{ message }}'
            actions:
            - action: ignore_door_alerts
              title: Ignore Alerts
        - service: script.notify_pipup
          data:
            entity:
            - media_player.shield_living_room
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ name }}'
            message: '{{ message }}'
            icon_url: local/icons/door-open.png
        - service: script.notify_speech
          data:
            media_player:
            - media_player.cast_living_room_speaker
            - media_player.cast_family_room_speaker
            - media_player.cast_office_speaker
            message: '{{ message }}'
      - wait_template: '{{ is_state(trigger.to_state.entity_id, "off") }}'
        timeout: 00:05:00
  mode: parallel
- id: '1665687973181'
  alias: "\U0001F4AC Door Left Open and Leaving"
  description: Sends notification if a door is open and everybody leaves
  trigger:
  - platform: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 1
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: template
    value_template: '{{ expand("binary_sensor.all_doors") | selectattr("state", "==",
      "on") | map(attribute="entity_id") | list | count > 0 }}'
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  action:
  - service: script.notify_mobile
    data:
      who: parents
      title: Door Left Open
      message: "{%- from \"util.jinja\" import get_friendly_names -%} {%- set doors
        = expand(\"binary_sensor.all_doors\") | selectattr(\"state\", \"==\", \"on\")
        | map(attribute=\"entity_id\") | list -%} {%- if doors | length == 1 -%}\n
        \ The {{ get_friendly_names(doors) }} was open when you left!\n{%- else -%}\n
        \ The {{ get_friendly_names(doors) }} were open when you left!\n{%- endif
        -%}"
      notification_icon: mdi:door-open
      color: '#00bcd4'
      icon_url: local/icons/door-open.png
      group: Security
      priority: high
      url: lovelace/security
      actions:
      - action: ignore_door_alerts
        title: Ignore
  mode: single
- id: '1665687990814'
  alias: "\U0001F4AC Door Opened and Away"
  description: Sends notification if a door is open when people are away
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_window_door_is_open
    - binary_sensor.sliding_door_contact
    - binary_sensor.garage_entry_window_door_is_open
    - binary_sensor.garage_side_door_contact_door_is_open
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: group.people
    state: not_home
  - condition: state
    entity_id: input_boolean.door_open_alerts
    state: 'on'
  action:
  - service: script.notify_mobile
    data:
      who: parents
      title: Door Opened
      message: The {{ trigger.to_state.attributes.friendly_name }} opened and no one
        is home.
      notification_icon: mdi:door-open
      color: '#00bcd4'
      icon_url: local/icons/door-open.png
      group: Security
      priority: high
      tag: door-{{ trigger.to_state.object_id }}
      url: lovelace/security
      actions:
      - action: ignore_door_alerts
        title: Ignore
  mode: single
- id: '1665688080710'
  alias: "\U0001F514 Doorbell Ring"
  description: Actions when the ring doorbell is pressed
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.doorbell_visitor
    to: 'on'
  condition: []
  action:
  - variables:
      camera_name: doorbell
      camera: camera.{{ camera_name }}
      base_url: '{{ state_attr(''sensor.hass_config'', ''external_url'') }}'
      link_id: '{% from ''util.jinja'' import random_string %}{{ random_string(40)
        }}'
      volume: '{{ iif(is_state(''schedule.quiet_hours'', ''on''), 40, 90) }}'
      media_location: media-source://media_source/local/sounds/ds9_doorchime.mp3
      message: Ring Ring!
      actions:
      - action: URI
        title: Snapshot
        uri: '{{ base_url }}{{ state_attr(camera, ''entity_picture'') }}'
      - action: URI
        title: Stream
        uri: '{{ base_url }}/webrtc/embed?url={{ link_id }}'
  - service: webrtc.create_link
    data:
      link_id: '{{ link_id }}'
      url: rtsp://127.0.0.1:8554/{{ camera_name }}
      open_limit: 0
      time_to_live: 600
  - parallel:
    - if:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      then:
      - repeat:
          for_each:
          - media_player.cast_living_room_speaker
          - media_player.cast_family_room_speaker
          - media_player.cast_office_speaker
          sequence:
          - service: script.turn_on
            target:
              entity_id: script.media_play
            data:
              variables:
                media_player: '{{ repeat.item }}'
                media_location: '{{ media_location }}'
                volume: '{{ volume }}'
    - service: script.notify_mobile
      data:
        who: parents
        title: Doorbell
        message: '{{ message }}'
        notification_icon: mdi:doorbell-video
        color: '#e91e63'
        icon_url: local/icons/doorbell-video.png
        camera: '{{ camera }}'
        url: lovelace/security
        group: Doorbell
        priority: high
        channel: Doorbell Ring
        importance: high
        actions: '{{ actions }}'
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Doorbell
        message: '{{ message }}'
        camera: '{{ camera }}'
        duration: 20
        actions: '{{ actions }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        title: Doorbell
        message: '{{ message }}'
        duration: 20
        camera: '{{ camera }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Doorbell
        message: '{{ message }}'
        icon_url: local/icons/doorbell-video.png
    - if:
      - condition: state
        entity_id: light.wled_joshua_office_desk
        state: 'on'
      then:
      - service: number.set_value
        data:
          value: '180'
        target:
          entity_id: number.wled_joshua_office_desk_speed
      - service: light.turn_on
        target:
          entity_id: light.wled_joshua_office_desk
        data:
          effect: Sunrise
      - delay:
          seconds: 5
      - service: light.turn_on
        target:
          entity_id: light.wled_joshua_office_desk
        data:
          effect: Solid
  mode: single
- id: '1665688313389'
  alias: "\U0001F6A6 Garage Light Switch Status"
  description: Set Garage light switch LED when Garage Door and light status
  trigger:
  - platform: state
    entity_id:
    - cover.garage_door
    - light.garage
    - timer.subaru_remote_start
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: opening
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Yellow
          effect: Fast Rising
          level: 40
          target:
            entity_id: light.garage
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: closing
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Yellow
          effect: Fast Falling
          level: 40
          target:
            entity_id: light.garage
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: open
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: light.garage
            state: 'on'
          sequence:
          - service: script.inovelli_blue_led
            data:
              color: Orange
              effect: Medium Rising
              level: 40
              target:
                entity_id: light.garage
        - conditions:
          - condition: state
            entity_id: light.garage
            state: 'off'
          sequence:
          - service: script.inovelli_blue_led
            data:
              color: Red
              effect: Medium Rising
              level: 40
              target:
                entity_id: light.garage
    - conditions:
      - condition: state
        entity_id: timer.subaru_remote_start
        state: active
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Blue
          effect: Open/Close
          level: 60
          target:
            entity_id: light.garage
    default:
    - service: script.inovelli_blue_led
      data:
        target:
          entity_id: light.garage
  mode: restart
- id: '1665688406559'
  alias: "\U0001F6A6 Joshua Office Light Switch Status"
  description: Set Joshua Office light switch LED light status
  trigger:
  - platform: state
    id: 'on'
    entity_id:
    - light.joshua_office
    from: 'off'
    to: 'on'
  - platform: state
    id: 'off'
    entity_id:
    - light.joshua_office
    from: 'on'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Red
          effect: Solid
          level: 1
          target:
            entity_id: light.joshua_office_switch
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Green
          effect: Solid
          level: 40
          target:
            entity_id: light.joshua_office_switch
  mode: restart
- id: '1665688920005'
  alias: "\U0001F514 Doorbell Object or Ring"
  description: Activity when an object is detected or rung at night
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.doorbell_visitor
    to: 'on'
  - platform: event
    event_type: custom_frigate_doorbell_object
    event_data:
      object: person
  condition:
  - condition: or
    conditions:
    - condition: time
      after: input_datetime.lights_front_night_dim
      before: 00:00:00
    - condition: sun
      before: sunrise
      before_offset: -01:00:00
  action:
  - service: light.turn_on
    data:
      brightness_pct: 100
    target:
      entity_id: light.outside_front
  - delay:
      minutes: 5
  - service: light.turn_on
    data:
      transition: 180
      brightness_pct: 8
    target:
      entity_id: light.outside_front
  mode: restart
- id: '1665689270166'
  alias: "\U0001F4AC Garage Door Closed"
  description: Clears notifications when the garage door closes
  trigger:
  - platform: state
    entity_id: cover.garage_door
    to: closed
  condition: []
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.garage_door_open_alerts
    data: {}
  - service: script.notify_mobile
    data:
      who: parents
      message: clear_notification
      tag: garage-door
  - service: script.notify_mobile
    data:
      who: parents
      message: clear_notification
      tag: garage-door-alerts-ignored
  mode: single
- id: '1665689284289'
  alias: "\U0001F4AC Garage Door Left Open"
  description: Sends notification if the garage door is left open
  trigger:
  - platform: state
    entity_id:
    - cover.garage_door
    to: open
    for:
      minutes: 30
  condition:
  - condition: state
    entity_id: binary_sensor.garage_multisensor_motion_detection
    state: 'off'
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  action:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.garage_door_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, "closed") }}'
      sequence:
      - variables:
          name: '{{ trigger.to_state.name }}'
          message: The {{ name }} has been open for {{ trigger.to_state.last_changed
            | relative_time }}.
      - parallel:
        - service: script.notify_mobile
          data:
            who: parents
            title: '{{ name }}'
            message: '{{ message }}'
            notification_icon: mdi:garage-open
            color: '#ff9800'
            icon_url: local/icons/garage-open.png
            group: Security
            priority: high
            tag: garage-door
            url: lovelace/security
            actions:
            - action: ignore_garage_door_alerts
              title: Ignore Alerts
            - action: close_garage_door
              title: Close
        - service: script.notify_hass_agent
          data:
            entity:
            - media_player.erebus
            - media_player.nasya
            title: '{{ name }}'
            message: '{{ message }}'
            actions:
            - action: ignore_garage_door_alerts
              title: Ignore Alerts
            - action: close_garage_door
              title: Close
        - service: script.notify_pipup
          data:
            entity:
            - media_player.shield_living_room
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ name }}'
            message: '{{ message }}'
            icon_url: local/icons/garage-open.png
        - service: script.notify_speech
          data:
            media_player:
            - media_player.cast_living_room_speaker
            - media_player.cast_family_room_speaker
            - media_player.cast_office_speaker
            message: '{{ message }}'
      - wait_template: '{{ is_state(trigger.to_state.entity_id, "closed") }}'
        timeout: 00:30:00
  mode: single
- id: '1665689297011'
  alias: "\U0001F4AC Garage Door Left Open and Leaving"
  description: Sends notification if a door is open and everybody leaves
  trigger:
  - platform: state
    entity_id: group.people
    from: home
    to: not_home
    for:
      minutes: 1
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: cover.garage_door
    state: open
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  action:
  - service: script.notify_mobile
    data:
      who: parents
      title: Garage Door Open
      message: The Garage Door was left open when you left! Close it!
      notification_icon: mdi:garage-open
      color: '#ff9800'
      icon_url: local/icons/garage-open.png
      group: Security
      priority: high
      tag: garage-door
      url: lovelace/security
      actions:
      - action: ignore_garage_door_alerts
        title: Ignore Alerts
      - action: close_garage
        title: Close
  mode: single
- id: '1665689312993'
  alias: "\U0001F4AC Garage Door Opened and Away"
  description: Sends notification if the garage door is open people are away
  trigger:
  - platform: state
    entity_id: cover.garage_door
    to: open
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: state
    entity_id: group.people
    state: not_home
  - condition: state
    entity_id: input_boolean.garage_door_open_alerts
    state: 'on'
  action:
  - service: script.notify_mobile
    data:
      who: parents
      title: Garage Door Open
      message: The Garage Door opened and no one is home.
      notification_icon: mdi:garage-open
      color: '#ff9800'
      icon_url: local/icons/garage-open.png
      group: Security
      priority: high
      tag: garage-door
      url: lovelace/security
      actions:
      - action: ignore_garage_door_alerts
        title: Ignore Alerts
      - action: close_garage
        title: Close
  mode: single
- id: '1691033044070'
  alias: "\U0001F4AC Garbage Collection"
  description: Sends a notification when the garbage or recycling need to be taken
    to the curb.
  trigger:
  - platform: calendar
    event: start
    offset: '-6:0:0'
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Tomorrow (6pm)'
    id: garbage-tomorrow
  - platform: calendar
    event: start
    offset: -0:0:0
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Today (12am)'
    id: garbage-today
  - platform: calendar
    event: end
    offset: -0:0:0
    entity_id: calendar.garbage_collection
    alias: 'Garbage Collection: Clear (12am)'
    id: garbage-clear
  - platform: calendar
    event: start
    offset: '-6:0:0'
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Tomorrow (6pm)'
    id: recycle-tomorrow
  - platform: calendar
    event: start
    offset: -0:0:0
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Today (12am)'
    id: recycle-today
  - platform: calendar
    event: end
    offset: -0:0:0
    entity_id: calendar.recycle_collection
    alias: 'Recycle Collection: Clear (12am)'
    id: recycle-clear
  condition: []
  action:
  - variables:
      name: '{{ trigger.calendar_event.summary }}'
      type: '{{ trigger.id.split("-")[0] }}'
      day: '{{ trigger.id.split("-")[1] }}'
      object_id: '{{ type ~ "_collection" }}'
      tag: '{{ object_id }}'
      icon: '{{ state_attr("calendar." ~ object_id, "icon") }}'
      icon_color: '#{{ iif(type == ''recycle'', ''4caf50'', ''745246'') }}'
      icon_url: '{{ icon | replace("mdi:", "") }}'
      description: "{% if trigger.calendar_event.description != \"\" %}\n  {{ \" \"
        }}({{ trigger.calendar_event.description }})\n{%- endif -%}"
  - choose:
    - conditions:
      - condition: trigger
        id:
        - garbage-today
        - garbage-tomorrow
        - recycle-today
        - recycle-tomorrow
      - condition: template
        value_template: '{{ is_state("input_boolean." ~ object_id, "off") }}'
      sequence:
      - service: script.notify_mobile
        data:
          who: parents
          title: '{{ name }} Collection'
          message: The {{ name }} can will be picked up {{ day }} {{ description }}
          notification_icon: '{{ icon }}'
          color: '{{ icon_color }}'
          icon_url: local/icons/{{ icon_url }}.png
          group: Collection
          tag: '{{ tag }}'
          url: lovelace/main
          actions:
          - action: '{{ object_id }}'
            title: On the curb
    - conditions:
      - condition: trigger
        id:
        - garbage-clear
        - recycle-clear
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.{{ object_id }}
      - service: script.notify_mobile
        data:
          who: parents
          message: clear_notification
          tag: '{{ tag }}'
  mode: parallel
- id: '1665689633891'
  alias: "\U0001F4AC Subaru Failed Notification"
  description: Sends a notification when the Subaru fails to start
  trigger:
  - platform: event
    event_type: subaru_command_failed
    event_data:
      command: remote_start
  condition: []
  action:
  - variables:
      message: "The car didn't start.{{ \" \" }} {% if 'doorNotLocked' in trigger.event.data.message
        -%}\n  A door wasn't locked.\n{%- elif 'doorNotClosed' in trigger.event.data.message
        -%}\n  A door wasn't closed.\n{%- elif 'Climate preset' in trigger.event.data.message
        -%}\n  The {{ trigger.event.data.message }}\n{%- elif 'fuelLevelTooLow' in
        trigger.event.data.message -%}\n  Fuel level is low.\n{%- elif 'otherCommandsOngoing'
        in trigger.event.data.message -%}\n  Another command is in-progress.\n{%-
        elif 'never received' in trigger.event.data.message -%}\n  The message wasn't
        recieved.\n{%- elif 'unknown' in trigger.event.data.message -%}\n  I have
        no idea why. Please try again.\n{% endif %}"
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: Subaru Remote Start
        message: '{{ message }}'
        notification_icon: mdi:car-connected
        color: '#0e4bef'
        icon_url: local/icons/subaru.png
        group: Subaru
        tag: subaru
        url: lovelace/subaru
        actions:
        - action: remote_start_again
          title: Retry
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: Subaru Remote Start
        message: '{{ message }}'
        icon_url: local/icons/subaru.png
    - service: script.notify_speech
      data:
        media_player: media_player.cast_living_room_speaker
        message: '{{ message }}'
  mode: single
- id: '1665689705099'
  alias: "\U0001F3E2 Joshua Office Day Mode"
  description: Turns on the office computer on a workday
  trigger:
  - platform: time
    at: input_datetime.office_startup
  condition:
  - condition: state
    entity_id: person.joshua
    state: home
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'on'
  action:
  - service: switch.turn_on
    data:
      entity_id: switch.erebus
  mode: single
- id: '1665689732088'
  alias: "\U0001F3E2 Joshua Office Night Mode"
  description: Turn off the non-dimmable lights in the office at night.
  trigger:
  - platform: time
    at: input_datetime.office_night_mode
  condition:
  - condition: state
    entity_id: light.joshua_office
    state: 'on'
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.joshua_office_shelf_led
    data: {}
  mode: single
- id: '1665695892233'
  alias: "\U0001F5A8️ Low Toner"
  description: Sends a notification when the printer toner is low
  trigger:
  - platform: numeric_state
    entity_id: sensor.canon_mf743c_black_toner
    below: 7
  - platform: numeric_state
    entity_id: sensor.canon_mf743c_cyan_toner
    below: 7
  - platform: numeric_state
    entity_id: sensor.canon_mf743c_magenta_toner
    below: 7
  - platform: numeric_state
    entity_id: sensor.canon_mf743c_yellow_toner
    below: 7
  condition:
  - condition: template
    value_template: '{{ not trigger.to_state.state in ["unknown", "unavailable"] }}'
  action:
  - variables:
      message: The {{ trigger.to_state.attributes.friendly_name }} is low
  - parallel:
    - service: persistent_notification.create
      data:
        title: Printer Alert
        message: '{{ message }}'
        notification_id: printer-toner-low
    - service: script.notify_mobile
      data:
        who: joshua
        title: Printer Alert
        message: '{{ message }}'
        notification_icon: mdi:printer-alert
        color: '#ff5722'
        icon_url: local/icons/printer-alert.png
        group: System
        tag: printer-toner-low
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Printer Alert
        message: '{{ message }}'
  mode: single
- id: '1665695909455'
  alias: "\U0001F5A8️ Out of Paper"
  description: Sends a notification when the printer runs out of paper
  trigger:
  - platform: state
    entity_id: sensor.canon_mf743c_paper_tray
    to: empty
  condition:
  - condition: template
    value_template: '{{ not trigger.to_state.state in ["unknown", "unavailable"] }}'
  action:
  - variables:
      message: The {{ trigger.to_state.attributes.friendly_name }} is out of paper
  - parallel:
    - service: persistent_notification.create
      data:
        title: Printer Alert
        message: '{{ message }}'
        notification_id: printer-paper-low
    - service: script.notify_mobile
      data:
        who: joshua
        title: Printer Alert
        message: '{{ message }}'
        notification_icon: mdi:printer-alert
        color: '#ff5722'
        icon_url: local/icons/printer-alert.png
        group: System
        tag: printer-paper-low
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Printer Alert
        message: '{{ message }}'
  mode: single
- id: '1665695943529'
  alias: ⏯ PS4 Harmony Activity
  description: Turns on the PS4 when the activity is active
  trigger:
  - platform: state
    entity_id: remote.harmony_family_room
    to: 'on'
  condition:
  - condition: state
    entity_id: remote.harmony_family_room
    attribute: current_activity
    state: PS4
  action:
  - service: media_player.turn_on
    entity_id: media_player.playstation_4
  mode: single
- id: '1665695979311'
  alias: "\U0001F5A5️ [Quest] Charge Complete"
  description: Sends notification when Quest is done charging
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.quest_battery_level
    above: 95
  condition:
  - condition: state
    entity_id: sensor.quest_battery_state
    state: charging
  - condition: state
    entity_id: sensor.quest_charger_type
    state: ac
  - condition: state
    entity_id: binary_sensor.quest_interactive
    state: 'off'
  action:
  - service: script.notify_mobile
    data:
      who: joshua
      title: Quest is Charged
      message: The Quest is charged, you should unplug it
      notification_icon: mdi:battery-charging-high
      color: '#4caf50'
      icon_url: local/icons/battery-charging-high.png
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: Quest is Charged
      message: The Quest is charged, you should unplug it
  mode: single
- id: '1665696049425'
  alias: "\U0001F5A5️ [Quest] Interactive"
  description: Actions to take when the Quest is being used
  trigger:
  - platform: state
    entity_id: binary_sensor.quest_interactive
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.quest_interactive
        state: 'on'
      sequence:
      - parallel:
        - service: light.turn_on
          data:
            transition: 1
            brightness_pct: 100
          target:
            entity_id: light.family_room
    - conditions:
      - condition: state
        entity_id: binary_sensor.quest_interactive
        state: 'off'
      - or:
        - condition: sun
          after: sunset
          after_offset: -01:00:00
        - condition: sun
          before: sunrise
      sequence:
      - parallel:
        - service: light.turn_on
          data:
            transition: 1
            brightness_pct: 25
          target:
            entity_id: light.family_room
    default: []
  mode: single
- id: '1665696328059'
  alias: ⏯ Family Room Sound Mode
  description: Changes the reciever sound mode based on Source
  trigger:
  - platform: state
    entity_id: media_player.universal_family_room
    attribute: source
  - platform: state
    entity_id: media_player.denon_avr_s760h
    attribute: source
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.denon_avr_s760h
      state: 'off'
    - condition: state
      entity_id: media_player.universal_family_room
      attribute: source
      state: nl.rogro82.pipup
  - condition: template
    value_template: '{{ sound_mode != state_attr("media_player.denon_avr_s760h", "sound_mode")
      }}'
  action:
  - service: media_player.select_sound_mode
    target:
      entity_id: media_player.denon_avr_s760h
    data:
      sound_mode: '{{ sound_mode }}'
  variables:
    sound_mode: "{%- if trigger.to_state.attributes.source == 'Spotify' -%}\n  MCH
      STEREO\n{%- elif trigger.to_state.attributes.source in ['SmartTube', 'YouTube',
      'YouTube Kids', 'DisneyNow', 'PBS Kids'] -%}\n  DOLBY DIGITAL\n{%- else -%}\n
      \ DIRECT\n{%- endif -%}"
  mode: restart
- id: '1665696345535'
  alias: ⏯ Living Room Sound Mode
  description: Changes the reciever sound mode based on Source
  trigger:
  - platform: state
    entity_id: media_player.universal_living_room
    attribute: source
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.yamaha_rx_v679
      state: 'off'
    - condition: state
      entity_id: media_player.universal_living_room
      attribute: source
      state: nl.rogro82.pipup
  - condition: template
    value_template: '{{ sound_mode != state_attr("media_player.yamaha_rx_v679", "sound_mode")
      }}'
  action:
  - service: media_player.select_sound_mode
    target:
      entity_id: media_player.yamaha_rx_v679
    data:
      sound_mode: '{{ sound_mode }}'
  variables:
    sound_mode: "{%- if trigger.to_state.attributes.source == 'Spotify' -%}\n  7ch_stereo\n{%-
      elif trigger.to_state.attributes.source in ['SmartTube', 'YouTube', 'YouTube
      Kids', 'DisneyNow', 'PBS Kids'] -%}\n  surr_decoder\n{%- else -%}\n  straight\n{%-
      endif -%}"
  mode: restart
- id: '1665696446379'
  alias: ⚙️ Event Sniffer [Actionable Event]
  description: Listen for Actionable events
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
  - platform: event
    event_type: hass_agent_notifications
  condition: []
  action:
  - service: persistent_notification.create
    data:
      title: Actionable Event Sniffer
      message: '{{ trigger.event.data | default("") }}'
  mode: parallel
  initial_state: false
- id: '1665696464819'
  alias: ⚙️ Battery Level Low
  description: Sends a notification when a device battery level is low
  trigger:
  - platform: state
    entity_id: sensor.low_battery_devices
  condition:
  - condition: template
    value_template: "{{ not trigger.to_state in ['unknown', 'unavailable', none]\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable', none]\n  and
      trigger.to_state.state | int > 0\n  and trigger.to_state.state | int != trigger.from_state.state
      | int\n}}"
  action:
  - variables:
      sensors: "{% if not trigger.to_state.state in ['unknown', 'unavailable', none]
        %}\n  {% set result = namespace(sensors=[]) %}\n  {% for entity in trigger.to_state.attributes.entity_id
        %}\n    {% set device = states.sensor[entity.split('.')[1]] %}\n    {% set
        name = device.name | replace(':', '') | regex_replace(find = ' battery level',
        replace = '', ignorecase = true) %}\n    {% set result.sensors = result.sensors
        + [name ~ ' (' ~ device.state | round ~ '%)'] %}\n  {% endfor %}\n  {{ iif(result.sensors|count
        > 0, '- ', '') }}{{ result.sensors | join('\\n- ') }}\n{% endif %}"
  - parallel:
    - service: persistent_notification.create
      data:
        title: Low Battery Levels
        message: '{{ sensors }}'
        notification_id: low-battery-alert
    - service: script.notify_mobile
      data:
        who: joshua
        title: Low Battery Levels
        message: '{{ sensors }}'
        notification_icon: mdi:battery-alert
        color: '#f44336'
        icon_url: local/icons/battery-alert.png
        group: System
        tag: low-battery-alert
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: Low Battery Levels
        message: '{{ sensors }}'
  mode: single
- id: '1665696488378'
  alias: ⚙️ Clear TTS Cache
  description: Clears the TTS cache once a week
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: time
    weekday:
    - mon
    before: 00:00:00
    after: 00:00:00
  action:
  - service: tts.clear_cache
    data: {}
  mode: single
  initial_state: false
- id: '1665696511584'
  alias: ⚙️ Disk Space Low
  description: Sends a notification when the Disk space is low
  trigger:
  - platform: numeric_state
    entity_id: sensor.disk_use_percent
    above: 89
  condition: []
  action:
  - parallel:
    - service: persistent_notification.create
      data:
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
        notification_id: low-disk-space
    - service: script.notify_mobile
      data:
        who: joshua
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
        notification_icon: mdi:micro-sd
        color: '#607d8b'
        icon_url: local/icons/micro-sd.png
        group: System
        tag: system-disk
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: Low Disk Space
        message: Disk usage is at {{ trigger.to_state.state }}%
  mode: single
- id: '1665696525167'
  alias: ⚙️ Failed Login
  description: Sends a notification when there is a failed login
  trigger:
  - platform: persistent_notification
    update_type: added
  condition:
  - condition: template
    value_template: '{%- set notification = trigger.notification.message -%} {{ "Too
      many login attempts" in notification or "invalid authentication" in notification
      or "login attempt" in notification }}'
  action:
  - service: script.notify_mobile
    data:
      who: joshua
      title: '{{ trigger.notification.title }}'
      message: '{{ trigger.notification.message }}'
      notification_icon: mdi:home-assistant
      color: '#2196f3'
      icon_url: local/icons/home-assistant.png
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      title: '{{ trigger.notification.title }}'
      message: '{{ trigger.notification.message }}'
  mode: single
- id: '1665696538493'
  alias: ⚙️ Updates Available
  description: Create a notification when there are updates pending
  trigger:
  - platform: state
    entity_id:
    - sensor.updates
  condition:
  - condition: template
    value_template: "{{ not trigger.to_state in ['unknown', 'unavailable', none]\n
      \ and not trigger.to_state.state in ['unknown', 'unavailable', none]\n  and
      not trigger.from_state in [\"unknown\", \"unavailable\", none]\n  and not trigger.from_state.state
      in [\"unknown\", \"unavailable\", none]\n  and trigger.to_state.state != trigger.from_state.state\n}}"
  action:
  - variables:
      updates: '{{ trigger.to_state.state | int(default=0) }}'
      title: Update{{ iif(updates > 1, 's', '') }} Pending ({{ updates }})
  - if:
    - condition: template
      value_template: "{{ (trigger.to_state.state | int(default=0)) == 0\n  and (trigger.from_state.state
        | int(default=0)) > 0 }}"
    then:
    - service: persistent_notification.dismiss
      data:
        notification_id: hacs-update
    - service: script.notify_mobile
      data:
        who: joshua
        message: clear_notification
        tag: hacs-update
    else:
    - parallel:
      - service: persistent_notification.create
        data:
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%} {%- for repo in trigger.to_state.attributes.entity_id
            -%}\n  {%- if state_attr(repo, 'installed_version') != state_attr(repo,
            'latest_version') -%}\n    {% set update = '__' ~ state_attr(repo, 'friendly_name')
            | replace(' update', '') ~ ':__ _' ~ state_attr(repo, 'installed_version')
            ~ '_ -> _' ~ state_attr(repo, 'latest_version') ~ '_' %}\n    {%- set
            list.updates = list.updates + [update] -%}\n  {%- endif -%}\n{%- endfor
            -%} {{ list.updates | join('\\n') }}"
          notification_id: hacs-update
      - service: script.notify_mobile
        data:
          who: joshua
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%} {%- for repo in trigger.to_state.attributes.entity_id
            -%}\n  {%- if state_attr(repo, 'installed_version') != state_attr(repo,
            'latest_version') -%}\n    {% set update = '<b>' ~ state_attr(repo, 'friendly_name')
            | replace(' update', '') ~ ':</b> <em>' ~ state_attr(repo, 'installed_version')
            ~ '</em> -> <em>' ~ state_attr(repo, 'latest_version') ~ '</em>' %}\n
            \   {%- set list.updates = list.updates + [update] -%}\n  {%- endif -%}\n{%-
            endfor -%} {{ list.updates | join('<br>') }}"
          notification_icon: mdi:update
          color: '#4caf50'
          icon_url: local/icons/update.png
          group: Upgrade
          tag: hacs-update
          url: config/updates
      - service: script.notify_hass_agent
        data:
          entity:
          - media_player.erebus
          title: '{{ title }}'
          message: "{%- set list = namespace(updates=[]) -%} {%- for repo in trigger.to_state.attributes.entity_id
            -%}\n  {%- if state_attr(repo, 'installed_version') != state_attr(repo,
            'latest_version') -%}\n    {% set update = state_attr(repo, 'friendly_name')
            | replace(' update', '') ~ ': ' ~ state_attr(repo, 'installed_version')
            ~ ' -> ' ~ state_attr(repo, 'latest_version') %}\n    {%- set list.updates
            = list.updates + [update] -%}\n  {%- endif -%}\n{%- endfor -%} {{ list.updates
            | join('\\n') }}"
  mode: restart
- id: '1665696553212'
  alias: ⚙️ RAM Usage High
  description: Sends a notification when the RAM usage is high
  trigger:
  - platform: numeric_state
    entity_id: sensor.memory_use_percent
    above: 59
  condition: []
  action:
  - parallel:
    - service: persistent_notification.create
      data:
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
        notification_id: low-ram
    - service: script.notify_mobile
      data:
        who: joshua
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
        notification_icon: mdi:memory
        color: '#607d8b'
        icon_url: local/icons/memory.png
        group: System
        tag: system-ram
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: RAM Usage High
        message: RAM usage is at {{ trigger.to_state.state }}%
  mode: single
- id: '1665696596579'
  alias: ⚙️ Startup
  description: Actions to run at startup
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: browser_mod.notification
    data:
      message: Startup automation starting...
  - delay:
      seconds: 60
  - service: homeassistant.reload_config_entry
    data: {}
    target:
      device_id:
      - 046ad4016aea54916dd414935e0008da
      - fd4ff1a9970156bb319e4d85d4450657
      - 1dee4aa37e70d346348224829cd7c84f
  - service: script.hass_publish_sensors
    data:
      entity:
      - media_player.ardena
      - media_player.athos
      - media_player.erebus
      - media_player.nasya
  - parallel:
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id:
        - input_boolean.washer_status
        - input_boolean.dryer_status
  - service: browser_mod.notification
    data:
      message: Startup automation complete...
  - service: automation.turn_off
    enabled: false
    data:
      stop_actions: false
    target:
      entity_id: automation.startup
  mode: single
- id: '1665696688106'
  alias: ⚙️ Event Sniffer [Z-Wave JS]
  description: Listen for Z-Wave JS events
  trigger:
  - platform: event
    event_type: zwave_js_value_notification
    alias: When Central Scene event is fired
  - platform: event
    event_type: zwave_js_notification
    alias: When Notification Command Class, Entry Control Command Class is fired
  condition:
  - condition: template
    value_template: '{{ event_label.endswith("lock operation") == False }}'
    alias: 'Ignore events already identified: Manual deadbolt operation'
  action:
  - service: persistent_notification.create
    data:
      title: ZWaveJS Event Sniffer
      message: 'event_type: {{ event_type }}

        node_id: {{ node_id }}

        label: {{ label }}

        event_label: {{ event_label }}

        event_data: {{ event_data }}'
  mode: parallel
  initial_state: false
  variables:
    event_data: '{{ trigger.event.data | default("") }}'
    event_type: '{{ trigger.event.event_type | default("") }}'
    event_label: '{{ event_data.event_label | default("") }}'
    notification_label: '{{ event_data.label | default("") }}'
    node_id: '{{ event_data.node_id | default("") }}'
- id: '1665696751056'
  alias: ⚙️ Action Sniffer [Zigbee]
  description: Listen for Zigbee actions
  trigger:
  - platform: mqtt
    topic: zigbee2mqtt/+/action
  condition: []
  action:
  - variables:
      device: '{{ trigger.topic.split("/")[1] }}'
      action: '{{ trigger.payload }}'
  - service: persistent_notification.create
    data:
      title: Zigbee Event Sniffer
      message: 'device: {{ device }}

        action: {{ action }}'
  - service: browser_mod.notification
    data:
      duration: 10000
      message: 'device: {{ device }}

        action: {{ action }}'
  mode: parallel
  initial_state: false
- id: '1665697122708'
  alias: "\U0001F4A7 Water Leak Detected"
  description: Shuts off the water main and sends a notification when a water leak
    is detected
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.basement_bathroom_toilet_water_leak_detected
    - binary_sensor.bathroom_toilet_leak_sensor_water_leak_detected
    - binary_sensor.fridge_leak_sensor_water_leak_detected
    - binary_sensor.main_bathroom_toilet_leak_sensor_water_leak_detected
    - binary_sensor.water_heater_leak_sensor_water_leak_detected
    - binary_sensor.washer_leak_sensor_water_leak_detected
    - binary_sensor.water_main_valve_water_leak_detected
    - binary_sensor.basement_bathroom_sink_water_leak
    - binary_sensor.main_bathroom_left_sink_leak_water_leak
    - binary_sensor.main_bathroom_right_sink_leak_water_leak
    - binary_sensor.kitchen_sink_leak_water_leak
    - binary_sensor.basement_bathroom_sink_leak_water_leak
    - binary_sensor.dishwasher_leak_water_leak
    to: 'on'
  condition: []
  action:
  - variables:
      title: Water Leak Detected
      location: '{{ trigger.to_state.name | replace(" water leak", "") | replace("
        Leak Sensor", "") | replace(" Leak", "") | trim }}'
      message: There is a water leak in the {{ location }} and the water main has
        been shut off.
  - parallel:
    - service: valve.close_valve
      target:
        entity_id: valve.water_main_valve
      data: {}
    - service: persistent_notification.create
      data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: water-leak
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        icon_url: local/icons/water-alert.png
    - service: script.notify_speech
      data:
        media_player:
        - media_player.cast_living_room_speaker
        - media_player.cast_family_room_speaker
        - media_player.cast_office_speaker
        message: '{{ message }}'
  - wait_for_trigger:
    - platform: state
      entity_id:
      - valve.water_main_valve
      to: closed
    timeout: 00:00:30
  - service: script.notify_mobile
    data:
      who: parents
      title: '{{ title }}'
      message: '{{ message }}'
      notification_icon: mdi:water-alert
      color: '#009688'
      icon_url: local/icons/water-alert.png
      group: Water Leak
      tag: water-leak
      priority: high
      channel: Water Leak
      importance: high
      url: lovelace/utility
      actions:
      - action: turn_on_water
        title: Turn Water Main On
  - service: script.notify_hass_agent
    data:
      entity:
      - media_player.erebus
      - media_player.nasya
      title: '{{ title }}'
      message: '{{ message }}'
      actions:
      - action: turn_on_water
        title: Turn Water Main On
  - delay:
      minutes: 5
  mode: single
- id: '1665697614552'
  alias: "\U0001F4A7 Softener Salt Level Low"
  description: Sends a notification when the water softener salt level is low
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.water_softener_salt_monitor_salt_level
    below: 15
    for:
      hours: 24
  condition: []
  action:
  - parallel:
    - service: persistent_notification.create
      data:
        title: Water Softener
        message: The salt level in the water softener is low.
        notification_id: water-softener
    - service: script.notify_mobile
      data:
        who: parents
        title: Water Softener
        message: The salt level in the water softener is low.
        notification_icon: mdi:arrow-expand-vertical
        color: '#03a9f4'
        icon_url: local/icons/arrow-expand-vertical.png
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Water Softener
        message: The salt level in the water softener is low.
  mode: single
- id: '1665697635082'
  alias: "\U0001F4A7 Shut-Off Valve Overheated"
  description: Sends a notification if the water shut-off valve overheats
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.water_main_valve_overheat_detected
    to: 'on'
  condition: []
  action:
  - variables:
      title: Water Valve Overheated
      message: The water main shut-off valve has overheated.
  - parallel:
    - service: persistent_notification.create
      data:
        title: '{{ title }}'
        message: '{{ message }}'
        notification_id: water-leak
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:water-alert
        color: '#009688'
        icon_url: local/icons/water-alert.png
        group: Water Leak
        priority: high
        url: lovelace/utility
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        icon_url: local/icons/water-alert.png
    - service: script.notify_speech
      data:
        media_player:
        - media_player.cast_living_room_speaker
        - media_player.cast_family_room_speaker
        - media_player.cast_office_speaker
        message: '{{ message }}'
  mode: single
- id: '1665697728164'
  alias: "\U0001F384 XMas Lights On/Off"
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: -00:20:00
    id: 'on'
  - platform: time
    at: input_datetime.xmas_lights_off
    id: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.is_xmas
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: switch.turn_on
        entity_id: switch.xmas_light
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: switch.turn_off
        target:
          entity_id: switch.xmas_light
        data: {}
  mode: single
- id: '1665697781484'
  alias: "\U0001F384 XMas Tree On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.xmas_tree
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.xmas_tree
    id: 'off'
    to: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.is_xmas
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.xmas_tree
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.wled_mario_star_main
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.xmas_tree
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.wled_mario_star_main
  mode: single
- id: front_door_lock_state_change
  alias: "\U0001F6A6 Front Door Light Switch Status"
  description: Set front door light switch LED when Front Door lock state has changed
  trigger:
  - platform: state
    entity_id:
    - lock.front_door
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''locked'' }}'
      sequence:
      - service: script.inovelli_blue_led
        data:
          target:
            entity_id: light.outside_front
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''unlocked'' }}'
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Red
          effect: Open/Close
          level: 40
          target:
            entity_id: light.outside_front
  mode: restart
- id: '1665699683348'
  alias: ⏯ Living Room Media State at Night
  description: Brighten/Dim the lights when Media is paused
  trigger:
  - platform: state
    entity_id:
    - media_player.androidtv_living_room
  condition:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - condition: state
    entity_id: light.living_room
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_living_room
        state: paused
      sequence:
      - service: light.turn_on
        data:
          transition: 5
          brightness_pct: 60
        target:
          entity_id: light.living_room
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_living_room
        state: playing
      sequence:
      - service: light.turn_on
        data:
          transition: 5
          brightness_pct: 20
- id: '1665700097529'
  alias: ⏯ Family Room Media State at Night
  description: Brighten/Dim the lights when Media is paused
  trigger:
  - platform: state
    entity_id:
    - media_player.androidtv_family_room
  condition:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - condition: state
    entity_id: light.family_room
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_family_room
        state: paused
      sequence:
      - service: light.turn_on
        data:
          transition: 5
          brightness_pct: 60
        target:
          entity_id: light.family_room
    - conditions:
      - condition: state
        entity_id: media_player.androidtv_family_room
        state: playing
      sequence:
      - service: light.turn_on
        data:
          transition: 5
          brightness_pct: 20
  mode: single
- id: '1665700388935'
  alias: "\U0001F4AC Window Left Open"
  description: Sends notification if a window is left open
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door_window_door_is_open
    from: 'off'
    to: 'on'
    for:
      minutes: 30
  condition:
  - condition: state
    entity_id: input_boolean.window_open_alerts
    state: 'on'
  action:
  - repeat:
      until:
      - or:
        - condition: state
          entity_id: input_boolean.window_open_alerts
          state: 'off'
        - condition: template
          value_template: '{{ is_state(trigger.to_state.entity_id, "off") }}'
      sequence:
      - variables:
          name: '{{ trigger.to_state.name }}'
          message: The {{ name }} has been open for {{ trigger.to_state.last_changed
            | relative_time }}.
      - parallel:
        - service: script.notify_mobile
          data:
            who: parents
            title: '{{ name }}'
            message: '{{ message }}'
            notification_icon: mdi:window-open
            color: '#9c27b0'
            icon_url: local/icons/window-open.png
            group: Security
            priority: high
            tag: window-{{ trigger.to_state.object_id }}
            url: lovelace/security
            actions:
            - action: ignore_window_alerts
              title: Ignore Alerts
        - service: script.notify_hass_agent
          data:
            entity:
            - media_player.erebus
            - media_player.nasya
            title: '{{ name }}'
            message: '{{ message }}'
            actions:
            - action: ignore_window_alerts
              title: Ignore Alerts
        - service: script.notify_pipup
          data:
            entity:
            - media_player.shield_living_room
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: '{{ name }}'
            message: '{{ message }}'
            icon_url: local/icons/window-open.png
        - service: script.notify_speech
          data:
            media_player:
            - media_player.cast_living_room_speaker
            - media_player.cast_family_room_speaker
            - media_player.cast_office_speaker
            message: '{{ message }}'
      - wait_template: '{{ is_state(trigger.to_state.entity_id, "off") }}'
        timeout: 00:05:00
  mode: parallel
- id: '1665723292840'
  alias: "\U0001F4CB [Controller] Hue Dimmer Remote"
  description: ''
  use_blueprint:
    path: EPMatt/philips_324131092621.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.hue_dimmer_remote_action
      helper_last_controller_event: input_text.hue_dimmer_remote_event
      helper_double_press_delay: 400
      action_button_on_short:
      - service: homeassistant.turn_on
        data: {}
        target:
          entity_id: light.wled_joshua_office_desk
      action_button_off_short:
      - service: homeassistant.turn_off
        data: {}
        target:
          entity_id: light.wled_joshua_office_desk
      action_button_up_short:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.joshua_office_shelf_led
      action_button_down_short:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.joshua_office_shelf_led
- id: '1665723372482'
  alias: "\U0001F4CB [Controller] Ikea 5-Button Remote"
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1524_e1810.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.ikea_5_button_remote_action
      helper_last_controller_event: input_text.ikea_5_button_remote_event
      helper_double_press_delay: 400
      button_center_double_press: true
      button_up_double_press: true
      button_down_double_press: true
      button_up_long_loop: false
      button_down_long_loop: false
      action_button_left_short:
      - service: fan.decrease_speed
        data:
          percentage_step: 25
        target:
          entity_id: fan.main_bedroom_ceiling
      action_button_right_short:
      - service: fan.increase_speed
        data:
          percentage_step: 25
        target:
          entity_id: fan.main_bedroom_ceiling
      action_button_up_short:
      - service: light.turn_on
        data:
          brightness_step_pct: 10
          transition: 1
        target:
          entity_id: light.main_bedroom
      action_button_up_double:
      - service: light.turn_on
        data:
          brightness_pct: 100
          transition: 1
        target:
          entity_id: light.main_bedroom
      action_button_down_short:
      - service: light.turn_on
        data:
          brightness_step_pct: -10
          transition: 1
        target:
          entity_id: light.main_bedroom
      action_button_down_double:
      - service: light.turn_on
        data:
          brightness_pct: 2
          transition: 1
        target:
          entity_id: light.main_bedroom
      action_button_center_short:
      - service: light.toggle
        data:
          transition: 1
        target:
          entity_id: light.main_bedroom
      action_button_center_double:
      - service: fan.toggle
        data: {}
        target:
          entity_id: fan.main_bedroom_ceiling
- id: '1667779119970'
  alias: "\U0001F4CB [Inovelli] Ethan Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.ethan_bedroom_action
      config_single:
      - service: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
      config_double:
      - service: select.select_next
        metadata: {}
        data:
          cycle: true
        target:
          entity_id: select.nebula_projector_ethan_scene
      config_triple:
      - if:
        - condition: state
          entity_id: switch.nebula_projector_ethan_main_switch
          state: 'on'
        then:
        - service: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.nebula_projector_ethan_laser
- id: '1673311612826'
  alias: "\U0001F4CB [Inovelli] Emma Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.emma_bedroom_action
      config_single:
      - service: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
      config_double:
      - service: select.select_next
        metadata: {}
        data:
          cycle: true
        target:
          entity_id: select.nebula_projector_emma_scene
      config_triple:
      - if:
        - condition: state
          entity_id: switch.nebula_projector_emma_main_switch
          state: 'on'
        then:
        - service: light.toggle
          metadata: {}
          data: {}
          target:
            entity_id: light.nebula_projector_emma_laser
- id: '1667779287274'
  alias: "\U0001F4CB [Inovelli] Family Room Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.family_room_action
      config_single:
      - service: light.turn_on
        data:
          brightness_pct: 20
        target:
          entity_id:
          - light.family_room
      up_triple:
      - parallel:
        - service: script.family_room_game_light_mode
          data: {}
        - service: remote.turn_on
          data:
            activity: Computer
          target:
            entity_id: remote.harmony_family_room
- id: '1667779442976'
  alias: "\U0001F4CB [Inovelli] Garage Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.garage_action
      config_single:
      - parallel:
        - service: cover.toggle
          data: {}
          target:
            entity_id: cover.garage_door
        - choose:
          - conditions:
            - condition: state
              entity_id: cover.garage_door
              state: closed
            sequence:
            - service: script.inovelli_blue_led
              data:
                color: Yellow
                effect: Fast Rising
                level: 40
                duration: 3 Seconds
                target:
                  entity_id: light.garage
          default:
          - service: script.inovelli_blue_led
            data:
              color: Yellow
              effect: Fast Falling
              level: 40
              duration: 3 Seconds
              target:
                entity_id: light.garage
      - delay:
          seconds: 3
      - service: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id:
          - automation.garage_light_switch_status
      up_double:
      - parallel:
        - service: script.inovelli_blue_led
          data:
            color: Yellow
            effect: Chase
            level: 40
            duration: 3 Seconds
            target:
              entity_id: light.garage
        - service: light.turn_on
          enabled: false
          target:
            entity_id:
            - light.living_room
            - light.kitchen
          data:
            brightness: 255
      - delay:
          seconds: 3
      - service: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
      up_triple:
      - parallel:
        - service: script.inovelli_blue_led
          data:
            color: Blue
            effect: Chase
            level: 60
            duration: 3 Seconds
            target:
              entity_id: light.garage
        - service: script.subaru_remote_start
          data: {}
      - delay:
          seconds: 3
      - service: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
      down_triple:
      - parallel:
        - service: script.inovelli_blue_led
          data:
            color: Yellow
            effect: Chase
            level: 60
            duration: 3 Seconds
            target:
              entity_id: light.garage
        - service: light.turn_off
          enabled: false
          target:
            entity_id: light.inside_lights
          data: {}
      - delay:
          seconds: 3
      - service: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: automation.garage_light_switch_status
- id: '1667779560311'
  alias: "\U0001F4CB [Inovelli] Kitchen Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.kitchen_action
      config_single:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.kitchen
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: switch.toggle
          data: {}
          target:
            entity_id:
            - switch.dining_room_light
      config_double:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.kitchen
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: light.turn_off
          data: {}
          target:
            entity_id: light.kitchen_lights
- id: '1667779650555'
  alias: "\U0001F4CB [Inovelli] Living Room Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.living_room_action
      config_single:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.living_room
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: light.toggle
          data: {}
          target:
            entity_id:
            - light.living_room_lamp
            - light.living_room_floor_lamp
      config_double:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.living_room
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: light.turn_off
          data: {}
          target:
            entity_id: light.living_room_lights
- id: '1667779709981'
  alias: "\U0001F4CB [Inovelli] Main Bedroom Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.main_bedroom_action
      config_single:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.main_bedroom
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: light.toggle
          data: {}
          target:
            entity_id: light.main_bedroom_floor_lamp
- id: '1667779857021'
  alias: "\U0001F4CB [Inovelli] Joshua Office Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      up_single:
      - service: script.office_lights_on
        data: {}
      up_double:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.joshua_office_switch
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: script.office_lights_day_mode
          data: {}
      down_single:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.joshua_office_lights
      down_double:
      - parallel:
        - service: script.inovelli_blue_led_status_start
          data:
            entity_id:
            - light.joshua_office_switch
            color_start: Yellow
            effect_start: Open/Close
            duration: 2 Seconds
            level_start: 60
            color_end: Green
            effect_end: Clear
            level_end: 40
        - service: script.office_lights_night_mode
          data: {}
      switch: sensor.joshua_office_switch_action
- id: '1667780182339'
  alias: "\U0001F4CB [Inovelli] Amy Office Switch"
  description: Custom button actions for the Inovelli switch
  use_blueprint:
    path: starbuck93/z2m-inovelli-blue-series-2-in-1-switch-dimmer.yaml
    input:
      switch: sensor.amy_office_action
- id: '1669666972148'
  alias: "\U0001F310 UniFi WAN Status"
  description: Sends notifications when the network status changes
  trigger:
  - platform: state
    entity_id:
    - sensor.ucg_ultra_state
    to: Connected
    from: Disconnected
    id: connected
  - platform: state
    entity_id:
    - sensor.ucg_ultra_state
    to: Disconnected
    from:
    id: disconnected
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - connected
      sequence:
      - parallel:
        - service: script.notify_mobile
          data:
            who: parents
            title: Network
            message: The Internet is back up
            notification_icon: mdi:web
            color: '#e91e63'
            icon_url: local/icons/web.png
            tag: unifi-www
        - service: script.notify_pipup
          data:
            entity:
            - media_player.shield_living_room
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: Network
            message: The Internet is back up
            icon_url: local/icons/web.png
        - service: script.notify_hass_agent
          data:
            entity:
            - media_player.erebus
            - media_player.nasya
            title: Network
            message: The Internet is back up
    - conditions:
      - condition: trigger
        id:
        - disconnected
      sequence:
      - parallel:
        - service: script.notify_mobile
          data:
            who: parents
            title: Network
            message: The Internet is down
            notification_icon: mdi:web
            color: '#e91e63'
            icon_url: local/icons/web.png
            tag: unifi-www
        - service: script.notify_pipup
          data:
            entity:
            - media_player.shield_living_room
            - media_player.shield_family_room
            - media_player.shield_main_bedroom
            title: Network
            message: The Internet is down
            icon_url: local/icons/web.png
        - service: script.notify_hass_agent
          data:
            entity:
            - media_player.erebus
            - media_player.nasya
            title: Network
            message: The Internet is down
    default: []
  mode: restart
- id: '1673152651576'
  alias: "\U0001F4AC Subaru Started"
  description: Actions when the Subaru starts
  trigger:
  - platform: event
    event_type: subaru_command_successful
    event_data:
      command: remote_start
  condition: []
  action:
  - variables:
      title: Subaru Remote Start
      message: The car started and is running.
  - service: timer.start
    data: {}
    target:
      entity_id: timer.subaru_remote_start
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:car-connected
        color: '#114be6'
        icon_url: local/icons/subaru.png
        group: Subaru
        priority: high
        tag: subaru
        url: lovelace/subaru
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        icon_url: local/icons/subaru.png
    - service: script.notify_speech
      data:
        media_player: media_player.cast_living_room_speaker
        message: '{{ message }}'
  - wait_for_trigger:
    - platform: state
      entity_id:
      - cover.garage_door
      to: closed
    - platform: event
      event_type: subaru_command_successful
      event_data:
        command: remote_stop
    - platform: state
      entity_id:
      - binary_sensor.pixel_8_amy_android_auto
      - binary_sensor.pixel_8_joshua_android_auto
      to: 'on'
    timeout:
      minutes: 10
      seconds: 5
    continue_on_timeout: false
  - service: timer.cancel
    data: {}
    target:
      entity_id: timer.subaru_remote_start
  mode: single
- id: '1677559331389'
  alias: "\U0001F5FA️ Leaving Zone"
  description: Sends a notification when someone is leaving a zone.
  trigger:
  - platform: state
    entity_id:
    - person.joshua
    - person.amy
    to: not_home
    for:
      minutes: 1
  condition:
  - condition: template
    value_template: "{{\n  not trigger.from_state.state in [\"home\", \"not_home\",
      trigger.to_state.state]\n  and trigger.to_state.state != \"home\"\n}}"
  - condition: time
    after: 08:00:00
    before: '22:00:00'
  action:
  - variables:
      zone_name: '{{ trigger.from_state.state }}'
      name: '{{ trigger.to_state.attributes.friendly_name }}'
      message: '{%- from "message.jinja" import arriving_home -%} {%- set person =
        {"Amy": "Mom", "Joshua": "Dad"}[name] -%} {{ arriving_home(person, zone_name)
        }}'
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ name }} Leaving {{ zone_name }}'
        message: '{{ message }}'
        notification_icon: mdi:map-marker-account
        color: '#ff5722'
        icon_url: local/icons/map-marker-account.png
        group: Presence
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ name }} Leaving {{ zone_name }}'
        message: '{{ message }}'
    - service: script.notify_speech
      data:
        media_player:
        - media_player.cast_living_room_speaker
        - media_player.cast_family_room_speaker
        - media_player.cast_office_speaker
        message: '{{ message }}'
  mode: single
- id: '1678829415008'
  alias: "\U0001F4AC Subaru Remote Start Expired Notification"
  description: Sends a notification when the Subaru remote start expires
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.subaru_remote_start
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: cover.garage_door
      state: open
    - condition: state
      entity_id: device_tracker.ascent
      state: home
  action:
  - variables:
      title: Subaru Remote Start
      message: The car shut off and is no longer running.
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:car-connected
        color: '#114be6'
        icon_url: local/icons/subaru.png
        group: Subaru
        priority: high
        tag: subaru
        url: lovelace/subaru
        actions:
        - action: remote_start_again
          title: Start Again
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        icon_url: local/icons/subaru.png
    - service: script.notify_speech
      data:
        media_player: media_player.cast_living_room_speaker
        message: '{{ message }}'
  mode: single
- id: '1679340622496'
  alias: "\U0001F5FA️ Arriving Home"
  description: Sends a notification when someone is arriving home.
  trigger:
  - platform: state
    entity_id:
    - person.joshua
    - person.amy
    to: home
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.state == "not_home" }}'
  - condition: template
    value_template: '{{ trigger.to_state.attributes.gps_accuracy | int < 30 }}'
  - condition: time
    after: 08:00:00
    before: '22:00:00'
  action:
  - variables:
      name: '{{ trigger.to_state.attributes.friendly_name }}'
      message: '{%- from "message.jinja" import welcome_home -%} {%- set person =
        {"Amy": "Mom", "Joshua": "Dad"}[name] -%} {{ welcome_home(person) }}'
  - wait_for_trigger:
    - platform: state
      entity_id:
      - cover.garage_door
      to: open
    timeout:
      minutes: 2
  - parallel:
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ name }} is Home'
        message: '{{ message }}'
        notification_icon: mdi:map-marker-account
        color: '#ff5722'
        icon_url: local/icons/map-marker-account.png
        group: Presence
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ name }} is Home'
        message: '{{ message }}'
    - service: script.notify_speech
      data:
        media_player:
        - media_player.cast_living_room_speaker
        - media_player.cast_family_room_speaker
        - media_player.cast_office_speaker
        message: '{{ message }}'
  - delay:
      minutes: 5
  mode: single
  max_exceeded: silent
- id: '1679462212869'
  alias: ⏯ Ensure PiPup is Running
  description: ''
  trigger:
  - platform: time
    at: 04:30:00
  condition: []
  action:
  - variables:
      media_players:
      - media_player.shield_living_room
      - media_player.shield_family_room
      - media_player.shield_main_bedroom
  - repeat:
      for_each: '{{ media_players }}'
      sequence:
      - service: androidtv.adb_command
        data:
          command: am start -n nl.rogro82.pipup/nl.rogro82.pipup.MainActivity
        target:
          entity_id: '{{ repeat.item }}'
  mode: single
- id: '1682570311827'
  alias: "\U0001F4C5 Garbage Collection Event Generator"
  description: Creates collection events for the next year.
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: template
    value_template: '{{ now().month == 12 and now().day == 1 }}'
  action:
  - service: script.generate_collection_dates
    data:
      frequency: '2'
      pickup_day: '4'
      name: Garbage
      calendar: calendar.garbage_collection
      holiday_entity: calendar.collection
      year: '{{ now().year + 1 }}'
  - service: script.generate_collection_dates
    data:
      frequency: '1'
      pickup_day: '1'
      name: Recycling
      calendar: calendar.recycle_collection
      holiday_entity: calendar.collection
      year: '{{ now().year + 1 }}'
  mode: single
- id: '1692245318569'
  alias: "\U0001F514 Frigate Doorbell - Object Seen"
  description: Sends a notification when an object is detected on a camera
  trigger:
  - platform: mqtt
    topic: frigate/events
    id: frigate-event
    payload: Doorbell/new
    value_template: '{{ value_json[''after''][''camera''] }}/{{ value_json[''type'']
      }}'
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: silence-doorbell
    id: silence
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: silence-doorbell
    id: silence
  action:
  - variables:
      camera: doorbell
      camera_name: '{{ camera | title }}'
      base_url: '{{ state_attr(''sensor.hass_config'', ''external_url'') }}'
      attachment: snapshot.jpg
      alert_once: false
      update_thumbnail: false
      zones: []
      zone_all: false
      labels:
      - person
      - cat
      - dog
      disable_times: []
      cooldown: 30
      silence_timer: 30
      loitering: false
      loiter_timer: 0
      fps: '{{ states(''sensor.'' + camera + ''_camera_fps'') | int(5) }}'
      state_entities:
        binary_sensor.front_door_window_door_is_open: 2
        binary_sensor.doorbell_visitor: 1
      states_filter:
      - 'off'
      debug: false
  - choose:
    - alias: Silence New Object Notifications
      conditions:
      - condition: trigger
        id: silence
      sequence:
      - service: automation.turn_off
        target:
          entity_id: '{{ this.entity_id }}'
        data:
          stop_actions: false
      - delay:
          minutes: '{{ silence_timer }}'
      - service: automation.turn_on
        target:
          entity_id: '{{ this.entity_id }}'
    - alias: Frigate Event
      conditions:
      - condition: trigger
        id: frigate-event
      - condition: template
        value_template: '{{ is_state(this.entity_id, ''on'') }}'
      - condition: template
        value_template: '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds
          > cooldown }}'
      - condition: template
        value_template: '{{ not disable_times | length or not now().hour in disable_times
          | map(''int'') | list }}'
      sequence:
      - variables:
          event: '{{ trigger.payload_json }}'
          id: '{{ trigger.payload_json[''after''][''id''] }}'
          object: '{{ trigger.payload_json[''after''][''label''] }}'
          label: '{{ object | title }}'
          entered_zones: '{{ trigger.payload_json[''after''][''entered_zones''] |
            lower }}'
          zone_multi_filter: '{{ zones | length and zone_all and entered_zones | length
            and zones and zones | reject(''in'', entered_zones) | list | length ==
            0 }}'
          title: '{{ camera_name }} ({{ label }})'
          message: A {{ label }} {{ 'is loitering' if loitering else 'was detected'
            }} on the {{ camera_name }} camera{% if entered_zones %} in the {{ entered_zones
            | join(', ') | replace('_',' ') }}{% endif %}.
          clip: /api/frigate/notifications/{{ id }}/{{ camera }}/clip.mp4
          link_id: '{% from ''util.jinja'' import random_string %}{{ random_string(40)
            }}'
          stream: '{{ base_url }}/webrtc/embed?url={{ link_id }}'
          icon: mdi:{{ 'account-outline' if label == 'Person' else 'dog' if label
            == 'Dog' else 'cat' if label == 'Cat' else 'car' if label == 'Car' else
            'motorbike' if label == 'Motorcycle' else 'home-assistant' }}
          actions:
          - action: URI
            title: Snapshot
            uri: '{{ base_url }}/api/frigate/notifications/{{ id }}/snapshot.jpg'
          - action: URI
            title: Stream
            uri: '{{ stream }}'
          - action: silence-{{ camera }}
            title: Silence ({{ silence_timer }} min)
            destructive: true
      - service: webrtc.create_link
        data:
          link_id: '{{ link_id }}'
          url: rtsp://127.0.0.1:8554/{{ camera | lower }}
          open_limit: 0
          time_to_live: 600
      - alias: 'Debug: set notification'
        choose:
        - conditions:
          - condition: template
            value_template: '{{ debug }}'
          sequence:
          - service: persistent_notification.create
            data:
              title: Frigate Notification
              message: "Info:\n  - FPS: {{ fps }}\n  - Frigate event Id: {{ id }}\n
                \ - Object (Formatted): {{ object }} ({{ label }})\n\nConfig:\n  -
                Camera (Formatted): {{ camera }} ({{ camera_name }})\n  - Base URL:
                {{ base_url }}\n  - Alert once: {{ alert_once }}\n  - Update thumbnails:
                {{ update_thumbnail }}\n  - Clip: {{ clip }}\n  - Icon: {{ icon }}\n
                \ - Cooldown: {{ cooldown }}s\n  - Loiter timer: {{ loiter_timer }}s\n
                \ - Title: {{ title }}\n  - Message: {{ message }}\n  - Actions: {{
                actions | tojson }}\n\nFilters:\n  - Zones:\n    - Zone filter on:
                {{ zones | length }}\n    - Required zones: {{ zones | join(', ')
                }}\n    - All Zones on: {{ zone_all }}\n    - Entered Zones: {{ entered_zones
                }}\n    - Zone Filter TEST: {{ 'PASS (Multi)' if zone_multi_filter
                else 'PASS' if ( not zones | length or not zone_all and zones | select('in',
                entered_zones) | list | length ) else 'FAIL (Multi)' if zone_all else
                'FAIL' }}\n  - Required objects TEST:\n    - Labels: {{ labels | join(',
                ') }}\n    - TEST: {{ 'PASS' if not labels | length or object in labels
                else 'FAIL' }}\n  - Disabled times: {{ disable_times }}\n  - State
                Filter:\n    - State filter on: {{ iif(state_entities | list | count
                > 0, 'True', 'False') }}\n    - State filter entity: {{ state_entities
                | tojson }}\n    - Required states: {{ states_filter | join(', ')
                }}\n  {%- set state_filter = namespace(allow=[]) -%}\n  {%- for entity,
                time in state_entities.items() -%}\n    {%- set state =\n      states(entity)
                in states_filter\n      and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
                | int / 60 > time\n    -%}\n    {%- set state_filter.allow = state_filter.allow
                + [state] -%}\n  {%- endfor %}\n    - State Filter TEST: {{ iif(state_filter.allow
                | reject | first | default(true), 'PASS', 'FAIL') }}\n"
      - alias: Notifications enabled for object label
        condition: template
        value_template: '{{ not labels | length or object in labels }}'
      - alias: Notify on new object
        choose:
        - conditions:
          - condition: template
            value_template: '{{ not zones | length or (not zone_all and zones | select(''in'',
              entered_zones) | list | length > 0) or (zone_all and entered_zones |
              length > 0 and zones | reject(''in'', entered_zones) | list | length
              == 0) }}'
          - condition: template
            value_template: "{%- set state_filter = namespace(allow=[]) -%} {%- for
              entity, time in state_entities.items() -%}\n  {%- set state =\n    states(entity)
              in states_filter\n    and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
              | int / 60 > time\n  -%}\n  {%- set state_filter.allow = state_filter.allow
              + [state] -%}\n{%- endfor -%} {{ iif(state_filter.allow | reject | first
              | default(true), true, false) }}"
          sequence:
          - alias: Fire event for other automations and scripts
            event: custom_frigate_doorbell_object
            event_data:
              id: '{{ id }}'
              camera_name: '{{ camera_name }}'
              title: '{{ title }}'
              message: '{{ message }}'
              object: '{{ object }}'
              label: '{{ label }}'
              icon: '{{ icon }}'
              image: api/frigate/notifications/{{ id }}/{{ attachment }}
              clip: '{{ clip }}'
              actions: '{{ actions }}'
      - repeat:
          sequence:
          - wait_for_trigger:
            - platform: mqtt
              topic: frigate/events
              payload: '{{ id }}'
              value_template: '{{ value_json[''after''][''id''] }}'
            timeout:
              minutes: 2
            continue_on_timeout: false
          - variables:
              event: '{{ wait.trigger.payload_json }}'
              loitering: '{{ loiter_timer and event[''before''][''motionless_count'']
                / fps / 60 < loiter_timer and event[''after''][''motionless_count'']
                / fps / 60 >= loiter_timer }}'
              new_snapshot: '{{ update_thumbnail and event[''before''][''snapshot''][''frame_time'']
                != event[''after''][''snapshot''][''frame_time''] }}'
              last_zones: '{{ event[''before''][''entered_zones''] | lower }}'
              entered_zones: '{{ event[''after''][''entered_zones''] | lower }}'
              zone_filter: '{{ not zones | length or zones | select(''in'', entered_zones)
                | list | length > 0 }}'
              zone_multi_filter: '{{ not zones | length or not zone_all or ( entered_zones
                | list | length > 0 and zones and zones | reject(''in'', entered_zones)
                | list | length == 0 ) }}'
              stationary_moved: '{{ event[''after''][''position_changes''] > event[''before''][''position_changes'']
                }}'
              zone_only_changed: '{{ zones | length and (entered_zones | length >
                0 and not last_zones | length) }}'
              entered_zones_changed: '{{ zones | length > 0 and (zones | select(''in'',
                entered_zones) | list | length > 0 and not zones | select(''in'',
                last_zones) | list | length) }}'
              state_true: "{%- set state_filter = namespace(allow=[]) -%} {%- for
                entity, time in state_entities.items() -%}\n  {%- set state =\n    states(entity)
                in states_filter\n    and (as_timestamp(now()) - as_timestamp(states[entity].last_changed))
                | int / 60 > time\n  -%}\n  {%- set state_filter.allow = state_filter.allow
                + [state] -%}\n{%- endfor -%} {{ iif(state_filter.allow | reject |
                first | default(true), true, false) }}"
              sub_label: "{% if event['after']['sub_label'] %}\n  {{ event['after']['sub_label'][0]
                }}\n{% else %}\n  {{ event['after']['sub_label'] }}\n{% endif %}\n"
              sub_label_before: "{% if event['before']['sub_label'] %}\n  {{ event['before']['sub_label'][0]
                }}\n{% else %}\n  {{ event['before']['sub_label'] }}\n{% endif %}\n"
              sub_label_changed: '{{ sub_label != sub_label_before }}'
              update: '{{ alert_once or (new_snapshot and not loitering and not zone_only_changed
                and not entered_zones_changed and not sub_label_changed) }}'
              title: "{% if sub_label %}\n  {{ title | replace('A Person', sub_label
                | title) | replace('Person', sub_label | title) }}\n{% else %}\n  {{
                title }}\n{% endif %}\n"
              message: "{% if sub_label %}\n  {{ message | replace('A Person', sub_label
                | title) | replace('Person', sub_label | title) }}\n{% else %}\n  {{
                message }}\n{% endif %}\n"
          - alias: Update thumbnail at end of event
            choose:
            - conditions:
              - condition: template
                value_template: '{{ wait.trigger.payload_json[''type''] == ''end''
                  }}'
              - condition: template
                value_template: '{{ (''snapshot'' in attachment and update_thumbnail)
                  or clip | length > 0 }}'
              sequence:
              - delay:
                  seconds: 5
              - variables:
                  new_snapshot: '{{ update_thumbnail }}'
          - alias: 'Debug: set notification'
            choose:
            - conditions:
              - condition: template
                value_template: '{{ debug }}'
              sequence:
              - service: persistent_notification.create
                data:
                  title: Frigate Notification Loop
                  message: "Info:\n  - Last zones: {{ last_zones }}\n  - Current zones:
                    {{ entered_zones }}\n  - Sublabel: {{ sub_label }}\n  - URL: api/frigate/notifications/{{
                    id }}/{{ camera + '/clip.mp4' if clip | length > 0 and wait.trigger.payload_json['type']
                    == 'end' else attachment }}\n  - Clip: \"{{ clip }}\"\n\nTriggers:\n
                    \ - New snapshot: {{ new_snapshot }}\n  - Stationary moved: {{
                    stationary_moved }}\n  - Entered zones changed: {{ entered_zones_changed
                    }}\n  - Sublabel changed: {{ sub_label_changed }}\n\nConditions:\n
                    \ - Loitering: {{ loitering }}\n  - Zone filter test: {{ 'ON'
                    if zones | length else 'OFF' }} - {{ 'PASS' if zone_filter else
                    'FAIL' }}\n  - Multi-zone filter: {{ 'OFF' if not zones | length
                    or not zone_all else 'ON' }} - {{ 'PASS' if not zones | length
                    or not zone_all or ( entered_zones | length and zones and zones
                    | reject('in', entered_zones) | list | length == 0 ) else 'FAIL'
                    }}\n  - Image: api/frigate/notifications/{{ id }}/{{ attachment
                    }}\n"
          - alias: Notify on loitering or significant change
            choose:
            - conditions:
              - condition: template
                value_template: '{{ loitering or (zone_filter and zone_multi_filter
                  and state_true and (new_snapshot or stationary_moved or zone_only_changed
                  or entered_zones_changed or sub_label_changed)) }}'
              sequence:
              - alias: Fire event for other automations and scripts
                event: custom_frigate_doorbell_object_update
                event_data:
                  id: '{{ id }}'
                  camera_name: '{{ camera_name }}'
                  title: '{{ title }}'
                  message: '{{ message }}'
                  loitering: '{{ loitering }}'
                  object: '{{ object }}'
                  label: '{{ label }}'
                  icon: '{{ icon }}'
                  image: api/frigate/notifications/{{ id }}/{{ attachment }}
                  clip: '{{ clip }}'
                  actions: '{{ actions }}'
          until:
          - condition: template
            value_template: '{{ not wait.trigger or wait.trigger.payload_json[''type'']
              == ''end'' }}'
  mode: parallel
- id: '1693003933194'
  alias: "\U0001F514 Frigate Doorbell - Event Handler"
  description: Sends notifications when an object is detected on the Doorbell camera
  trigger:
  - platform: event
    event_type: custom_frigate_doorbell_object
    id: initial
  - platform: event
    event_type: custom_frigate_doorbell_object_update
    id: update
  condition: []
  action:
  - variables:
      id: '{{ trigger.event.data.id }}'
      camera_name: '{{ trigger.event.data.camera_name }}'
      title: '{{ trigger.event.data.title }}'
      message: '{{ trigger.event.data.message }}'
      object: '{{ trigger.event.data.object }}'
      label: '{{ trigger.event.data.label }}'
      loitering: '{{ trigger.event.data.loitering | default(false) }}'
      icon: '{{ trigger.event.data.icon }}'
      image: '{{ trigger.event.data.image }}'
      clip: '{{ trigger.event.data.clip }}'
      actions: '{{ trigger.event.data.actions }}'
  - parallel:
    - if:
      - condition: trigger
        id:
        - initial
      then:
      - service: script.notify_speech
        data:
          media_player:
          - media_player.cast_living_room_speaker
          - media_player.cast_family_room_speaker
          - media_player.cast_office_speaker
          message: A {{ label }} was detected at the front door.
    - service: script.notify_mobile
      data:
        who: parents
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: '{{ icon }}'
        color: '#e91e63'
        image: '{{ image }}?format=android'
        group: '{{ camera_name }} Notification{{ '' Loitering'' if loitering }}'
        tag: '{{ id }}{{ ''-loitering'' if loitering }}'
        priority: high
        sticky: true
        channel: Doorbell Motion
        importance: high
        url: lovelace/security
        actions: '{{ actions }}'
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: '{{ title }}'
        message: '{{ message }}'
        image: '{{ image }}'
        duration: 10
        actions: '{{ actions }}'
    - service: script.notify_pipup
      data:
        entity:
        - media_player.shield_living_room
        - media_player.shield_family_room
        - media_player.shield_main_bedroom
        title: '{{ title }}'
        message: '{{ message }}'
        duration: 20
        image: '{{ image }}'
    - if:
      - condition: trigger
        id:
        - initial
      then:
      - if:
        - condition: state
          entity_id: light.wled_joshua_office_desk
          state: 'on'
        then:
        - service: number.set_value
          data:
            value: '80'
          target:
            entity_id: number.wled_joshua_office_desk_speed
        - service: light.turn_on
          target:
            entity_id: light.wled_joshua_office_desk
          data:
            effect: Phased
        - delay:
            seconds: 5
        - service: light.turn_on
          target:
            entity_id: light.wled_joshua_office_desk
          data:
            effect: Solid
  mode: parallel
- id: '1698644135975'
  alias: ⚙️ Update Database Filesize Sensor
  description: Updates the file size sensor for the database.
  trigger:
  - platform: time_pattern
    minutes: /30
    seconds: '0'
    hours: '*'
  condition: []
  action:
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.home_assistant_v2_db_size
  mode: single
- id: '1698980625096'
  alias: ⚙️ Automated Backup
  description: Creates a full backup nightly.
  trigger:
  - platform: time
    at: 03:00:00
  condition:
  - condition: template
    value_template: '{{ now().isoweekday() == 7 }}'
  action:
  - service: hassio.backup_full
    data:
      compressed: false
      location: Lantea
  mode: single
- id: '1699834374599'
  alias: "\U0001F4C5 Living Room Fan On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.living_room_fan
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.living_room_fan
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: fan.turn_on
        data: {}
        target:
          entity_id: fan.living_room_ceiling
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.living_room_ceiling
  mode: single
- id: '1699834405375'
  alias: "\U0001F4C5 Main Bedroom Fan On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.main_bedroom_fan
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.main_bedroom_fan
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: fan.turn_on
        data: {}
        target:
          entity_id: fan.main_bedroom_ceiling
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.main_bedroom_ceiling
  mode: single
- id: '1702017706466'
  alias: ⚙️ Scan Interval
  description: Devices with custom scan intervals
  trigger:
  - platform: time_pattern
    minutes: '*'
  action:
  - variables:
      entities:
        binary_sensor.canon_mf743c_online: 1
      total_mins: '{{ (now().timestamp() / 60) | int }}'
  - repeat:
      for_each: '{{ entities | dictsort }}'
      sequence:
      - if:
        - condition: template
          value_template: '{{ total_mins % repeat.item[1] == 0 }}'
        then:
        - service: homeassistant.update_entity
          target:
            entity_id: '{{ repeat.item[0] }}'
- id: '1703738390005'
  alias: ⚡ Tariff ToU Summer Off-Peak
  description: Sets the current tariff to Summer Off-Peak.
  trigger:
  - platform: state
    entity_id:
    - schedule.tou_summer_peak
    to: 'off'
  - platform: state
    entity_id:
    - binary_sensor.tariff_summer
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_summer
    state: 'on'
  - condition: state
    entity_id: schedule.tou_summer_peak
    state: 'off'
  action:
  - service: select.select_option
    data:
      option: summer_off_peak
    target:
      entity_id:
      - select.monthly_tou_energy
      - select.sol_ark_grid_net_tou_daily
  mode: single
- id: '1703738432264'
  alias: ⚡ Tariff ToU Summer Peak
  description: Sets the current tariff to Summer On-Peak.
  trigger:
  - platform: state
    entity_id:
    - schedule.tou_summer_peak
    to: 'on'
  - platform: state
    entity_id:
    - binary_sensor.tariff_summer
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_summer
    state: 'on'
  - condition: state
    entity_id: schedule.tou_summer_peak
    state: 'on'
  action:
  - service: select.select_option
    data:
      option: summer_peak
    target:
      entity_id:
      - select.monthly_tou_energy
      - select.sol_ark_grid_net_tou_daily
  mode: single
- id: '1703738486672'
  alias: ⚡ Tariff ToU Winter Off-Peak
  description: Sets the current tariff to Winter Off-Peak.
  trigger:
  - platform: state
    entity_id:
    - schedule.tou_winter_peak
    to: 'off'
  - platform: state
    entity_id:
    - binary_sensor.tariff_winter
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_winter
    state: 'on'
  - condition: state
    entity_id: schedule.tou_winter_peak
    state: 'off'
  action:
  - service: select.select_option
    data:
      option: winter_off_peak
    target:
      entity_id:
      - select.monthly_tou_energy
      - select.sol_ark_grid_net_tou_daily
  mode: single
- id: '1703738522017'
  alias: ⚡ Tariff ToU Winter Peak
  description: Sets the current tariff to Winter On-Peak.
  trigger:
  - platform: state
    entity_id:
    - schedule.tou_winter_peak
    to: 'on'
  - platform: state
    entity_id:
    - binary_sensor.tariff_winter
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ not trigger.from_state.state in [\"unknown\", \"unavailable\"]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\"] }}"
  - condition: state
    entity_id: binary_sensor.tariff_winter
    state: 'on'
  - condition: state
    entity_id: schedule.tou_winter_peak
    state: 'on'
  action:
  - service: select.select_option
    data:
      option: winter_peak
    target:
      entity_id:
      - select.monthly_tou_energy
      - select.sol_ark_grid_net_tou_daily
  mode: single
- id: '1704385020720'
  alias: "\U0001F4AC Subaru Fuel Level Low"
  description: Sends a notification when Subaru fuel level is low
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.ascent_range
    below: 31
    for:
      hours: 1
  condition: []
  action:
  - parallel:
    - service: persistent_notification.create
      data:
        title: Subaru Fuel Low
        message: The fuel level in the Subaru is low.
        notification_id: subaru-fuel
    - service: script.notify_mobile
      data:
        who: parents
        title: Subaru Fuel Low
        message: The fuel level in the Subaru is low.
        notification_icon: mdi:car-connected
        color: '#0e4bef'
        icon_url: local/icons/subaru.png
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Subaru Fuel Low
        message: The fuel level in the Subaru is low.
  mode: single
- id: '1704594011311'
  alias: "\U0001F4C5 Grow Light On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.grow_light
    id: 'on'
    to: 'on'
  - platform: state
    entity_id:
    - schedule.grow_light
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: switch.turn_on
        target:
          entity_id:
          - switch.grow_light
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.grow_light
  mode: single
- id: '1704671260235'
  alias: ✴️ Joshua Office Light On/Off Presence
  description: Turn on/off the light based on presence
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.apollo_msr_1_office_radar_target
    id: 'on'
    to: 'on'
  - platform: state
    entity_id:
    - binary_sensor.apollo_msr_1_office_radar_target
    id: 'off'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: script.office_lights_on
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.joshua_office_lights
        data:
          transition: 20
  mode: restart
- id: '1704733260383'
  alias: ✴️ Joshua Office CO2 Levels
  description: Alerts when CO2 levels in Joshua's Office are high
  trigger:
  - platform: state
    entity_id:
    - sensor.apollo_msr_1_office_co2
    to:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 1666
      sequence:
      - service: esphome.apollo_msr_1_bcbde8_play_buzzer
        data:
          song_str: Cantina:d=4,o=5,b=250:8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8p,8d6,8p
        enabled: false
      - service: light.turn_on
        data:
          rgb_color:
          - 255
          - 0
          - 0
          brightness: 255
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 1333
        below: 1666
      sequence:
      - service: light.turn_on
        data:
          rgb_color:
          - 255
          - 174
          - 0
          brightness: 255
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        above: 700
        below: 1333
      sequence:
      - service: light.turn_on
        data:
          rgb_color:
          - 255
          - 255
          - 0
          brightness: 255
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
    - conditions:
      - condition: numeric_state
        entity_id: sensor.apollo_msr_1_office_co2
        below: 700
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.apollo_msr_1_office_rgb_light
        data: {}
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  mode: single
  max_exceeded: silent
- id: '1706291631355'
  alias: "\U0001F431 Cat Feeder Empty Notification"
  description: Sends a notification when the Cat feeder is nearly empty
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.cat_feeder_total_weight
    above: 1440
  condition: []
  action:
  - parallel:
    - service: script.notify_mobile
      metadata: {}
      data:
        who: parents
        title: Cat Feeder
        message: The Cat feeder is nearly empty
        notification_icon: mdi:paw
        color: '#FF9800'
        icon_url: local/icons/paw.png
        actions:
        - action: cat_feeder_full
          title: Feeder Full
        tag: cat-feeder
    - service: script.notify_hass_agent
      metadata: {}
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Cat Feeder
        message: The Cat feeder is nearly empty
        actions:
        - action: cat_feeder_full
          title: Feeder Full
  mode: single
- id: '1708236514239'
  alias: ☑️ Cat Feeder Filled
  description: Resets the cat feeder level when the action is pressed
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: cat_feeder_full
  - platform: event
    event_type: hass_agent_notifications
    event_data:
      action: cat_feeder_full
  condition: []
  action:
  - service: utility_meter.calibrate
    metadata: {}
    data:
      value: '0'
    target:
      entity_id: sensor.cat_feeder_total_weight
  - parallel:
    - service: script.notify_mobile
      metadata: {}
      data:
        who: parents
        title: Cat Feeder
        message: The Cat feeder was refilled
        notification_icon: mdi:paw
        color: '#FF9800'
        icon_url: local/icons/paw.png
        tag: cat-feeder
    - service: script.notify_hass_agent
      metadata: {}
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Cat Feeder
        message: The Cat feeder was refilled
  mode: single
- id: '1709917613454'
  alias: "\U0001F431 Cat Feeder Error"
  description: Sends a notification when the Cat feeder has an error
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.cat_feeder_error
    to: 'on'
  condition: []
  action:
  - parallel:
    - service: script.notify_mobile
      metadata: {}
      data:
        who: parents
        title: Cat Feeder Error
        message: The Cat feeder is stuck
        notification_icon: mdi:paw
        color: '#FF0000'
        icon_url: local/icons/paw.png
        tag: cat-feeder
    - service: script.notify_hass_agent
      metadata: {}
      data:
        entity:
        - media_player.erebus
        - media_player.nasya
        title: Cat Feeder Error
        message: The Cat feeder is stuck
  mode: single
- id: '1710955585340'
  alias: "\U0001F4C5 Emma's Projector On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.emma_projector
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.emma_projector
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      - condition: state
        entity_id: light.nebula_projector_emma_light
        state: 'off'
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.nebula_projector_emma_main_switch
  mode: single
- id: '1710955623615'
  alias: "\U0001F4C5 Ethan's Projector On/Off"
  description: ''
  trigger:
  - platform: state
    entity_id: schedule.ethan_projector
    id: 'on'
    to: 'on'
  - platform: state
    entity_id: schedule.ethan_projector
    id: 'off'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      - condition: state
        entity_id: light.nebula_projector_ethan_light
        state: 'off'
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.nebula_projector_ethan_main_switch
  mode: single
- id: '1710964633068'
  alias: "\U0001F6A6 Ethan Light Switch Status"
  description: Set Ethan light switch LED on state changed
  trigger:
  - platform: state
    entity_id:
    - switch.nebula_projector_ethan_main_switch
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_ethan_main_switch
        state: 'off'
      sequence:
      - service: script.inovelli_blue_led
        data:
          target:
            entity_id: light.ethan_bedroom
          led: Led 1
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_ethan_main_switch
        state: 'on'
      sequence:
      - service: script.inovelli_blue_led
        data:
          level: 40
          target:
            entity_id: light.ethan_bedroom
          led: Led 1
          effect: Pulse
          color: Red
  mode: restart
- id: '1710965030799'
  alias: "\U0001F6A6 Emma Light Switch Status"
  description: Set Emma light switch LED on state changed
  trigger:
  - platform: state
    entity_id:
    - switch.nebula_projector_emma_main_switch
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_emma_main_switch
        state: 'off'
      sequence:
      - service: script.inovelli_blue_led
        data:
          target:
            entity_id: light.emma_bedroom
          led: Led 1
    - conditions:
      - condition: state
        entity_id: switch.nebula_projector_emma_main_switch
        state: 'on'
      sequence:
      - service: script.inovelli_blue_led
        data:
          level: 40
          target:
            entity_id: light.emma_bedroom
          led: Led 1
          effect: Pulse
          color: Red
  mode: restart
- id: '1711138066935'
  alias: ⚙️ Reload Addons and Integrations
  description: Reload AddOns and Integrations since they don't work after Home Assistant
    is restarted.
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: hassio.addon_restart
    metadata: {}
    data:
      addon: 45df7312_zigbee2mqtt
  - service: homeassistant.reload_config_entry
    metadata: {}
    data: {}
    target:
      device_id: 4d8e4dbe89e0c2955f1faf921bc35550
  mode: single
- id: '1713385133443'
  alias: ⚙️ Offline Devices
  description: Sends a notification when a device is offline
  trigger:
  - platform: state
    entity_id:
    - sensor.offline_devices
  condition:
  - condition: template
    value_template: "{{ not trigger.to_state in [\"unknown\", \"unavailable\", none]\n
      \ and not trigger.to_state.state in [\"unknown\", \"unavailable\", none]\n  and
      trigger.to_state.state | int > 0\n  and trigger.to_state.state | int != trigger.from_state.state
      | int\n}}"
  action:
  - variables:
      sensors: "{% set result = namespace(sensors=[]) %} {% for entity_id in trigger.to_state.attributes.entity_id
        %}\n  {% set state = states(entity_id) %}\n  {% set time = iif(has_value(entity_id),
        \" (\" ~ as_datetime(state) | relative_time ~ \")\", \" (Unknown)\") %}\n
        \ {% set name = state_attr(entity_id, \"friendly_name\") | regex_replace(find
        = \" last seen\", replace = \"\", ignorecase = true) %}\n  {% set result.sensors
        = result.sensors + [name ~ time] %}\n{% endfor %} {{ iif(result.sensors |
        count > 0, \"- \", \"\") }}{{ result.sensors | join(\"\\n- \") }}"
  - parallel:
    - service: persistent_notification.create
      data:
        title: Offline Devices
        message: '{{ sensors }}'
        notification_id: offline-devices
    - service: script.notify_mobile
      data:
        who: joshua
        title: Offline Devices
        message: '{{ sensors }}'
        notification_icon: mdi:network-off
        color: '#f44336'
        icon_url: local/icons/network-off.png
        group: System
        tag: offline-devices
        url: dashboard-system/overview
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: Offline Devices
        message: '{{ sensors }}'
  mode: restart
- id: '1713973263507'
  alias: "\U0001F4AC Bambu P1S Print Status"
  description: Notify current print status every 10% (or 25% for short prints).
  trigger:
  - platform: state
    entity_id:
    - sensor.bambu_p1s_print_progress
    to:
    from:
  condition:
  - alias: Update at 10% intervals
    condition: template
    value_template: "{%- if has_value(\"sensor.bambu_p1s_end_time\")\n  and has_value(\"sensor.bambu_p1s_start_time\")\n
      \ and has_value(\"sensor.bambu_p1s_print_progress\")\n  and not states(\"sensor.bambu_p1s_print_progress\")
      in [\"0\", \"100\"]\n-%}\n  {%- set total_time = (as_datetime(states(\"sensor.bambu_p1s_end_time\"))
      - as_datetime(states(\"sensor.bambu_p1s_start_time\"))).total_seconds() / 60
      -%}\n  {%- if total_time > 60 -%}\n    {%- set step = 10 -%}\n  {%- else -%}\n
      \   {%- set step = 25 -%}\n  {%- endif -%}\n  {{ states(\"sensor.bambu_p1s_print_progress\")
      | int % step == 0 }}\n{%- else -%}\n  {{ false }}\n{%- endif -%}"
  action:
  - variables:
      progress: '{{ states("sensor.bambu_p1s_print_progress") }}%'
      title: 3D Print Status {{ progress }}
      message: '{{ states("sensor.bambu_p1s_task_name") | replace(".3mf","") | replace(".gcode","")
        }} is at {{ progress }}'
  - parallel:
    - service: script.notify_mobile
      data:
        who: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:printer-3d
        color: '#16c344'
        icon_url: local/icons/bambu-lab.png
        image: /api/image_proxy/image.bambu_p1s_camera
        group: 3d-printer
        tag: 3d-printer
        priority: high
        url: lovelace/bambu
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: '{{ title }}'
        message: '{{ message }}'
        camera: image.bambu_p1s_camera
  mode: single
- id: '1713983450425'
  alias: "\U0001F4AC Bambu P1S Print Completed"
  description: Notify when the print is finished or failed.
  trigger:
  - platform: state
    entity_id:
    - sensor.bambu_p1s_print_status
    to: finish
    id: Completed
  - platform: state
    entity_id:
    - sensor.bambu_p1s_print_status
    to: failed
    id: Failed
  condition:
  - condition: template
    value_template: '{{ not trigger.from_state.state in ["unknown", "unavailable",
      "offline"] }}'
  action:
  - variables:
      time: '{{ as_timestamp(now()) | timestamp_custom("%-m/%-d/%Y %-I:%M %p") }}'
      model: '{{ states("sensor.bambu_p1s_task_name") | replace(".3mf","") | replace(".gcode","")
        }}'
      message: '{{ model }} {{ trigger.id | lower }} printing at {{ time }}'
  - parallel:
    - service: script.notify_mobile
      data:
        who: joshua
        title: 3D Print {{ trigger.id }}
        message: '{{ message }}'
        notification_icon: mdi:printer-3d
        color: '#16c344'
        icon_url: local/icons/bambu-lab.png
        image: /api/image_proxy/image.bambu_p1s_camera
        group: 3d-printer
        priority: high
        tag: 3d-printer
        url: lovelace/bambu
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: 3D Print {{ trigger.id }}
        message: '{{ message }}'
        camera: image.bambu_p1s_camera
  - alias: Wait for bed to cool
    wait_for_trigger:
    - platform: numeric_state
      entity_id:
      - sensor.bambu_p1s_bed_temperature
      below: 46
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
  - parallel:
    - service: script.notify_mobile
      data:
        who: joshua
        title: 3D Print {{ trigger.id }}
        message: Bed has cooled down. {{ message }}
        notification_icon: mdi:printer-3d
        color: '#16c344'
        icon_url: local/icons/bambu-lab.png
        image: /api/image_proxy/image.bambu_p1s_camera
        group: 3d-printer
        priority: high
        tag: 3d-printer
        url: lovelace/bambu
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: 3D Print {{ trigger.id }}
        message: Bed has cooled down, you can remove {{ model }}
        camera: image.bambu_p1s_camera
  - service: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.bambu_p1s_chamber_light
  mode: single
- id: '1714000511725'
  alias: "\U0001F4AC Bambu P1S Printer Error"
  description: Notify on printer errors.
  trigger:
  - platform: device
    device_id: b9e70ce89bcabdccae4b86eeae1918f2
    domain: bambu_lab
    type: event_printer_error
  condition: []
  action:
  - variables:
      title: P1S Issue Detected - {{ trigger.event.data.hms_code }}
      message: '{{ trigger.event.data.description }}'
  - parallel:
    - service: script.notify_mobile
      data:
        who: joshua
        title: '{{ title }}'
        message: '{{ message }}'
        notification_icon: mdi:printer-3d
        color: '#16c344'
        icon_url: local/icons/bambu-lab.png
        group: 3d-printer-error
        priority: high
        sticky: true
        url: lovelace/bambu
        actions:
        - action: URI
          title: Bambu Lab Wiki
          uri: '{{ trigger.event.data.url }}'
    - service: script.notify_hass_agent
      data:
        entity:
        - media_player.erebus
        title: '{{ title }}'
        message: '{{ message }}'
        camera: image.bambu_p1s_camera
        actions:
        - action: URI
          title: Bambu Lab Wiki
          uri: '{{ trigger.event.data.url }}'
  mode: single
- id: '1722871416531'
  alias: "\U0001F6A6 Garage Entry Light Switch Status"
  description: Set garage entry light switch LED when garage entry lock state has
    changed
  trigger:
  - platform: state
    entity_id:
    - lock.garage_entry
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''locked'' }}'
      sequence:
      - service: script.inovelli_blue_led
        data:
          target:
            entity_id: light.outside_garage_switch
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == ''unlocked'' }}'
      sequence:
      - service: script.inovelli_blue_led
        data:
          color: Red
          effect: Open/Close
          level: 40
          target:
            entity_id: light.outside_garage_switch
  mode: restart
- id: '1723130495380'
  alias: ⏯️ Samsung Soundbar Night Mode
  description: Sets night mode for the Samsung Soundbar
  trigger:
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_night_mode
    to: 'on'
    id: 'on'
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_night_mode
    to: 'off'
    id: 'off'
  condition:
  - condition: template
    value_template: '{{ not states("media_player.samsung_soundbar") in ["unknown",
      "unavailable"] }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - service: samsung_soundbar.set_night_mode
        metadata: {}
        data:
          enabled: true
        target:
          entity_id: media_player.samsung_soundbar
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - service: samsung_soundbar.set_night_mode
        metadata: {}
        data:
          enabled: false
        target:
          entity_id: media_player.samsung_soundbar
  mode: single
- id: '1723130728950'
  alias: ⏯️ Samsung Soundbar Voice Enhancer
  description: Sets voice enhancer for the Samsung Soundbar
  trigger:
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_voice_enhancer
    to: 'on'
    id: 'on'
  - platform: state
    entity_id:
    - input_boolean.samsung_soundbar_voice_enhancer
    to: 'off'
    id: 'off'
  condition:
  - condition: template
    value_template: '{{ not states("media_player.samsung_soundbar") in ["unknown",
      "unavailable"] }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - 'on'
      sequence:
      - service: samsung_soundbar.set_voice_enhancer
        metadata: {}
        data:
          enabled: true
        target:
          entity_id: media_player.samsung_soundbar
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - service: samsung_soundbar.set_voice_enhancer
        metadata: {}
        data:
          enabled: false
        target:
          entity_id: media_player.samsung_soundbar
  mode: single
