---
# HASS.Agent is a Windows-based client for Home Assistant, developed in .NET 6.
# It provides notifications, quick actions, commands, sensors and more.
#
# https://github.com/LAB02-Research/HASS.Agent
#
script:
  hass_publish_sensors:
    alias: '[HASS.Agent] Publish Sensors'
    description: 'Publishes user and Satellite sensors. This script requires the Hass Agent media player and notification integration.'
    icon: mdi:gesture-tap-button

    fields:
      entity:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        required: true
        selector:
          entity:
            multiple: true
            integration: hass_agent

    sequence:
      - alias: Set local variables for reuse in this script.
        variables:
          entity: '{{ entity | default([]) }}'
          entity_list: >
            {% set entities = namespace(names=[]) %}
            {% if entity %}
              {# Convert to a list #}
              {% if ',' in entity %}
                {% set entitynum = entity.split(',') | count %}
                {% for i in range(0, entitynum) %}
                  {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
                {% endfor %}
              {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
                {% set entities.names = entities.names + [entity | string | trim] %}
              {% else %}
                {% set entities.names = entity %}
              {% endif %}
            {% endif %}
            {{ entities.names | unique | list }}
      - alias: Loop through entity_list
        repeat:
          for_each: '{{ entity_list }}'
          sequence:
            - variables:
                computer: >-
                  {{ device_attr(repeat.item, 'name') | lower }}
            - action: button.press
              target:
                entity_id:
                  - 'button.{{ computer }}_publish_sensors'
                  - 'button.{{ computer }}_satellite_publish_sensors'

  hass_agent_launch:
    alias: '[HASS.Agent] Launch Application'
    description: 'Opens an application.'
    icon: mdi:application-outline

    fields:
      entity:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        required: true
        selector:
          entity:
            multiple: true
            integration: hass_agent
      command:
        name: 'Command'
        description: 'Application name or command line.'
        example: '"notepad++.exe" or "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"'
        required: true
        selector:
          text:

    sequence:
      - alias: Set local variables for reuse in this script.
        variables:
          entity: '{{ entity | default([]) }}'
          entity_list: >
            {% set entities = namespace(names=[]) %}
            {% if entity %}
              {# Convert to a list #}
              {% if ',' in entity %}
                {% set entitynum = entity.split(',') | count %}
                {% for i in range(0, entitynum) %}
                  {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
                {% endfor %}
              {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
                {% set entities.names = entities.names + [entity | string | trim] %}
              {% else %}
                {% set entities.names = entity %}
              {% endif %}
            {% endif %}
            {{ entities.names | unique | list }}
      - alias: Loop through entity_list
        repeat:
          for_each: '{{ entity_list }}'
          sequence:
            - variables:
                computer: >-
                  {{ device_attr(repeat.item, 'name') | upper }}
            - action: mqtt.publish
              data:
                topic: "homeassistant/button/{{ computer }}/launch/action"
                payload: '{{ command }}'

  hass_agent_launch_url:
    alias: '[HASS.Agent] Launch URL'
    description: 'Open a URL or file using the default application.'
    icon: mdi:web-plus

    fields:
      entity:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        required: true
        selector:
          entity:
            multiple: true
            integration: hass_agent
      url:
        name: 'URL'
        description: 'URL or file path.'
        example: '"steam://rungameid/1151640", or "https://hassagent.readthedocs.io"'
        required: true
        selector:
          text:

    sequence:
      - alias: Set local variables for reuse in this script.
        variables:
          entity: '{{ entity | default([]) }}'
          entity_list: >
            {% set entities = namespace(names=[]) %}
            {% if entity %}
              {# Convert to a list #}
              {% if ',' in entity %}
                {% set entitynum = entity.split(',') | count %}
                {% for i in range(0, entitynum) %}
                  {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
                {% endfor %}
              {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
                {% set entities.names = entities.names + [entity | string | trim] %}
              {% else %}
                {% set entities.names = entity %}
              {% endif %}
            {% endif %}
            {{ entities.names | unique | list }}
      - alias: Loop through entity_list
        repeat:
          for_each: '{{ entity_list }}'
          sequence:
            - variables:
                computer: >-
                  {{ device_attr(repeat.item, 'name') | upper }}
            - action: mqtt.publish
              data:
                topic: "homeassistant/button/{{ computer }}/launch_url/action"
                payload: '{{ url }}'

  notify_hass_agent:
    alias: '[Notify] HASS.Agent'
    description: 'Notify via HASS.Agent'
    icon: mdi:cellphone-message
    mode: parallel

    fields:
      entity:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        required: true
        selector:
          entity:
            multiple: true
            integration: hass_agent
            domain: media_player
      title:
        name: 'Title'
        example: 'Startup: Home Assistant is Up and Running!'
        selector:
          text:
      message:
        name: 'Message'
        example: 'Message text'
        required: true
        selector:
          text:
            multiline: true
      image:
        name: 'Image'
        example: 'local/image.png'
        selector:
          text:
      camera:
        name: 'Camera'
        description: 'Camera stream to attach.'
        example: 'camera.doorbell'
        selector:
          entity:
            domain: camera
      url:
        name: 'URL'
        description: 'Action when clicking the notification.'
        example: 'lovelace/main'
        selector:
          text:
      group:
        name: 'Message group'
        example: 'Home Assistant'
        selector:
          text:
      tag:
        name: 'Tag'
        description: 'Unique tag for the notification.'
        example: 'tag'
        selector:
          text:
      actions:
        name: 'Actions'
        description: 'A list of actions for actionable notifications.'
        selector:
          object:
      duration:
        name: 'Duration'
        description: 'The duration in seconds for which the notification will be displayed.'
        example: '5'
        selector:
          number:
            mode: box
            unit_of_measurement: seconds
            min: 1
            max: 36000
      importance:
        name: 'Notification Importance'
        description: 'Set the notification importance.'
        selector:
          select:
            mode: dropdown
            options:
              - high
              - default
              - low
              - min
      sticky:
        name: 'Sticky'
        description: 'Keep the notification from being dismissed when the user selects it.'
        selector:
          constant:
            value: 'true'
            label: Sticky

    sequence:
      - alias: Set local variables for reuse in this script.
        variables:
          entity: '{{ entity | default([]) }}'
          entity_list: >
            {% set entities = namespace(names=[]) %}
            {% if entity %}
              {# Convert to a list #}
              {% if ',' in entity %}
                {% set entitynum = entity.split(',') | count %}
                {% for i in range(0, entitynum) %}
                  {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
                {% endfor %}
              {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
                {% set entities.names = entities.names + [entity | string | trim] %}
              {% else %}
                {% set entities.names = entity %}
              {% endif %}
            {% endif %}
            {{ entities.names | unique | list }}
          url: '{{ url | default("lovelace/main", true) }}'
          group: '{{ group | default("Home Assistant") }}'
          tag: '{{ tag | default(none, true) }}'
          sticky: '{{ sticky | default(none, true) }}'

      - alias: Loop through entity_list
        repeat:
          for_each: '{{ entity_list }}'
          sequence:
            - variables:
                computer: >-
                  {{ device_attr(repeat.item, 'name') | lower }}
                notification_service: 'notify.{{ computer }}'
                image_path: >-
                  {%- if image is string -%}
                    {%- if image.startswith("http") -%}
                      {{ image }}
                    {%- else -%}
                      {{ state_attr("sensor.hass_config", "internal_url") }}/{{ image }}
                    {%- endif -%}
                  {%- endif -%}
                duration: '{{ duration | default(5) }}'

            - alias: Only send the message if the device is accepting messages.
              condition: template
              value_template: '{{ is_state("sensor." ~ computer ~ "_user_notification", "AcceptsNotifications") }}'

            - choose:
                - alias: Send camera stream.
                  conditions: '{{ camera is string }}'
                  sequence:
                    - action: '{{ notification_service }}'
                      data:
                        title: '{{ title }}'
                        message: '{{ message }}'
                        data:
                          image: '{{ state_attr("sensor.hass_config", "internal_url") }}{{ state_attr(camera, "entity_picture") }}'
                          clickAction: '{{ url }}'
                          importance: '{{ importance | default(none, true) }}'
                          group: '{{ group }}'
                          tag: '{{ tag }}'
                          sticky: '{{ sticky }}'
                          duration: '{{ duration }}'
                          actions: '{{ actions | default([], true) }}'

                - alias: Send an image.
                  conditions: '{{ image is string }}'
                  sequence:
                    - action: '{{ notification_service }}'
                      data:
                        title: '{{ title }}'
                        message: '{{ message }}'
                        data:
                          image: '{{ image_path }}'
                          clickAction: '{{ url }}'
                          importance: '{{ importance | default(none, true) }}'
                          group: '{{ group }}'
                          tag: '{{ tag }}'
                          sticky: '{{ sticky }}'
                          duration: '{{ duration }}'
                          actions: '{{ actions | default([], true) }}'

              # Send a basic notification message.
              default:
                - alias: Send a basic, link, or actionable notification message.
                  action: '{{ notification_service }}'
                  data:
                    title: '{{ title }}'
                    message: '{{ message }}'
                    data:
                      clickAction: '{{ url }}'
                      importance: '{{ importance | default(none, true) }}'
                      group: '{{ group }}'
                      tag: '{{ tag }}'
                      sticky: '{{ sticky }}'
                      duration: '{{ duration }}'
                      actions: '{{ actions | default([], true) }}'
