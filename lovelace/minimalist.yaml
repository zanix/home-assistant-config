button_card_templates:
  widget_icon_state:
    template:
      - icon_info_bg
      - ulm_language_variables
    label: |
      [[[
        var unit = entity.attributes.unit_of_measurement != null ? " " + entity.attributes.unit_of_measurement : ""
        if (entity.state == "on") {
          return variables.ulm_on;
        } else if (entity.state == "off") {
          return variables.ulm_off;
        } else if (entity.state == "unavailable") {
          return variables.ulm_unavailable;
        } else if (entity.state == "idle") {
          return variables.ulm_idle;
        } else if (entity.state == "open") {
          return variables.ulm_open;
        } else if (entity.state == "closed") {
          return variables.ulm_closed;
        } else {
          return entity.state + unit;
        }
      ]]]
    styles:
      card:
        - box-shadow: none
        - padding: 0px
        - background-color: rgba(var(--color-theme), 0.05)
        - border-radius: 14px
        - place-self: center
        - height: 42px
      img_cell:
        - background-color: none
      icon:
        - color: rgba(var(--color-theme),0.9)
      label:
        - align-self: end
        - justify-self: start
        - font-weight: bold
        - font-size: 14px
        - margin-left: 12px
        - filter: opacity(100%)
      name:
        - justify-self: start
        - align-self: start
        - font-weight: bolder
        - font-size: 12px
        - filter: opacity(40%)
        - margin-left: 12px
      grid:
        - grid-template-areas: '''i l'' ''i n'''
        - grid-template-columns: min-content auto
        - grid-template-rows: min-content min-content
    size: 20px
    color: var(--color-grey)
  car_icon:
    template:
      - icon_info
    tap_action:
      action: navigate
      navigation_path: subaru
    show_name: true
    show_last_changed: true
    name: '[[[ return variables.name ]]]'
    entity: '[[[ return entity.entity_id ]]]'
    icon: '[[[ return variables.icon ]]]'
    styles:
      icon:
        - color: rgba(var(--color-theme),0.9)
        - width: 20px
        - place-self: center
      custom_fields:
        tracker:
          - border-radius: 50%
          - position: absolute
          - left: 30px
          - top: '-2px'
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: |
              [[[
                if (states[variables.tracker].state == 'home') {
                  return 'rgba(var(--color-cyan), 1)';
                } else {
                  return 'rgba(var(--color-amber), 1)';
                }
              ]]]
    custom_fields:
      tracker: |
        [[[
          let icon = "mdi:road-variant";
          if (states[variables.tracker].state == 'home') {
            icon = "mdi:home-variant";
          }
          return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
        ]]]
  custom_card_car:
    variables:
      name: ''
      tap_action:
        action: more-info
      hold_action:
        action: none
    tap_action:
      action: >
        [[[ if (variables?.tap_action?.action) return
        variables.tap_action.action; else return 'none'; ]]]
      entity: '[[[ return variables.tap_action.entity; ]]]'
      navigation_path: '[[[ return variables.tap_action.navigation_path; ]]]'
      url_path: '[[[ return variables.tap_action.url_path; ]]]'
      service: '[[[ return variables.tap_action.service; ]]]'
      service_data: '[[[ return variables.tap_action.service_data; ]]]'
    show_icon: false
    show_name: false
    show_label: false
    styles:
      grid:
        - grid-template-areas: '"item1" "item2"'
        - grid-template-columns: 1fr
        - grid-template-rows: min-content min-content
        - row-gap: 12px
      card:
        - border-radius: var(--border-radius)
        - box-shadow: var(--box-shadow)
        - padding: 12px
    custom_fields:
      item1:
        card:
          type: custom:button-card
          template: car_icon
          entity: '[[[ return variables.tracker ]]]'
          variables:
            name: '[[[ return variables.name ]]]'
            icon: '[[[ return variables.icon ]]]'
            tracker: '[[[ return variables.tracker ]]]'
      item2:
        card:
          template: list_2_items
          type: custom:button-card
          custom_fields:
            item1:
              card:
                type: custom:button-card
                template: widget_icon_state
                entity: '[[[ return variables.item_1.entity ]]]'
                state_display: |
                  [[[
                    return parseFloat(states[variables.item_1.entity].state).toFixed(1);
                  ]]]
                name: |-
                  [[[
                    if (variables?.item_1?.name) {
                      return variables.item_1.name;
                    }
                    return states[variables.item_1.entity].friendly_name
                  ]]]
            item2:
              card:
                type: custom:button-card
                template: widget_icon_state
                entity: '[[[ return variables.item_2.entity ]]]'
                state_display: |
                  [[[
                    return parseFloat(states[variables.item_2.entity].state).toFixed(1);
                  ]]]
                name: |-
                  [[[
                    if (variables?.item_2?.name) {
                      return variables.item_2.name;
                    }
                    return states[variables.item_2.entity].friendly_name
                  ]]]
  amber_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-amber), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-amber),1)
      img_cell:
        - background-color: rgba(var(--color-amber), 0.2)
      label:
        - color: rgba(var(--color-amber-text),1)
      name:
        - color: rgba(var(--color-amber-text),1)
  amber_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-amber),1)
          img_cell:
            - background-color: rgba(var(--color-amber), 0.2)
          label:
            - color: rgba(var(--color-amber-text),1)
          name:
            - color: rgba(var(--color-amber-text),1)
        value: 'off'
  amber_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-amber), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-amber),1)
          img_cell:
            - background-color: rgba(var(--color-amber), 0.2)
          label:
            - color: rgba(var(--color-amber-text),1)
          name:
            - color: rgba(var(--color-amber-text),1)
        value: 'on'
  blue-grey_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-blue-grey), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-blue-grey),1)
      img_cell:
        - background-color: rgba(var(--color-blue-grey), 0.2)
      label:
        - color: rgba(var(--color-blue-grey-text),1)
      name:
        - color: rgba(var(--color-blue-grey-text),1)
  blue-grey_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-blue-grey),1)
          img_cell:
            - background-color: rgba(var(--color-blue-grey), 0.2)
          label:
            - color: rgba(var(--color-blue-grey-text),1)
          name:
            - color: rgba(var(--color-blue-grey-text),1)
        value: 'off'
  blue-grey_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-blue-grey), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-blue-grey),1)
          img_cell:
            - background-color: rgba(var(--color-blue-grey), 0.2)
          label:
            - color: rgba(var(--color-blue-grey-text),1)
          name:
            - color: rgba(var(--color-blue-grey-text),1)
        value: 'on'
  brown_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-brown), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-brown),1)
      img_cell:
        - background-color: rgba(var(--color-brown), 0.2)
      label:
        - color: rgba(var(--color-brown-text),1)
      name:
        - color: rgba(var(--color-brown-text),1)
  brown_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-brown),1)
          img_cell:
            - background-color: rgba(var(--color-brown), 0.2)
          label:
            - color: rgba(var(--color-brown-text),1)
          name:
            - color: rgba(var(--color-brown-text),1)
        value: 'off'
  brown_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-brown), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-brown),1)
          img_cell:
            - background-color: rgba(var(--color-brown), 0.2)
          label:
            - color: rgba(var(--color-brown-text),1)
          name:
            - color: rgba(var(--color-brown-text),1)
        value: 'on'
  cyan_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-cyan), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-cyan),1)
      img_cell:
        - background-color: rgba(var(--color-cyan), 0.2)
      label:
        - color: rgba(var(--color-cyan-text),1)
      name:
        - color: rgba(var(--color-cyan-text),1)
  cyan_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-cyan),1)
          img_cell:
            - background-color: rgba(var(--color-cyan), 0.2)
          label:
            - color: rgba(var(--color-cyan-text),1)
          name:
            - color: rgba(var(--color-cyan-text),1)
        value: 'off'
  cyan_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-cyan), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-cyan),1)
          img_cell:
            - background-color: rgba(var(--color-cyan), 0.2)
          label:
            - color: rgba(var(--color-cyan-text),1)
          name:
            - color: rgba(var(--color-cyan-text),1)
        value: 'on'
  deep-orange_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-deep-orange), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-deep-orange),1)
      img_cell:
        - background-color: rgba(var(--color-deep-orange), 0.2)
      label:
        - color: rgba(var(--color-deep-orange-text),1)
      name:
        - color: rgba(var(--color-deep-orange-text),1)
  deep-orange_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-deep-orange),1)
          img_cell:
            - background-color: rgba(var(--color-deep-orange), 0.2)
          label:
            - color: rgba(var(--color-deep-orange-text),1)
          name:
            - color: rgba(var(--color-deep-orange-text),1)
        value: 'off'
  deep-orange_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-deep-orange), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-deep-orange),1)
          img_cell:
            - background-color: rgba(var(--color-deep-orange), 0.2)
          label:
            - color: rgba(var(--color-deep-orange-text),1)
          name:
            - color: rgba(var(--color-deep-orange-text),1)
        value: 'on'
  deep-purple_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-deep-purple), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-deep-purple),1)
      img_cell:
        - background-color: rgba(var(--color-deep-purple), 0.2)
      label:
        - color: rgba(var(--color-deep-purple-text),1)
      name:
        - color: rgba(var(--color-deep-purple-text),1)
  deep-purple_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-deep-purple),1)
          img_cell:
            - background-color: rgba(var(--color-deep-purple), 0.2)
          label:
            - color: rgba(var(--color-deep-purple-text),1)
          name:
            - color: rgba(var(--color-deep-purple-text),1)
        value: 'off'
  deep-purple_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-deep-purple), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-deep-purple),1)
          img_cell:
            - background-color: rgba(var(--color-deep-purple), 0.2)
          label:
            - color: rgba(var(--color-deep-purple-text),1)
          name:
            - color: rgba(var(--color-deep-purple-text),1)
        value: 'on'
  indigo_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-indigo), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-indigo),1)
      img_cell:
        - background-color: rgba(var(--color-indigo), 0.2)
      label:
        - color: rgba(var(--color-indigo-text),1)
      name:
        - color: rgba(var(--color-indigo-text),1)
  indigo_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-indigo),1)
          img_cell:
            - background-color: rgba(var(--color-indigo), 0.2)
          label:
            - color: rgba(var(--color-indigo-text),1)
          name:
            - color: rgba(var(--color-indigo-text),1)
        value: 'off'
  indigo_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-indigo), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-indigo),1)
          img_cell:
            - background-color: rgba(var(--color-indigo), 0.2)
          label:
            - color: rgba(var(--color-indigo-text),1)
          name:
            - color: rgba(var(--color-indigo-text),1)
        value: 'on'
  light-blue_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-light-blue), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-light-blue),1)
      img_cell:
        - background-color: rgba(var(--color-light-blue), 0.2)
      label:
        - color: rgba(var(--color-light-blue-text),1)
      name:
        - color: rgba(var(--color-light-blue-text),1)
  light-blue_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-light-blue),1)
          img_cell:
            - background-color: rgba(var(--color-light-blue), 0.2)
          label:
            - color: rgba(var(--color-light-blue-text),1)
          name:
            - color: rgba(var(--color-light-blue-text),1)
        value: 'off'
  light-blue_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-light-blue), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-light-blue),1)
          img_cell:
            - background-color: rgba(var(--color-light-blue), 0.2)
          label:
            - color: rgba(var(--color-light-blue-text),1)
          name:
            - color: rgba(var(--color-light-blue-text),1)
        value: 'on'
  light-green_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-light-green), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-light-green),1)
      img_cell:
        - background-color: rgba(var(--color-light-green), 0.2)
      label:
        - color: rgba(var(--color-light-green-text),1)
      name:
        - color: rgba(var(--color-light-green-text),1)
  light-green_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-light-green),1)
          img_cell:
            - background-color: rgba(var(--color-light-green), 0.2)
          label:
            - color: rgba(var(--color-light-green-text),1)
          name:
            - color: rgba(var(--color-light-green-text),1)
        value: 'off'
  light-green_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-light-green), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-light-green),1)
          img_cell:
            - background-color: rgba(var(--color-light-green), 0.2)
          label:
            - color: rgba(var(--color-light-green-text),1)
          name:
            - color: rgba(var(--color-light-green-text),1)
        value: 'on'
  lime_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-lime), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-lime),1)
      img_cell:
        - background-color: rgba(var(--color-lime), 0.2)
      label:
        - color: rgba(var(--color-lime-text),1)
      name:
        - color: rgba(var(--color-lime-text),1)
  lime_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-lime),1)
          img_cell:
            - background-color: rgba(var(--color-lime), 0.2)
          label:
            - color: rgba(var(--color-lime-text),1)
          name:
            - color: rgba(var(--color-lime-text),1)
        value: 'off'
  lime_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-lime), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-lime),1)
          img_cell:
            - background-color: rgba(var(--color-lime), 0.2)
          label:
            - color: rgba(var(--color-lime-text),1)
          name:
            - color: rgba(var(--color-lime-text),1)
        value: 'on'
  orange_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-orange), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-orange),1)
      img_cell:
        - background-color: rgba(var(--color-orange), 0.2)
      label:
        - color: rgba(var(--color-orange-text),1)
      name:
        - color: rgba(var(--color-orange-text),1)
  orange_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-orange),1)
          img_cell:
            - background-color: rgba(var(--color-orange), 0.2)
          label:
            - color: rgba(var(--color-orange-text),1)
          name:
            - color: rgba(var(--color-orange-text),1)
        value: 'off'
  orange_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-orange), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-orange),1)
          img_cell:
            - background-color: rgba(var(--color-orange), 0.2)
          label:
            - color: rgba(var(--color-orange-text),1)
          name:
            - color: rgba(var(--color-orange-text),1)
        value: 'on'
  teal_no_state:
    styles:
      card:
        - background-color: rgba(var(--color-background-teal), var(--opacity-bg))
      icon:
        - color: rgba(var(--color-teal),1)
      img_cell:
        - background-color: rgba(var(--color-teal), 0.2)
      label:
        - color: rgba(var(--color-teal-text),1)
      name:
        - color: rgba(var(--color-teal-text),1)
  teal_off:
    state:
      - id: 'off'
        styles:
          icon:
            - color: rgba(var(--color-teal),1)
          img_cell:
            - background-color: rgba(var(--color-teal), 0.2)
          label:
            - color: rgba(var(--color-teal-text),1)
          name:
            - color: rgba(var(--color-teal-text),1)
        value: 'off'
  teal_on:
    state:
      - id: 'on'
        styles:
          card:
            - background-color: rgba(var(--color-background-teal), var(--opacity-bg))
          icon:
            - color: rgba(var(--color-teal),1)
          img_cell:
            - background-color: rgba(var(--color-teal), 0.2)
          label:
            - color: rgba(var(--color-teal-text),1)
          name:
            - color: rgba(var(--color-teal-text),1)
        value: 'on'
  cool_on:
    state:
      - id: cool
        styles:
          icon:
            - color: rgba(var(--color-blue),1)
          img_cell:
            - background-color: rgba(var(--color-blue), 0.2)
          label:
            - color: rgba(var(--color-blue-text),1)
          name:
            - color: rgba(var(--color-blue-text),1)
        value: cool
  heat_on:
    state:
      - id: heat
        styles:
          icon:
            - color: rgba(var(--color-red),1)
          img_cell:
            - background-color: rgba(var(--color-red), 0.2)
          label:
            - color: rgba(var(--color-red-text),1)
          name:
            - color: rgba(var(--color-red-text),1)
        value: heat
  media_on:
    state:
      - id: playing
        styles:
          icon:
            - color: rgba(var(--color-pink),1)
          img_cell:
            - background-color: rgba(var(--color-pink), 0.2)
          label:
            - color: rgba(var(--color-pink-text),1)
          name:
            - color: rgba(var(--color-pink-text),1)
        value: playing
      - id: paused
        styles:
          icon:
            - color: rgba(var(--color-cyan),1)
          img_cell:
            - background-color: rgba(var(--color-cyan), 0.2)
          label:
            - color: rgba(var(--color-cyan-text),1)
          name:
            - color: rgba(var(--color-cyan-text),1)
        value: paused
      - id: standby
        styles:
          icon:
            - color: rgba(var(--color-blue-grey),1)
          img_cell:
            - background-color: rgba(var(--color-blue-grey), 0.2)
          label:
            - color: rgba(var(--color-blue-grey-text),1)
          name:
            - color: rgba(var(--color-blue-grey-text),1)
        value: standby
      - id: 'on'
        styles:
          icon:
            - color: rgba(var(--color-blue-grey),1)
          img_cell:
            - background-color: rgba(var(--color-blue-grey), 0.2)
          label:
            - color: rgba(var(--color-blue-grey-text),1)
          name:
            - color: rgba(var(--color-blue-grey-text),1)
        value: 'on'
  custom_card_apexcharts:
    variables:
      entity_1:
        entity_id: null
        icon: '[[[ return entity.attributes.icon ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
        color: |
          [[[
            var colors = ['yellow', 'blue', 'red', 'green'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_2:
        entity_id: null
        icon: '[[[ return entity.attributes.icon ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
        color: |
          [[[
            var colors = ['yellow', 'blue', 'red', 'green'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_3:
        entity_id: null
        icon: '[[[ return entity.attributes.icon ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
        color: |
          [[[
            var colors = ['yellow', 'blue', 'red','green'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
    color: auto
    variable: spin
    spin: false
    show_name: false
    show_state: false
    show_label: false
    show_icon: false
    show_last_changed: false
    show_entity_picture: false
    aspect_ratio: 2/1
    styles:
      grid:
        - grid-template-areas: '"item1 radial" "item2 radial" "item3 radial"'
        - grid-template-columns: 35% 65%
        - grid-template-rows: 1fr 1fr 1fr
      card:
        - border-radius: var(--border-radius)
        - box-shadow: var(--box-shadow)
        - padding: 0px
    custom_fields:
      item1:
        card:
          type: custom:button-card
          entity: '[[[ return variables.entity_1.entity_id ]]]'
          icon: '[[[ return variables.entity_1.icon ]]]'
          name: '[[[ return variables.entity_1.name ]]]'
          tap_action:
            action: more-info
          template:
            - card_generic_swap
          styles:
            icon:
              - color: '[[[ return `rgba(${variables.entity_1.color}, 1)`;]]]'
            img_cell:
              - background-color: '[[[ return `rgba(${variables.entity_1.color}, 0.20)`;]]]'
            card:
              - box-shadow: none
              - border-radius: none
              - padding-top: 1px
              - padding-bottom: 1px
      item2:
        card:
          type: custom:button-card
          entity: '[[[ return variables.entity_2.entity_id ]]]'
          icon: '[[[ return variables.entity_2.icon ]]]'
          name: '[[[ return variables.entity_2.name ]]]'
          tap_action:
            action: more-info
          template:
            - card_generic_swap
          styles:
            icon:
              - color: '[[[ return `rgba(${variables.entity_2.color}, 1)`;]]]'
            img_cell:
              - background-color: '[[[ return `rgba(${variables.entity_2.color}, 0.20)`;]]]'
            card:
              - box-shadow: none
              - border-radius: none
              - padding-top: 1px
              - padding-bottom: 1px
      item3:
        card:
          type: custom:button-card
          entity: '[[[ return variables.entity_3.entity_id ]]]'
          icon: '[[[ return variables.entity_3.icon ]]]'
          name: '[[[ return variables.entity_3.name ]]]'
          tap_action:
            action: more-info
          template:
            - card_generic_swap
          styles:
            icon:
              - color: '[[[ return `rgba(${variables.entity_3.color}, 1)`;]]]'
            img_cell:
              - background-color: '[[[ return `rgba(${variables.entity_3.color}, 0.20)`;]]]'
            card:
              - box-shadow: none
              - border-radius: none
              - padding-top: 1px
              - padding-bottom: 1px
      radial:
        card:
          type: custom:apexcharts-card
          graph_span: '[[[ return variables.graph_span ]]]'
          chart_type: '[[[ return variables.chart_type ]]]'
          style: |
            ha-card {
              border-radius: none;
              box-shadow: none;
              padding-left: 10px;
              padding-bottom: 0px;
            }
          header:
            show: false
          apex_config:
            title:
              floating: false
              align: top
              style:
                fontSize: 2px
                fontWeight: bold
            chart:
              foreColor: rgb(148,148,148)
              offsetY: 5
            legend:
              show: false
          series:
            - entity: '[[[ return variables.entity_1.entity_id ]]]'
              name: '[[[ return variables.entity_1_name ]]]'
              color: '[[[ return `rgb(${variables.entity_1.color})`;]]]'
              max: '[[[ return variables.entity_1.max_value ]]]'
            - entity: '[[[ return variables.entity_2.entity_id ]]]'
              name: '[[[ return variables.entity_2_name ]]]'
              color: '[[[ return `rgb(${variables.entity_2.color})`;]]]'
              max: '[[[ return variables.entity_2.max_value ]]]'
            - entity: '[[[ return variables.entity_3.entity_id ]]]'
              name: '[[[ return variables.entity_3_name ]]]'
              color: '[[[ return `rgb(${variables.entity_3.color})`;]]]'
              max: '[[[ return variables.entity_3.max_value ]]]'
  custom_card_mpse_printer:
    show_icon: false
    show_name: false
    show_label: false
    styles:
      card:
        - border-radius: var(--border-radius)
        - box-shadow: var(--box-shadow)
        - padding: 0px
      grid:
        - grid-template-areas: '''item1'' ''item2'' ''item3'' ''item4'' ''item5'''
        - grid-template-columns: 1fr
        - grid-template-rows: min-content
    custom_fields:
      item1:
        card:
          entity: '[[[ return entity.entity_id ]]]'
          name: '[[[ return variables.ulm_card_printer_name ]]]'
          label: '[[[ return entity.state; ]]]'
          template:
            - icon_info
            - custom_card_mpse_printer_blue
          styles:
            card:
              - padding: 12px
          type: custom:button-card
      item2:
        card:
          type: custom:bar-card
          height: 20px
          positions:
            name: 'off'
            value: inside
            icon: 'off'
            indicator: 'off'
            minmax: 'off'
          color: black
          entities:
            - entity: '[[[ return variables.ulm_card_printer_black_name ]]]'
          style: |
            bar-card-currentbar{
              border: 0.01rem solid rgba(var(--color-theme),.4);
            }
            bar-card-backgroundbar{
              display: none;
            }
            bar-card-name{
              width: 2rem;
              margin-right: 40px !important;
            }
            bar-card-value{
              width: 2rem;
              margin-left: 40px !important;
              justify-content: center;
              display: flex;
              color: grey;
            }
            bar-card-background{
              margin: 4px 0 4px 0 !important;
              text-align: initial;
            }
            ha-card{
              --bar-card-border-radius: 5px;
              border-radius: 0px;
              box-shadow: none;
            }
            #states{
              padding: 0 16px;
            }
      item3:
        card:
          type: custom:bar-card
          height: 20px
          positions:
            name: 'off'
            value: inside
            icon: 'off'
            indicator: 'off'
            minmax: 'off'
          color: rgb(250,255,0)
          entities:
            - entity: '[[[ return variables.ulm_card_printer_yellow_name ]]]'
          style: |
            bar-card-currentbar{
              border: 0.01rem solid rgba(var(--color-theme),.4);
            }
            bar-card-backgroundbar{
              display: none;
            }
              bar-card-name{
              width: 2rem;
              margin-right: 40px !important;
            }
            bar-card-value{
              width: 2rem;
              margin-left: 40px !important;
              justify-content: center;
              display: flex;
              color: grey;
            }
            bar-card-background{
              margin: 4px 0 4px 0 !important;
              text-align: initial;
            }
            ha-card{
              --bar-card-border-radius: 5px;
              border-radius: 0px;
              box-shadow: none;
            }
            #states{
              padding: 0 16px;
            }
      item4:
        card:
          type: custom:bar-card
          height: 20px
          positions:
            name: 'off'
            value: inside
            icon: 'off'
            indicator: 'off'
            minmax: 'off'
          color: rgb(248,0,255)
          entities:
            - entity: '[[[ return variables.ulm_card_printer_magenta_name ]]]'
          style: |
            bar-card-currentbar{
              border: 0.01rem solid rgba(var(--color-theme),.4);
            }
            bar-card-backgroundbar{
              display: none;
            }
            bar-card-name{
              width: 2rem;
              margin-right: 40px !important;
            }
            bar-card-value{
              width: 2rem;
              margin-left: 40px !important;
              justify-content: center;
              display: flex;
              color: grey;
            }
            bar-card-background{
              margin: 4px 0 4px 0 !important;
              text-align: initial;
            }
            ha-card{
              --bar-card-border-radius: 5px;
              border-radius: 0px;
              box-shadow: none;
            }
            #states{
              padding: 0 16px;
            }
      item5:
        card:
          type: custom:bar-card
          height: 20px
          positions:
            name: 'off'
            value: inside
            icon: 'off'
            indicator: 'off'
            minmax: 'off'
          color: rgb(0,255,255)
          entities:
            - entity: '[[[ return variables.ulm_card_printer_cyan_name ]]]'
          style: |
            bar-card-currentbar{
              border: 0.01rem solid rgba(var(--color-theme),.4);
            }
            bar-card-backgroundbar{
              display: none;
            }
            bar-card-name{
              width: 2rem;
              margin-right: 40px !important;
            }
            bar-card-value{
              width: 2rem;
              margin-left: 40px !important;
              justify-content: center;
              display: flex;
              color: grey;
            }
              bar-card-background{
              margin: 4px 0 4px 0 !important;
              text-align: initial;
            }
            ha-card{
              --bar-card-border-radius: 5px;
              border-radius: 0px;
              box-shadow: none;
            }
            #states{
              padding: 0 16px 16px 16px;
            }
  custom_card_mpse_printer_blue:
    state:
      - styles:
          icon:
            - color: rgba(var(--color-blue),1)
          label:
            - color: rgba(var(--color-blue-text),1)
          name:
            - color: rgba(var(--color-blue-text),1)
          img_cell:
            - background-color: rgba(var(--color-blue), 0.2)
          card:
            - background-color: rgba(var(--color-background-blue), var(--opacity-bg))
        operator: template
        value: |
          [[[
            return entity.state!="idle" ? true : false
          ]]]
  ulm_language_variables:
    variables:
      ulm_on: "on"
      ulm_off: "off"
      ulm_open: "open"
      ulm_closed: "closed"
      ulm_unavailable: "unavailable"
      ulm_standby: "standby"
      ulm_idle: "idle"
      ulm_currency: "$"
      ulm_auto: "Auto"
      ulm_heat: "Heat"
      ulm_cool: "Cool"
      ulm_dry: "Dry"
      ulm_fan_only: "Fan only"
      ulm_heat_cool: "Heat/Cool"
      ulm_heating: "Heating"
      ulm_cooling: "Cooling"
      ulm_person_state_home: "home"
      ulm_person_state_away: "away"
      ulm_person_state_not_home: "away"
      ulm_device_state_home: "Online"
      ulm_device_state_not_home: "Offline"
      ulm_popups_back: "Back"
      ulm_popups_toggle: "Toggle"
      ulm_popups_statistics: "Statistics"
      ulm_popups_history: "History"
      ulm_popups_brightness: "Brightness"
      ulm_popups_color_temp: "Color temp"
      ulm_popups_color: "Color"
      ulm_unknown: "unknown"
      ulm_alarm_armed_home: "Armed home"
      ulm_alarm_armed_away: "Armed away"
      ulm_alarm_armed_night: "Armed night"
      ulm_alarm_disarmed: "Disarmed"
      ulm_alarm_arming: "Arming"
      ulm_alarm_triggered: "TRIGGERED"
      ulm_playing: "Playing"
      ulm_paused: "Paused"
      ulm_updates_available: "Updates available!"
      ulm_no_updates_available: "No updates available"
      ulm_morning: "Good morning"
      ulm_afternoon: "Good afternoon"
      ulm_evening: "Good evening"
      ulm_hello: "Hello"
      ulm_cleaning: "Cleaning"
      ulm_returning: "Returning"
      ulm_docked: "Docked"
      ulm_mopping: "Mopping"
  popup_item4_back_toggle:
    template: "popup_list_items"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "popup_button_back"
      item2:
        card:
          type: "custom:button-card"
          template: "popup_button_power"
          entity: "[[[ return variables.popup_item4_back_toggle_entity ]]]"
  popup_thermostat:
    hold_action:
      action: "fire-dom-event"
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_thermostat_temperature"
          variables:
            ulm_popup_thermostat_entity: "[[[ return entity.entity_id ]]]"
  popup_media_player_volume:
    template: "popup_media_player_infos"
    styles:
      grid:
        - grid-template-areas: "'header' 'content2' 'buttons' 'footer'"
        - grid-template-rows: "16vh 52vh 14vh 14vh;"
        - grid-template-columns: "1fr"
      custom_fields:
        content1:
          - display: "none"
        content2:
          - display: "block"
          - align-self: "start"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content2" "buttons" "footer" !important;
          grid-template-rows: 16vh 52vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content1 {
          display: none;
        }
    custom_fields:
      buttons:
        card:
          type: "custom:button-card"
          template: "list_2_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_playing"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_media_player_infos"
                      variables:
                        ulm_popup_media_player_entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
            item2:
              card:
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_volume"
  popup_thermostat_temperature:
    styles:
      grid:
        - grid-template-areas: "'header' 'content1' 'buttons' 'footer'"
        - grid-template-rows: "16vh 42vh 14vh 14vh"
        - grid-template-columns: "1fr"
        - column-gap: "30px"
      card:
        - background: "var(--primary-background-color)"
        - box-shadow: "none"
        - padding: "4%"
      custom_fields:
        header:
          - align-self: "start"
        content1:
          - align-self: "center"
        buttons:
          - align-self: "start"
          - width: "50%"
          - margin: "0 auto"
        footer:
          - align-self: "end"
          - margin-top: "25px"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-rows: 16vh 52vh 14vh 14vh !important;
        }
        #buttons {
          width: 100% !important;
        }
    custom_fields:
      header:
        card:
          type: "custom:button-card"
          template: "popup_header"
          entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
      content1:
        card:
          type: "thermostat"
          entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
          card_mod:
            style: |
              ha-card {
                background: none !important;
                box-shadow: none !important;
                padding: 0 0 20px 0 !important;
              }
              .more-info {
                display: none;
              }
              #info {
                display: none;
              }
              .type-thermostat {
                --mode-color: rgb(var(--color-blue)) !important;
              }
      buttons:
        card:
          type: "custom:button-card"
          styles:
            grid:
              - grid-template-areas: >
                  [[[
                        var areas = [];
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("auto")) {
                            areas.push("auto");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat")) {
                            areas.push("heat");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("cool")) {
                            areas.push("cool");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("dry")) {
                            areas.push("dry");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("fan_only")) {
                            areas.push("fan_only");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat_cool")) {
                            areas.push("heat_cool");
                        }
                        return "\"" + areas.join(" ") + "\"";
                  ]]]
              - grid-template-columns: >
                  [[[
                        var columns = [];
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("auto")) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat")) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("cool")) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("dry")) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("fan_only")) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat_cool")) {
                            columns.push("1fr");
                        }
                        return columns.join(" ");
                  ]]]
              - grid-template-rows: "min-content"
              - justify-items: "center"
            card:
              - box-shadow: "none"
              - padding: "0px"
              - border-radius: "21px"
              - background-color: "rgba(var(--color-theme),0.1)"
            custom_fields:
              auto:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("auto")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              heat:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              cool:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("cool")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              dry:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("dry")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              fan_only:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("fan_only")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              heat_cool:
                - display: >
                    [[[
                      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes("heat_cool")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
          custom_fields:
            auto:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:autorenew"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "auto"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "auto"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
            heat:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:fire"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "heat"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "heat"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
            cool:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:snowflake"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "cool"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "cool"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
            dry:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:water"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "dry"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "dry"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
            fan_only:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:fan"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "fan_only"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "fan_only"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
            heat_cool:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                template: "widget_icon"
                icon: "mdi:sun-snowflake"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
                    hvac_mode: "heat_cool"
                styles:
                  card:
                    - background-color: "transparent"
                    - height: "42px"
                    - width: "42px"
                    - border-radius: "50%"
                    - box-shadow: "none"
                state:
                  - value: "heat_cool"
                    styles:
                      card:
                        - background-color: "var(--card-background-color)"
                        - box-shadow: "var( --ha-card-box-shadow)"
                        - transform: "scale(0.95)"
      footer:
        card:
          type: "custom:button-card"
          template: "popup_list_items"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "popup_button_back"
            item2:
              card:
                type: "custom:button-card"
                template: "popup_button_power"
                entity: "[[[ return variables.ulm_popup_thermostat_entity ]]]"
  popup_media_player:
    hold_action:
      action: "fire-dom-event"
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_media_player_infos"
          variables:
            ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
  popup_light_color:
    template: "popup_light_brightness"
    styles:
      grid:
        - grid-template-areas: "'header' 'content3' 'buttons' 'footer'"
        - grid-template-rows: "16vh 52vh 14vh 14vh;"
        - grid-template-columns: "1fr"
      custom_fields:
        content1:
          - display: "none"
        content2:
          - display: "none"
        content3:
          - display: "block"
          - align-self: "center"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content3" "buttons" "footer" !important;
          grid-template-rows: 16vh 52vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content1 {
          display: none;
        }
        #content2 {
          display: none;
        }
    custom_fields:
      buttons:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                icon: "mdi:lightbulb-on"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_brightness"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_brightness"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
            item2:
              card:
                icon: "mdi:sun-thermometer-outline"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_color_temp"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_color_temp"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
            item3:
              card:
                icon: "mdi:palette"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_color"
  popup_light_color_temp:
    template: "popup_light_brightness"
    styles:
      grid:
        - grid-template-areas: "'header' 'content2' 'buttons' 'footer'"
        - grid-template-rows: "16vh 52vh 14vh 14vh;"
        - grid-template-columns: "1fr"
      custom_fields:
        content1:
          - display: "none"
        content2:
          - display: "block"
          - align-self: "center"
        content3:
          - display: "none"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content2" "buttons" "footer" !important;
          grid-template-rows: 16vh 52vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content1 {
          display: none;
        }
        #content3 {
          display: none;
        }
    custom_fields:
      buttons:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                icon: "mdi:lightbulb-on"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_brightness"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_brightness"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
            item2:
              card:
                icon: "mdi:sun-thermometer-outline"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_color_temp"
            item3:
              card:
                icon: "mdi:palette"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_color"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_color"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
  popup_light:
    hold_action:
      action: "fire-dom-event"
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_light_brightness"
          variables:
            ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
  popup_media_player_infos:
    triggers_update: "all"
    styles:
      grid:
        - grid-template-areas: "'header' 'content1' 'footer'"
        - grid-template-rows: "14vh 56vh 16vh"
        - row-gap: "2.5%"
      card:
        - background: "var(--primary-background-color)"
        - box-shadow: "none"
        - padding: "4%"
        - border-radius: "none"
        - height: "100vh"
      custom_fields:
        header:
          - align-self: "start"
        content1:
          - align-self: "center"
          - background-color: "var(--card-background-color)"
          - border-radius: "var(--border-radius)"
          - box-shadow: "var(--box-shadow)"
          - width: "100%"
          - max-width: "400px"
          - justify-self: "center"
        content2:
          - display: "none"
        buttons:
          - display: "none"
        footer:
          - align-self: "end"
          - margin-top: "25px"
          - padding-bottom: "4%"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content1" "footer" !important;
          grid-template-rows: 14vh 56vh 16vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content2 {
          display: none;
        }
      }
    custom_fields:
      header:
        card:
          type: "custom:button-card"
          template: "popup_header"
          entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
      content1:
        card:
          type: "custom:button-card"
          show_icon: false
          show_name: false
          show_label: false
          styles:
            grid:
              - grid-template-areas: "'app' 'picture' 'media' 'control' 'bar'"
            card:
              - background-blend-mode: "soft-light"
              - background: |
                  [[[
                    if(hass.themes.darkMode){
                      return states[variables.ulm_popup_media_player_entity].state == 'playing' && states[variables.ulm_popup_media_player_entity].attributes.entity_picture != null
                      ? ' center / cover url(' + states[variables.ulm_popup_media_player_entity].attributes.entity_picture + '), radial-gradient(circle, #333333 90%, grey 105% ,#333333 110%)'
                      : ''
                    }else{
                      return states[variables.ulm_popup_media_player_entity].state == 'playing' && states[variables.ulm_popup_media_player_entity].attributes.entity_picture != null
                      ? ' center / cover url(' + states[variables.ulm_popup_media_player_entity].attributes.entity_picture + '), radial-gradient(circle, white 5%, grey 100% ,white 110%)'
                      : ''
                    }
                  ]]]
              - box-shadow: "none"
              - padding: "1%"
            custom_fields:
              app:
                - justify-self: "start"
                - align-self: "start"
              picture:
                - margin-left: "auto"
                - margin-right: "auto"
                - background: "none"
                - box-shadow: "none"
              media:
                - background: "none"
                - box-shadow: "none"
                - width: "calc(100vw - 60px)"
                - max-width: "370px"
              control:
                - background: "none"
                - box-shadow: "none"
              bar:
                - align-self: "start"
                - background: "none"
                - box-shadow: "none"
                - margin-bottom: "12px"
          custom_fields:
            app:
              card:
                type: "custom:button-card"
                template: "popup_button_app"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
            picture:
              card:
                type: "custom:mini-media-player"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                artwork: "full-cover"
                hide:
                  name: true
                  icon: true
                  info: true
                  volume: true
                  progress: true
                  controls: true
                  source: true
                  power: true
                card_mod:
                  style: |
                    ha-card{
                      width: 25vh !important;
                      height: 25vh !important;
                    }
            media:
              card:
                type: "custom:mini-media-player"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                hide:
                  runtime: false
                  icon: true
                  volume: true
                  controls: true
                  source: true
                  power: true
                  name: true
                card_mod:
                  style: |
                    ha-card {
                      background: none !important;
                      box-shadow: none !important;
                    }
                    .mmp__bg{
                      background: none !important;
                    }
                    .entity__info{
                      width: 100% !important;
                      text-align: center !important;
                    }
                    .entity__info__media {
                      font-weight: bold !important;
                      font-size: 14px !important;
                      color: var(--primary-text-color) !important;
                    }
                    :host {
                      --paper-progress-active-color: blue !important;
                    }
            control:
              card:
                type: "custom:mini-media-player"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                hide:
                  controls: true
                  icon: true
                  name: true
                  info: true
                  volume: true
                  power: true
                  progress: true
                  source: true
                card_mod:
                  style: |
                    ha-card {
                      background: none !important;
                      box-shadow: none !important;
                      width: 50% !important;
                      margin-left: 6px !important;
                      margin-right: 6px !important;
                    }
                    .mmp__bg{
                      background: none !important;
                    }
            bar:
              card:
                type: "custom:button-card"
                template: "list_2_items"
                variables:
                  ulm_popup_media_player_entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                styles:
                  card:
                    - background: "none"
                    - box-shadow: "none"
                    - padding: "0px"
                  grid:
                    - display: "flex"
                    - justify-content: "center"
                custom_fields:
                  item1:
                    card:
                      type: "custom:button-card"
                      template: "popup_chip_controls"
                      variables:
                        ulm_popup_media_player_entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                      styles:
                        card:
                          - background: "none"
                          - box-shadow: "none"
                          - padding: "0px"
                  item2:
                    card:
                      type: "custom:button-card"
                      template: "popup_chip_volume"
                      entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
                      styles:
                        card:
                          - background: "none"
                          - box-shadow: "none"
                          - padding: "0"
                      tap_action:
                        action: "fire-dom-event"
                        browser_mod:
                          command: "popup"
                          hide_header: true
                          card:
                            type: "custom:button-card"
                            template: "popup_media_player_volume"
                            variables:
                              ulm_popup_media_player_entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
      footer:
        card:
          type: "custom:button-card"
          template: "popup_list_items"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "popup_button_back"
            item2:
              card:
                type: "custom:button-card"
                template: "popup_button_power"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
            item3:
              card:
                type: "custom:button-card"
                template: "popup_button_source"
                entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
      content2:
        card:
          type: "custom:my-slider"
          entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
          radius: "20px"
          rotate: 270
          containerHeight: "320px"
          width: "250px"
          height: "100px"
          top: "100px"
          left: "17%"
          thumbHorizontalPadding: "0px"
          thumbWidth: "0px"
          mainSliderColor: "rgba(var(--color-theme),0.1)"
          mainSliderColorOff: "rgba(var(--color-theme),0.1)"
          secondarySliderColor: "var(--color-theme)"
          secondarySliderColorOff: "var(--color-theme)"
          card_mod:
            style: |
              ha-card {
                background: none !important;
                box-shadow: none !important;
              }
              .slider-container input[type="range"] {
                position: revert !important;
                border: 1px solid rgba(var(--color-theme),0.3) !important;
              }
              .slider-container {
                display: flex;
                justify-content: center;
                align-items: center;
              }
  popup_power_outlet:
    hold_action:
      action: "fire-dom-event"
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_power_outlet_stats"
          variables:
            ulm_popup_power_outlet_entity: "[[[ return entity.entity_id ]]]"
            ulm_popup_power_outlet_sensor1: "[[[ return variables.ulm_popup_power_outlet_sensor1 ]]]"
            ulm_popup_power_outlet_sensor2: "[[[ return variables.ulm_popup_power_outlet_sensor2 ]]]"
            ulm_popup_power_outlet_graph_sensor: "[[[ return variables.ulm_popup_power_outlet_graph_sensor ]]]"
  popup_power_outlet_history:
    template: "popup_power_outlet_stats"
    styles:
      grid:
        - grid-template-areas: "'header' 'content1' 'content3' 'buttons' 'footer'"
        - grid-template-rows: "16vh 12vh 40vh 14vh 14vh;"
        - grid-template-columns: "1fr"
      custom_fields:
        content2:
          - display: "none"
        content3:
          - display: "block"
          - align-self: "start"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content1" "content3" "buttons" "footer" !important;
          grid-template-rows: 16vh 12vh 40vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content2 {
          display: none;
        }
    custom_fields:
      buttons:
        card:
          type: "custom:button-card"
          template: "list_2_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                icon: "mdi:chart-line"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_stats"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_power_outlet_stats"
                      variables:
                        ulm_popup_power_outlet_entity: "[[[ return variables.ulm_popup_power_outlet_entity ]]]"
                        ulm_popup_power_outlet_sensor1: "[[[ return variables.ulm_popup_power_outlet_sensor1 ]]]"
                        ulm_popup_power_outlet_sensor2: "[[[ return variables.ulm_popup_power_outlet_sensor2 ]]]"
                        ulm_popup_power_outlet_graph_sensor: "[[[ return variables.ulm_popup_power_outlet_graph_sensor ]]]"
            item2:
              card:
                icon: "mdi:history"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_history"
  popup_light_brightness:
    styles:
      grid:
        - grid-template-areas: >
            [[[
                  var contents = [];
                  var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                  var color_temp_modes = ["color_temp"];
                  var color_modes = ["hs", "rgb", "rgbw", "xy"];
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                      contents.push("content1");
                  }
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                      contents.push("content2");
                  }
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                      contents.push("content3");
                  }
                  return "\"" + "header ".repeat(contents.length) + "\" " + "\"" + contents.join(" ") + "\" " + "\"" + "footer ".repeat(contents.length) + "\"";
            ]]]
        - grid-template-rows: "16vh 56vh 14vh"
        - grid-template-columns: >
            [[[
                  var columns = [];
                  var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                  var color_temp_modes = ["color_temp"];
                  var color_modes = ["hs", "rgb", "rgbw", "xy"];
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                      columns.push("1fr");
                  }
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                      columns.push("1fr");
                  }
                  if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                      columns.push("2fr");
                  }
                  return columns.join(" ");
            ]]]
      card:
        - background: "var(--primary-background-color)"
        - box-shadow: "none"
        - padding: "4%"
      custom_fields:
        header:
          - align-self: "start"
        content1:
          - align-self: "center"
          - display: >
              [[[
                    var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                    if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                        return "block";
                    }
                    return "none";
              ]]]
        content2:
          - align-self: "center"
          - display: >
              [[[
                    var color_temp_modes = ["color_temp"];
                    if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                        return "block";
                    }
                    return "none";
              ]]]
        content3:
          - align-self: "center"
          - display: >
              [[[
                    var color_modes = ["hs", "rgb", "rgbw", "xy"];
                    if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                        return "block";
                    }
                    return "none";
              ]]]
        buttons:
          - display: "none"
        footer:
          - align-self: "end"
          - margin-top: "25px"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content1" "buttons" "footer" !important;
          grid-template-rows: 16vh 52vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content2 {
          display: none !important;
        }
        #content3 {
          display: none !important;
        }
      }
    custom_fields:
      header:
        card:
          type: "custom:button-card"
          template: "popup_header"
          entity: "[[[ return variables.ulm_popup_light_entity ]]]"
      content1:
        card:
          type: "custom:my-slider"
          entity: "[[[ return variables.ulm_popup_light_entity ]]]"
          radius: "20px"
          rotate: 270
          containerHeight: "320px"
          width: "250px"
          height: "100px"
          top: "100px"
          left: "17%"
          thumbHorizontalPadding: "0px"
          thumbWidth: "0px"
          mainSliderColor: >
            [[[
                var color = states[variables.ulm_popup_light_entity].attributes.rgb_color;
                if (states[variables.ulm_popup_light_entity].state == "unavailable"){
                   return "rgba(var(--color-grey),1)";
                }
                else if (color){
                   return "rgba(" + color + ",1)";
                }
                else{
                  return "rgba(var(--color-yellow),1)";
                }
            ]]]
          mainSliderColorOff: "rgba(var(--color-theme),0.1)"
          secondarySliderColor: >
            [[[
                var color = states[variables.ulm_popup_light_entity].attributes.rgb_color;
                if (states[variables.ulm_popup_light_entity].state == "unavailable"){
                   return "rgba(var(--color-grey),0.2)";
                }
                else if (color){
                   return "rgba(" + color + ",0.2)";
                }
                else{
                  return "rgba(var(--color-yellow),0.2)";
                }
                ]]]
          secondarySliderColorOff: "var(--color-theme)"
          card_mod:
            style: |
              ha-card {
                background: none !important;
                box-shadow: none !important;
              }
              .slider-container input[type="range"] {
                position: revert !important;
                border: 1px solid rgba(var(--color-theme),0.3) !important;
              }
              .slider-container {
                display: flex;
                justify-content: center;
                align-items: center;
              }
      content2:
        card:
          type: "custom:my-slider"
          entity: "[[[ return variables.ulm_popup_light_entity ]]]"
          minBar: "[[[ return states[variables.ulm_popup_light_entity].attributes.min_mireds ]]]"
          minSet: "[[[ return states[variables.ulm_popup_light_entity].attributes.min_mireds ]]]"
          maxBar: "[[[ return states[variables.ulm_popup_light_entity].attributes.max_mireds ]]]"
          maxSet: "[[[ return states[variables.ulm_popup_light_entity].attributes.max_mireds ]]]"
          function: "Warmth"
          radius: "20px"
          rotate: 270
          containerHeight: "320px"
          width: "250px"
          height: "100px"
          thumbHorizontalPadding: "0px"
          thumbWidth: "2%"
          thumbHeight: "85px"
          thumbColor: "#000"
          mainSliderColor: "rgba(255, 255, 255, 0)"
          mainSliderColorOff: "rgba(255, 255, 255, 0)"
          card_mod:
            style: |
              ha-card {
                background: none !important;
                box-shadow: none !important;
              }
              .slider-container input[type="range"] {
                position: revert !important;
                border: 1px solid rgba(208, 208, 208, 1) !important;
                background: linear-gradient(90deg, #c9f2fc, #fff, #f3db6d);
                --thumb-top: 1px !important;
              }
              .slider-container input[type="range"]::-webkit-slider-thumb {
                margin-top: 7px;
                background-color: rgba(1, 1, 1, 0);
              }
              .slider-container input[type="range"]::-moz-range-thumb {
                background-color: rgba(1, 1, 1, 0);
              }
              .slider-container {
                display: flex;
                justify-content: center;
                align-items: center;
              }
      buttons:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          styles:
            card:
              - background: "none"
            grid:
              - grid-template-areas: >
                  [[[
                        var areas = [];
                        var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                        var color_temp_modes = ["color_temp"];
                        var color_modes = ["hs", "rgb", "rgbw", "xy"];
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                            areas.push("item1");
                        }
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                            areas.push("item2");
                        }
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                            areas.push("item3");
                        }
                        return "\"" + areas.join(" ") + "\"";
                  ]]]
              - grid-template-columns: >
                  [[[
                        var columns = [];
                        var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                        var color_temp_modes = ["color_temp"];
                        var color_modes = ["hs", "rgb", "rgbw", "xy"];
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                            columns.push("1fr");
                        }
                        if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                            columns.push("1fr");
                        }
                        return columns.join(" ");
                  ]]]
          custom_fields:
            item1:
              card:
                icon: "mdi:lightbulb-on"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_brightness"
            item2:
              card:
                icon: "mdi:sun-thermometer-outline"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_color_temp"
                styles:
                  card:
                    - display: >
                        [[[
                              var color_temp_modes = ["color_temp"];
                              if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                                  return "block";
                              }
                              return "none";
                        ]]]
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_color_temp"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
            item3:
              card:
                icon: "mdi:palette"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_color"
                styles:
                  card:
                    - display: >
                        [[[
                              var color_modes = ["hs", "rgb", "rgbw", "xy"];
                              if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                                  return "block";
                              }
                              return "none";
                        ]]]
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_color"
                      variables:
                        ulm_popup_light_entity: "[[[ return variables.ulm_popup_light_entity ]]]"
      footer:
        card:
          type: "custom:button-card"
          template: "popup_list_items"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "popup_button_back"
            item2:
              card:
                type: "custom:button-card"
                template: "popup_button_power"
                entity: "[[[ return variables.ulm_popup_light_entity ]]]"
      content3:
        card:
          type: "custom:light-entity-card"
          entity: "[[[ return variables.ulm_popup_light_entity ]]]"
          persist_features: true
          brightness: false
          color_temp: false
          white_value: false
          hide_header: true
          effects_list: false
          smooth_color_wheel: true
          consolidate_entities: true
          child_card: true
          card_mod:
            style: |
              ha-card {
                background: none !important;
                box-shadow: none !important;
                padding: 10px 0 10px 0 !important;
              }
  popup_power_outlet_stats:
    styles:
      grid:
        - grid-template-areas: "'header header' 'content1 content1' 'content2 content3' 'footer footer'"
        - grid-template-rows: "16vh 12vh 44vh 14vh"
        - grid-template-columns: "1fr 1fr"
        - column-gap: "30px"
      card:
        - background: "var(--primary-background-color)"
        - box-shadow: "none"
        - padding: "4%"
      custom_fields:
        header:
          - align-self: "start"
        content1:
          - align-self: "start"
        content2:
          - align-self: "start"
        content3:
          - align-self: "start"
        buttons:
          - display: "none"
        footer:
          - align-self: "end"
          - margin-top: "25px"
    extra_styles: |
      @media (max-width: 800px) {
        #container {
          grid-template-areas: "header" "content1" "content2" "buttons" "footer" !important;
          grid-template-rows: 16vh 12vh 40vh 14vh 14vh !important;
          grid-template-columns: 1fr !important;
        }
        #buttons {
          display: block !important;
          align-self: start !important;
        }
        #content3 {
          display: none;
        }
      }
    custom_fields:
      header:
        card:
          type: "custom:button-card"
          template: "popup_header"
          entity: "[[[ return variables.ulm_popup_power_outlet_entity ]]]"
      content1:
        card:
          type: "grid"
          columns: 2
          square: false
          cards:
            - type: "custom:button-card"
              entity: "[[[ return variables.ulm_popup_power_outlet_sensor1 ]]]"
              label: >
                [[[ return states[variables.ulm_popup_power_outlet_sensor1].state + states[variables.ulm_popup_power_outlet_sensor1].attributes.unit_of_measurement
                ]]]
              template:
                - "icon_info_bg"
              styles:
                card:
                  - max-width: "300px"
                icon:
                  - color: "var(--color-theme)"
              extra_styles: |
                @media (min-width: 800px) {
                  ha-card {
                    margin-left: calc(100% - 300px) !important;
                  }
                }
            - type: "custom:button-card"
              entity: "[[[ return variables.ulm_popup_power_outlet_sensor2 ]]]"
              label: >
                [[[ return states[variables.ulm_popup_power_outlet_sensor2].state + states[variables.ulm_popup_power_outlet_sensor2].attributes.unit_of_measurement
                ]]]
              template:
                - "icon_info_bg"
              styles:
                card:
                  - max-width: "300px"
                icon:
                  - color: "var(--color-theme)"
      content2:
        card:
          type: "custom:mini-graph-card"
          entities:
            - entity: "[[[ return variables.ulm_popup_power_outlet_graph_sensor ]]]"
          line_color: "var(--info-color)"
          height: 276
          hours_to_show: 168
          show:
            name: false
            icon: false
            leg"end": false
            state: false
          card_mod:
            style: |
              ha-card {
                box-shadow: "none" !important;
                border-radius: var(--border-radius) !important;
                margin-bottom: 37px !important;
              }
      buttons:
        card:
          type: "custom:button-card"
          template: "list_2_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                icon: "mdi:chart-line"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_selected"
                  - "popup_button_stats"
            item2:
              card:
                icon: "mdi:history"
                type: "custom:button-card"
                template:
                  - "popup_button"
                  - "popup_button_history"
                tap_action:
                  action: "fire-dom-event"
                  browser_mod:
                    command: "popup"
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_power_outlet_history"
                      variables:
                        ulm_popup_power_outlet_entity: "[[[ return variables.ulm_popup_power_outlet_entity ]]]"
                        ulm_popup_power_outlet_sensor1: "[[[ return variables.ulm_popup_power_outlet_sensor1 ]]]"
                        ulm_popup_power_outlet_sensor2: "[[[ return variables.ulm_popup_power_outlet_sensor2 ]]]"
                        ulm_popup_power_outlet_graph_sensor: "[[[ return variables.ulm_popup_power_outlet_graph_sensor ]]]"
      footer:
        card:
          type: "custom:button-card"
          template: "popup_list_items"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "popup_button_back"
            item2:
              card:
                type: "custom:button-card"
                template: "popup_button_power"
                entity: "[[[ return variables.ulm_popup_power_outlet_entity ]]]"
      content3:
        card:
          type: "logbook"
          entities:
            - "[[[ return variables.ulm_popup_power_outlet_entity ]]]"
          card_mod:
            style: |
              ha-card {
                box-shadow: none !important;
                background: none !important;
                height: 257px !important;
              }
              ha-logbook {
                height: 242px !important;
              }
              state-badge {
                background: red !important;
              }
  popup_default:
    hold_action:
      action: "more-info"
  popup_button_power:
    template:
      - "popup_button"
      - "ulm_language_variables"
    icon: "mdi:power"
    name: "[[[ return variables.ulm_popups_toggle ]]]"
    styles:
      name:
        - text-transform: "uppercase"
        - color: "rgba(var(--color-theme),0.5)"
      icon:
        - color: "var(--card-background-color)"
      img_cell:
        - background-color: "var(--primary-color)"
        - box-shadow: "none"
    tap_action:
      action: "toggle"
  popup_button_source:
    template:
      - "popup_button"
      - "ulm_language_variables"
    icon: "mdi:playlist-music"
    name: "Source"
    styles:
      name:
        - text-transform: "uppercase"
        - color: "rgba(var(--color-theme),0.5)"
      img_cell:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.25)"
  popup_chip_volume:
    template: "chips"
    show_icon: true
    icon: "mdi:volume-high"
    label: >
      [[[
        let level = entity.attributes.volume_level
        return level * 100 + '%'
      ]]]
    styles:
      card:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.25)"
        - height: "42px"
        - border-radius: "21px"
      grid:
        - grid-template-areas: "i l"
        - justify-content: "space-between"
        - display: "flex"
      img_cell:
        - width: "30px"
  popup_header:
    template:
      - "popup_button"
      - "ulm_language_variables"
    show_name: true
    show_label: true
    styles:
      grid:
        - grid-template-areas: "'i' 'n' 'l'"
        - grid-template-columns: "auto"
        - grid-template-rows: "min-content min-content min-content"
      label:
        - justify-self: "center"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
      name:
        - margin-top: "6px"
      icon:
        - color: "var(--color-theme)"
    label: |-
      [[[
        if (entity.state == 'off') {
          return variables.ulm_off;
        } else {
          return variables.ulm_on;
        }
      ]]]
  popup_button_color_temp:
    template: "ulm_language_variables"
    name: "[[[ return variables.ulm_popups_color_temp ]]]"
  popup_button_brightness:
    template: "ulm_language_variables"
    name: "[[[ return variables.ulm_popups_brightness ]]]"
  popup_button_volume:
    template:
      - "popup_button"
      - "ulm_language_variables"
    icon: "mdi:volume-high"
    name: "Volume"
    styles:
      name:
        - text-transform: "uppercase"
        - color: "rgba(var(--color-theme),0.5)"
      img_cell:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.25)"
    tap_action:
      action: "more_info"
  popup_button_app:
    template:
      - "popup_button"
    show_name: true
    show_label: true
    styles:
      grid:
        - grid-template-areas: "'i n' 'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      name:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - margin-top: "0px"
      icon:
        - color: >
            [[[
              var color = "var(--color-theme)";
              if(entity?.attributes?.app_name){
                var app = entity.attributes?.app_name.toLowerCase();
                if(app = "spotify"){
                  var color = "#1DB954";
                }
              } else if(entity?.attributes?.media_content_id?.toLowerCase().includes("spotify")){
                var color = "#1DB954";
              }
              return color;
            ]]]
      img_cell:
        - border: "1px solid var(--color-theme)"
        - border-shadow: "none"
        - background-color: >
            [[[
              var color = "var(--color-theme)";
              if(entity?.attributes?.app_name){
                var app = entity?.attributes?.app_name?.toLowerCase();
                if(app = "spotify"){
                  var color = "#434343";
                }
              } else if(entity?.attributes?.media_content_id?.toLowerCase().includes("spotify")){
                var color = "#434343";
              }
              return color;
            ]]]
    icon: >
      [[[
        var icon =  entity.attributes.icon || "mdi:speaker";
        if(entity?.attributes?.app_name){
          var app = entity.attributes.app_name.toLowerCase();
          if(app == "spotify"){
            var icon = "mdi:spotify";
          } else if(app == "google podcasts"){
            var icon = "mdi:google-podcast";
          } else if(app == "plex"){
            var icon = "mdi:plex";
          } else if(app == "soundcloud"){
            var icon = "mdi:soundcloud";
          } else if(app == "youtube music"){
            var icon = "mdi:youtube";
          } else if (app == "oto music"){
            var icon = "mdi:music-circle";
          } else if(app == "pandora"){
            var icon = "mdi:pandora";
          } else if(app == "netflix"){
            var icon = "mdi:netflix";
          } else if(app == "bluetooth audio"){
            var icon = "mdi:bluetooth";
          }
        } else if(entity?.attributes?.media_content_id?.toLowerCase().includes("spotify")){
            var icon = "mdi:spotify";
        }
        return icon;
      ]]]
    label: >
      [[[
        var label = entity.attributes.media_title || entity.attributes.friendly_name;
        return label;
      ]]]
    name: >
      [[[
        var name =  entity.attributes.friendly_name;
        if(entity?.attributes?.app_name){
          var app = entity?.attributes?.app_name?.toLowerCase();
          if(app == "spotify"){
            var name = "Spotify";
          } else if(app == "google podcasts"){
            var name = "Google-Podcast";
          } else if(app == "plex"){
            var name = "Plex";
          } else if(app == "soundcloud"){
            var name = "Soundcloud";
          } else if(app == "youtube music"){
            var name = "Youtube";
          } else if (app == "oto music"){
            var name = "Oto Music";
          } else if(app == "pandora"){
            var name = "Pandora";
          } else if(app == "netflix"){
            var name = "Netflix";
          } else if(app == "bluetooth audio"){
            var name = "Bluetooth";
          }
        } else if(entity?.attributes?.media_content_id?.toLowerCase().includes("spotify")){
            var name = "Spotify";
        }
        return name;
      ]]]
  popup_card_volume:
    template: "chips"
    show_icon: true
    icon: "mdi:volume-high"
    label: "80%"
    styles:
      card:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.25)"
      grid:
        - grid-template-areas: "i l"
        - justify-content: "space-between"
        - display: "flex"
  popup_button_selected:
    tap_action:
      action: "none"
    styles:
      icon:
        - color: "rgba(var(--color-blue),1)"
      img_cell:
        - background-color: "rgba(var(--color-blue), 0.2)"
  popup_button_airconditionner:
    template: "widget_icon"
    variables:
      ulm_popup_button_airconditionner_state: "off"
    styles:
      card:
        - background-color: "transparent"
        - width: "42px"
        - border-radius: "50%"
    state:
      - styles:
          card:
            - background-color: "var(--card-background-color)"
            - box-shadow: "var( --ha-card-box-shadow)"
            - transform: "scale(0.95)"
        value: "[[[ return variables.ulm_popup_button_airconditionner_state ]]]"
    tap_action:
      action: "call-service"
      service: "climate.set_hvac_mode"
      service_data:
        entity_id: "climate.hvac"
        hvac_mode: "[[[ return variables.ulm_popup_button_airconditionner_state ]]]"
  popup_chip_controls:
    template: "chips"
    variables:
      ulm_popup_media_player_entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
    styles:
      card:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.5)"
        - height: "42px"
        - border-radius: "21px"
      grid:
        - grid-template-areas: "item1 item2 item3"
        - justify-content: "space-evenly"
        - display: "flex"
        - grid-template-columns: "min-content min-content min-content"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "icon_controls"
          entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
          icon: "mdi:skip-previous"
          tap_action:
            action: "call-service"
            service: "media_player.media_previous_track"
            service_data:
              entity_id: "[[[ return variables.ulm_popup_media_player_entity]]]"
          styles:
            icon:
              - color: "rgba(var(--color-theme),0.5)"
      item2:
        card:
          type: "custom:button-card"
          template: "icon_controls"
          entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
          icon: "mdi:play"
          state:
            - value: "playing"
              icon: "mdi:pause"
          tap_action:
            action: "call-service"
            service: "media_player.media_play_pause"
            service_data:
              entity_id: "[[[ return variables.ulm_popup_media_player_entity]]]"
      item3:
        card:
          type: "custom:button-card"
          template: "icon_controls"
          entity: "[[[ return variables.ulm_popup_media_player_entity ]]]"
          icon: "mdi:skip-next"
          tap_action:
            action: "call-service"
            service: "media_player.media_next_track"
            service_data:
              entity_id: "[[[ return variables.ulm_popup_media_player_entity]]]"
          styles:
            icon:
              - color: "rgba(var(--color-theme),0.5)"
  
  icon_controls:
    show_icon: true
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - background: "none"
        - box-shadow: "none"
        - height: "42px"
      grid:
        - grid-template-areas: "'i'"
      img_cell:
        - width: "30px"
    size: "80%"
  popup_button_playing:
    template: "ulm_language_variables"
    icon: "mdi:play-circle"
    name: "Playback"
  popup_button_stats:
    template: "ulm_language_variables"
    name: "[[[ return variables.ulm_popups_statistics ]]]"
  popup_button_back:
    template:
      - "popup_button"
      - "ulm_language_variables"
    icon: "mdi:arrow-left"
    name: "[[[ return variables.ulm_popups_back ]]]"
    styles:
      name:
        - text-transform: "uppercase"
        - color: "rgba(var(--color-theme),0.5)"
      img_cell:
        - background: "none"
        - box-shadow: "none"
        - border: "1px solid rgba(var(--color-theme),0.25)"
    tap_action:
      action: "fire-dom-event"
      browser_mod:
        command: "close_popup"
  popup_button:
    color: "var(--primary-color)"
    show_icon: true
    show_name: true
    styles:
      grid:
        - grid-template-areas: "'i' 'n'"
        - grid-template-columns: "auto"
        - grid-template-rows: "min-content min-content"
      card:
        - background: "none"
        - box-shadow: "none"
        - border-radius: "none"
        - padding: "12px"
      icon:
        - color: "var(--primary-color)"
      img_cell:
        - background-color: "var(--card-background-color)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
        - box-shadow: "var(--ha-card-box-shadow)"
      name:
        - justify-self: "center"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-top: "12px"
  popup_button_color:
    template: "ulm_language_variables"
    name: "[[[ return variables.ulm_popups_color ]]]"
  popup_button_history:
    template: "ulm_language_variables"
    name: "[[[ return variables.ulm_popups_history ]]]"
  popup_subtitle:
    template: "title"
    styles:
      card:
        - margin-left: "20px"
      name:
        - font-weight: 500
        - font-size: "1.2rem"
  popup_list_items:
    template: "list_items"
    styles:
      card:
        - background: "none"
        - border-radius: "none"
      grid:
        - grid-template-areas: "'item1 item2 item3'"
        - justify-content: "space-evenly"
        - display: "flex"
  popup_4_items:
    styles:
      grid:
        - grid-template-areas: "'item1' 'item2' 'item3' 'item4'"
        - grid-template-columns: "1fr"
      card:
        - background: "var(--primary-background-color)"
        - box-shadow: "none"
        - padding: "4%"
      custom_fields:
        item1:
          - align-self: "start"
        item2:
          - align-self: "start"
        item3:
          - align-self: "start"
        item4:
          - align-self: "end"
          - margin-top: "25px"
  ### Icon ###
  icon:
    color: "var(--google-grey)"
    show_icon: true
    show_label: false
    show_name: false
    state:
      - styles:
          custom_fields:
            notification:
              - border-radius: "50%"
              - position: "absolute"
              - left: "24px"
              - top: "-2px"
              - height: "16px"
              - width: "16px"
              - border: "2px solid var(--card-background-color)"
              - font-size: "12px"
              - line-height: "14px"
              - background-color: >
                  [[[
                    return "rgba(var(--color-red),1)";
                  ]]]
        value: "unavailable"
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i'"
        - grid-template-columns: "min-content"
        - grid-template-rows: "min-content"
      card:
        - border-radius: "21px"
        - box-shadow: "none"
        - padding: "0px"
    custom_fields:
      notification: >
        [[[
          if (entity.state =="unavailable"){
            return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
          }
        ]]]
    size: "20px"
  ### Icon Info Alert ###
  icon_info_alert:
    color: "var(--google-grey)"
    show_icon: true
    show_label: true
    show_name: true
    state:
      - operator: "template"
        value: "[[[ if (entity.state == 'unavailable' || entity.state == 'on'){ return true; } ]]]"
        styles:
          icon:
            - color: "rgba(var(--color-blue),1)"
          label:
            - color: "rgba(var(--color-blue-text),1)"
          name:
            - color: "rgba(var(--color-blue-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-blue), 0.2)"
          card:
            - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
          custom_fields:
            notification:
              - border-radius: "50%"
              - position: "absolute"
              - left: "38px"
              - top: "8px"
              - height: "16px"
              - width: "16px"
              - border: "2px solid var(--card-background-color)"
              - font-size: "12px"
              - line-height: "14px"
              - background-color: >
                  [[[
                    return "rgba(var(--color-red),1)";
                  ]]]
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      name:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
      state:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i n' 'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
    custom_fields:
      notification: >
        [[[
          if (entity.state =="unavailable" || entity.state == "on"){
            return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
          }
        ]]]
    size: "20px"
  ### Icon Info Line ###s
  icon_info_line:
    show_icon: true
    show_label: true
    show_name: false
    styles:
      icon:
        - filter: "opacity(40%)"
      label:
        - padding: "2px"
        - justify-self: "start"
        - align-self: "center"
        - font-weight: "bolder"
        - font-size: "12px"
        - margin-left: "0px"
        - filter: "opacity(40%)"
      img_cell:
        - place-self: "center"
        - width: "14px"
        - height: "24px"
      grid:
        - grid-template-areas: "'i l'"
        - grid-template-columns: "max_content auto"
        - grid-template-rows: "min-content"
      card:
        - box-shadow: "none"
        - padding: "0px"
    size: "100%"
  ### Edge ###
  edge:
    styles:
      card:
        - width: "0px"
  ### List Items Line ###
  list_items_line:
    styles:
      grid:
        - grid-template-areas: "'item1 item2 item3'"
        - grid-template-columns: "max-content max-content max-content"
        - grid-template-rows: "min-content"
        - column-gap: "8px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### Icon Only ###
  icon_only:
    color: "var(--google-grey)"
    show_icon: true
    show_label: true
    show_name: false
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
    size: "20px"
  ### List 3 Items ###
  list_3_items:
    styles:
      grid:
        - grid-template-areas: "'item1 item2 item3'"
        - grid-template-columns: "1fr 1fr 1fr"
        - grid-template-rows: "min-content"
        - column-gap: "7px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### Icon Info Bg ###
  icon_info_bg:
    color: "var(--google-grey)"
    show_icon: true
    show_label: true
    show_name: true
    state:
      - value: "unavailable"
        styles:
          custom_fields:
            notification:
              - border-radius: "50%"
              - position: "absolute"
              - left: "38px"
              - top: "8px"
              - height: "16px"
              - width: "16px"
              - border: "2px solid var(--card-background-color)"
              - font-size: "12px"
              - line-height: "14px"
              - background-color: >
                  [[[
                    return "rgba(var(--color-red),1)";
                  ]]]
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      name:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
      state:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i n' 'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
    custom_fields:
      notification: >
        [[[
          if (entity.state =="unavailable"){
            return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
          }
        ]]]
    size: "20px"
  ### Widget Icon ###s
  widget_icon:
    tap_action:
      action: "toggle"
    show_icon: true
    show_name: false
    styles:
      grid:
        - grid-template-areas: "'i'"
      card:
        - box-shadow: "none"
        - padding: "0px"
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "14px"
        - place-self: "center"
        - height: "42px"
      icon:
        - color: "rgba(var(--color-theme),0.9)"
    size: "20px"
    color: "var(--google-grey)"
  ### Chips ###
  chips:
    tap_action:
      action: "more-info"
    show_icon: false
    show_label: true
    show_name: false
    show_state: false
    styles:
      label:
        - justify-self: "center"
        - padding: "0px 6px"
        - font-weight: "bold"
        - font-size: "14px"
      img_cell:
        - width: "24px"
      grid:
        - grid-template-areas: "'l'"
      card:
        - border-radius: "18px"
        - box-shadow: "var(--box-shadow)"
        - height: "36px"
        - width: "auto"
        - padding-left: "6px"
        - padding-right: "6px"
    size: "80%"
  ### Icon Info ###
  icon_info:
    color: "var(--google-grey)"
    show_icon: true
    show_label: true
    show_name: true
    state:
      - styles:
          custom_fields:
            notification:
              - border-radius: "50%"
              - position: "absolute"
              - left: "24px"
              - top: "-2px"
              - height: "16px"
              - width: "16px"
              - border: "2px solid var(--card-background-color)"
              - font-size: "12px"
              - line-height: "14px"
              - background-color: >
                  [[[
                    return "rgba(var(--color-red),1)";
                  ]]]
        value: "unavailable"
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      name:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
      state:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i n' 'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
      card:
        - border-radius: "21px 8px 8px 21px"
        - box-shadow: "none"
        - padding: "0px"
        # - background-color: "rgba(var(--color-theme),0)"
    custom_fields:
      notification: >
        [[[
          if (entity.state =="unavailable"){
            return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
          }
        ]]]
    size: "20px"
  #### List Two Third Items ###
  list_two_third_items:
    styles:
      grid:
        - grid-template-areas: "'item1 item2'"
        - grid-template-columns: "1fr 2fr"
        - grid-template-rows: "min-content"
        - column-gap: "7px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### List 2 Items ###
  list_2_items:
    styles:
      grid:
        - grid-template-areas: "'item1 item2'"
        - grid-template-columns: "1fr 1fr"
        - grid-template-rows: "min-content"
        - column-gap: "7px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### List 4 Items ###
  list_4_items:
    styles:
      grid:
        - grid-template-areas: "'item1 item2 item3 item4'"
        - grid-template-columns: "1fr 1fr 1fr 1fr"
        - grid-template-rows: "min-content"
        - column-gap: "7px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### Cover ###
  cover:
    tap_action:
      action: "more-info"
    icon: |
      [[[
          var icon = "mdi:help-circle";
          if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
            if (states[entity.entity_id].state == "closed"){
              var icon = "mdi:window-shutter";
            } else
              var icon = "mdi:window-shutter-open";
          } else {
            if (states[entity.entity_id].attributes.current_position == 0){
              var icon = "mdi:window-shutter";
            } else
              var icon = "mdi:window-shutter-open";
          }
          return icon ;
      ]]]
    label: >-
      [[[
          var icon = "mdi:help-circle";
          if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
            if (states[entity.entity_id].state == "closed"){
              return variables.ulm_closed;
            } else
              return variables.ulm_open;
          } else {
            if (states[entity.entity_id].attributes.current_position == 0){
              return variables.ulm_closed;
            } else {
              return variables.ulm_open + " • " + (states[entity.entity_id].attributes.current_position) + "%" ;
            }
          }
          return icon ;
      ]]]
    state:
      - operator: "template"
        value: "[[[ return states[entity.entity_id].attributes.current_position != 0; ]]]"
        styles:
          icon:
            - color: "rgba(var(--color-blue),1)"
          img_cell:
            - background-color: "rgba(var(--color-blue),0.2)"
  ### List One Third Items ###
  list_one_third_items:
    styles:
      grid:
        - grid-template-areas: "'item1 item2'"
        - grid-template-columns: "2fr 1fr"
        - grid-template-rows: "min-content"
        - column-gap: "7px"
      card:
        - box-shadow: "none"
        - padding: "0px"
  ### Icon More Info ###
  icon_more_info:
    show_icon: false
    show_name: false
    show_label: false
    template:
      - "list_2_items"
    styles:
      grid:
        - grid-template-columns: "min-content auto"
        - column-gap: "0px"
      card:
        - background-color: "rgba(0,0,0,0)"
    hold_action:
      action: "more-info"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          entity: "[[[ return entity.entity_id ]]]"
          template:
            - "icon"
          styles:
            card:
              - overflow: "visible"
          tap_action:
            action: "more-info"
      item2:
        card:
          type: "custom:button-card"
          show_icon: false
          entity: "[[[ return entity.entity_id ]]]"
          template:
            - "icon_info"
          styles:
            card:
              - padding: "6px"
              - margin-left: "-6px"
              - background-color: "rgba(0,0,0,0)"
          custom_fields:
  ### Card Graph ###
  card_graph:
    variables:
      ulm_card_graph_color: "var(--info-color)"
      ulm_card_graph_name: "n/a"
      ulm_card_graph_color2: "var(--info-color)"
      ulm_card_graph_name2: "n/a"
      ulm_card_graph_entity2: ""
      ulm_card_graph_hours: 24
      ulm_card_graph_type: "fill"
    triggers_update: "all"
    styles:
      grid:
        - grid-template-areas: "'item1' 'item2'"
        - grid-template-columns: "1fr"
        - grid-template-rows: "min-content  min-content"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "0px"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template:
            - "icon_info"
            - "card_generic"
          styles:
            card:
              - box-shadow: "none"
              - border-radius: "var(--border-radius) var(--border-radius) 0px 0px"
              - padding: "12px"
          entity: "[[[ return variables.ulm_card_graph_entity ]]]"
          name: "[[[ return variables.ulm_card_graph_name ]]]"
      item2:
        card:
          type: "custom:mini-graph-card"
          entities: >
            [[[
              var ent = [];
              ent.push(variables.ulm_card_graph_entity);
              if(variables.ulm_card_graph_entity2 != "")
                ent.push(variables.ulm_card_graph_entity2);
              return ent;
            ]]]
          line_color: >
            [[[
              var col = [];
              col.push(variables.ulm_card_graph_color);
              if(variables.ulm_card_graph_color2 != "")
                col.push(variables.ulm_card_graph_color2);
              return col;
            ]]]
          show:
            name: false
            icon: false
            legend: false
            state: false
            graph: "[[[ return variables.ulm_card_graph_type=='fill'?'line':variables.ulm_card_graph_type; ]]]"
            fill: "[[[ return variables.ulm_card_graph_type=='fill'?true:false; ]]]"
          hours_to_show: "[[[ return variables.ulm_card_graph_hours; ]]]"
          style: |
            ha-card {
              box-shadow: none;
              border-radius: var(--border-radius);
            }
  ### Yellow ###
  yellow_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-yellow),1)"
          label:
            - color: "rgba(var(--color-yellow-text),1)"
          name:
            - color: "rgba(var(--color-yellow-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-yellow), 0.2)"
          card:
            - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
        id: "off"
        value: "off"
  purple_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-purple),1)"
          label:
            - color: "rgba(var(--color-purple-text),1)"
          name:
            - color: "rgba(var(--color-purple-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-purple), 0.2)"
        value: "on"
        id: "on"
  green_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-green),1)"
      label:
        - color: "rgba(var(--color-green-text),1)"
      name:
        - color: "rgba(var(--color-green-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-green), 0.2)"
  blue_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-blue),1)"
          label:
            - color: "rgba(var(--color-blue-text),1)"
          name:
            - color: "rgba(var(--color-blue-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-blue), 0.2)"
        value: "off"
        id: "off"
  grey_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-grey),1)"
          label:
            - color: "rgba(var(--color-grey-text),1)"
          name:
            - color: "rgba(var(--color-grey-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-grey), 0.2)"
        value: "off"
        id: "off"
  purple_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-purple),1)"
      label:
        - color: "rgba(var(--color-purple-text),1)"
      name:
        - color: "rgba(var(--color-purple-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-purple), 0.2)"
  purple_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-purple),1)"
          label:
            - color: "rgba(var(--color-purple-text),1)"
          name:
            - color: "rgba(var(--color-purple-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-purple), 0.2)"
        value: "off"
        id: "off"
  grey_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-grey),1)"
      label:
        - color: "rgba(var(--color-grey-text),1)"
      name:
        - color: "rgba(var(--color-grey-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-grey), 0.2)"
  red_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-red),1)"
          label:
            - color: "rgba(var(--color-red-text),1)"
          name:
            - color: "rgba(var(--color-red-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-red), 0.2)"
        value: "on"
        id: "on"
  ### Yellow Slider ###
  yellow_slider:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-yellow),1)"
          label:
            - color: "rgba(var(--color-yellow-text),1)"
          name:
            - color: "rgba(var(--color-yellow-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-yellow), 0.2)"
          card:
            - background-color: "rgba(0,0,0,0)"
        value: "on"
  green_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-green),1)"
          label:
            - color: "rgba(var(--color-green-text),1)"
          name:
            - color: "rgba(var(--color-green-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-green), 0.2)"
        value: "off"
        id: "off"
  pink_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-pink),1)"
      label:
        - color: "rgba(var(--color-pink-text),1)"
      name:
        - color: "rgba(var(--color-pink-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-pink), 0.2)"
  red_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-red),1)"
      label:
        - color: "rgba(var(--color-red-text),1)"
      name:
        - color: "rgba(var(--color-red-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-red), 0.2)"
  yellow_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-yellow),1)"
          label:
            - color: "rgba(var(--color-yellow-text),1)"
          name:
            - color: "rgba(var(--color-yellow-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-yellow), 0.2)"
          card:
            - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
        value: "on"
        id: "on"
  
  # Legacy
  yellow:
    template: "yellow_on"
  pink_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-pink),1)"
          label:
            - color: "rgba(var(--color-pink-text),1)"
          name:
            - color: "rgba(var(--color-pink-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-pink), 0.2)"
        value: "off"
        id: "off"
  yellow_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-yellow),1)"
      label:
        - color: "rgba(var(--color-yellow-text),1)"
      name:
        - color: "rgba(var(--color-yellow-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-yellow), 0.2)"
  blue_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-blue),1)"
          label:
            - color: "rgba(var(--color-blue-text),1)"
          name:
            - color: "rgba(var(--color-blue-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-blue), 0.2)"
          card:
            - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
        id: "on"
        value: "on"
  
  # Legacy
  blue:
    template: "blue_on"
  green_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-green),1)"
          label:
            - color: "rgba(var(--color-green-text),1)"
          name:
            - color: "rgba(var(--color-green-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-green), 0.2)"
          card:
            - background-color: "rgba(var(--color-background-green), var(--opacity-bg))"
        value: "on"
        id: "on"
  
  # Legacy
  green:
    template: "green_on"
  red_off:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-red),1)"
          label:
            - color: "rgba(var(--color-red-text),1)"
          name:
            - color: "rgba(var(--color-red-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-red), 0.2)"
        value: "off"
        id: "off"
  grey_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-grey),1)"
          label:
            - color: "rgba(var(--color-grey-text),1)"
          name:
            - color: "rgba(var(--color-grey-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-grey), 0.2)"
        value: "on"
        id: "on"
  ### Blue No State ###
  blue_no_state:
    styles:
      icon:
        - color: "rgba(var(--color-blue),1)"
      label:
        - color: "rgba(var(--color-blue-text),1)"
      name:
        - color: "rgba(var(--color-blue-text),1)"
      img_cell:
        - background-color: "rgba(var(--color-blue), 0.2)"
      card:
        - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
  pink_on:
    state:
      - styles:
          icon:
            - color: "rgba(var(--color-pink),1)"
          label:
            - color: "rgba(var(--color-pink-text),1)"
          name:
            - color: "rgba(var(--color-pink-text),1)"
          img_cell:
            - background-color: "rgba(var(--color-pink), 0.2)"
        value: "on"
        id: "on"
  ### Title ###
  title:
    template: "card_title"
  ### Cards ###
  generic:
    template: "card_generic"
  
  light:
    template: "card_light"
  
  light_slider:
    template: "card_light_slider"
    variables:
      ulm_card_light_slider_name: "[[[ return variables.name ]]]"
  
  binary_sensor:
    template: "card_binary_sensor"
  
  outlet:
    template: "card_power_outlet"
  
  # thermostat:
  # template: card_thermostat
  
  cover_buttons:
    template: "card_cover_buttons"
    variables:
      ulm_card_cover_buttons_name:
      ulm_card_cover_buttons_entity:
  
  graph:
    template: "card_graph"
    variables:
      ulm_card_graph_color: "var(--google-blue)"
      ulm_card_graph_name: "Default name"
      ulm_card_graph_entity: "[[[ return entity.entity_id ]]]"
  
  media:
    template: "card_media_player"
  
  battery:
    template: "card_battery"
    variables:
      ulm_card_battery_attribute: "battery"
  
  media_mini_album:
    template: "card_media_player_with_cover"
  
  media_buttons:
    template: "card_media_player_controls"
    variables:
      ulm_card_media_player_controls_entity: "[[[ return variables.entity ]]]"
      ulm_card_media_player_controls_name: "[[[ return variables.name ]]]"
  
  ### Card renaming ###
  # Template name: card_cover_with_buttons --> card_cover_buttons
  # Template name: card_media_player_with_control --> card_media_player_art
  # Template name: card_media_player_with_controls --> card_media_player_controls
  
  card_cover_with_buttons:
    template: "card_cover_buttons"
    variables:
      ulm_card_cover_buttons_name: "[[[ return variables.ulm_card_cover_with_buttons_name ]]]"
      ulm_card_cover_buttons_entity: "[[[ return variables.ulm_card_cover_with_buttons_entity ]]]"
  
  card_media_player_with_control:
    template: "card_media_player_art"
    entity: "[[[ return entity.entity_id ]]]"
    name: "[[[ return entity.attributes.friendly_name ]]]"   # this will pass true the friendly name because you cannot pass true the `name:`
  
  card_media_player_with_controls:
    template: "card_media_player_controls"
    variables:
      ulm_card_media_player_controls_entity: "[[[ return variables.ulm_card_media_player_with_controls_name ]]]"
      ulm_card_media_player_controls_name: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
  
  ### NEW CARD_LIGHT ALL IN ONE ###
  card_light_slider:
    template: "card_light"
    variables:
      ulm_card_light_enable_slider: true
  card_light_slider_collapse:
    template: "card_light"
    variables:
      ulm_card_light_enable_collapse: true
      ulm_card_light_enable_slider: true
  card_light_slider_horizontal:
    template: "card_light"
    variables:
      ulm_card_light_enable_slider: true
      ulm_card_light_enable_horizontal: true
  card_light_color:
    template: "card_light"
    variables:
      ulm_card_light_enable_color: false
  card_light_horizontal_color:
    template: "card_light"
    variables:
      ulm_card_light_enable_horizontal: true
      ulm_card_light_enable_color: false
  card_light_slider_color:
    template: "card_light"
    variables:
      ulm_card_light_enable_slider: true
      ulm_card_light_enable_color: false
  card_light_slider_collapse_color:
    template: "card_light"
    variables:
      ulm_card_light_enable_collapse: true
      ulm_card_light_enable_slider: true
      ulm_card_light_enable_color: false
  
  ### NEW CARD_THERMOSTAT ALL IN ONE ###
  custom_card_heat_pump:
    template: "card_thermostat"
    variables:
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_hvac_modes: true
  custom_card_mpse_thermostat:
    template: "card_thermostat"
    variables:
      ulm_card_thermostat_enable_controls: true
  custom_card_httpedo13_thermostat:
    template: "card_thermostat"
    variables:
      ulm_card_thermostat_enable_display_temperature: true
      ulm_card_thermostat_enable_background_color: true
  custom_card_httpedo13_thermostat_with_buttons:
    template: "card_thermostat"
    variables:
      ulm_card_thermostat_enable_display_temperature: true
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_background_color: true
  custom_card_httpedo13_thermostat_with_buttons_collapse:
    template: "card_thermostat"
    variables:
      ulm_card_thermostat_enable_display_temperature: true
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_collapse: true
      ulm_card_thermostat_enable_background_color: true
  
  ### NEW CARD_COVER ALL IN ONE ###
  card_cover_buttons:
    template: "card_cover"
    variables:
      ulm_card_cover_enable_controls: true
  ### Chips ###
  chips_icon:
    template: "chip_icon_state"
    variables:
      ulm_chip_icon_state_icon: "[[[ return variables.icon ]]]"
      ulm_chip_icon_state_entity: "[[[ return entity.entity_id ]]]"
  
  chips_return:
    template: "chip_back"
    variables:
      ulm_chip_back_path: "/ui-lovelace-minimalist/home"
  
  chips_localisation_present:
    template: "chip_presence_detection"
  ### List Items ###
  list_items:
    template: "list_3_items"
  ### Card Media Player With Art ###
  card_media_player_art:
    template:
      - "card_media_player"
    variables:
      ulm_card_media_enable_art: true
  ### Card Media Player With Controls ###
  card_media_player_controls:
    template:
      - "card_media_player"
    variables:
      ulm_card_media_enable_controls: true
  ### Chip Mdi Icon Only ###
  chip_mdi_icon_only:
    template: "chips"
    tap_action:
      action: "more-info"
      entity: "[[[ return variables.ulm_chip_mdi_icon_only_entity ]]]"
    show_icon: true
    icon: "[[[ return variables.ulm_chip_mdi_icon_only_icon ]]]"
    styles:
      grid:
        - grid-template-areas: "'i'"
      icon:
        - color: "[[[ return variables.ulm_chip_mdi_icon_only_icon_color; ]]]"
  ### chip_alarm ###
  chip_alarm:
    template:
      - "chip_icon_label"
      - "ulm_language_variables"
    label: |
      [[[
        var alarm_label = variables.ulm_unknown;
        if (entity.state == "armed_home"){
          var alarm_label = variables.ulm_alarm_armed_home;
        } else if(entity.state == "armed_away"){
          var alarm_label = variables.ulm_alarm_armed_away;
        } else if(entity.state == "armed_night"){
          var alarm_label = variables.ulm_alarm_armed_night;
        } else if(entity.state == "disarmed"){
          var alarm_label = variables.ulm_alarm_disarmed;
        } else if(entity.state == "arming"){
          var alarm_label = variables.ulm_alarm_arming;
        } else if(entity.state == "triggered"){
          var alarm_label = variables.ulm_alarm_triggered;
        }
        return alarm_label;
      ]]]
    icon: |
      [[[
        var alarm_icon = "mdi:shield-outline";
        if (entity.state == "armed_home"){
          var alarm_icon = "mdi:shield-home";
        } else if(entity.state == "armed_away"){
          var alarm_icon = "mdi:shield-lock";
        } else if(entity.state == "armed_night"){
          var alarm_icon = "mdi:shield-moon";
        } else if(entity.state == "disarmed"){
          var alarm_icon = "mdi:shield-off";
        } else if(entity.state == "arming"){
          var alarm_icon = "mdi:shield";
        } else if(entity.state == "triggered"){
          var alarm_icon = "mdi:shield-alert";
        }
        return alarm_icon;
      ]]]
    styles:
      icon:
        - color: |
            [[[
              var alarm_color = "var(--google-yellow)";
              if (entity.state == "armed_home"){
                var alarm_color = "var(--google-red)";
              } else if(entity.state == "armed_away"){
                var alarm_color = "var(--google-red)";
              } else if(entity.state == "armed_night"){
                var alarm_color = "var(--google-red)";
              } else if(entity.state == "disarmed"){
                var alarm_color = "var(--google-green)";
              } else if(entity.state == "arming"){
                var alarm_color = "var(--google-yellow)";
              } else if(entity.state == "triggered"){
                var alarm_color = "var(--google-red)";
              }
              return alarm_color;
            ]]]
  ### Chip Navigate ###
  chip_navigate:
    template: "chips"
    tap_action:
      action: "navigate"
      navigation_path: "[[[ return variables.ulm_chip_navigate_path; ]]]"
    show_icon: true
    icon: "[[[ return variables.ulm_chip_navigate_icon; ]]]"
    styles:
      grid:
        - grid-template-areas: "'i l'"
      icon:
        - color: "[[[ return variables.ulm_chip_navigate_icon_color; ]]]"
      label:
        - color: "[[[ return variables.ulm_chip_navigate_label_color; ]]]"
  ### Chip Presence Detection ###
  chip_presence_detection:
    template: "chips"
    triggers_update: "all"
    label: |
      [[[
        if (!!variables.ulm_chip_presence_counter_guests) {
          return "🏠 " +  states[variables.ulm_chip_presence_counter_residents].state + " / " + states[variables.ulm_chip_presence_counter_guests].state;
        } else {
          return "🏠 " +  states[variables.ulm_chip_presence_counter_residents].state;
        }
      ]]]
  chip_weather_date:
    template: "chips"
    entity: "[[[ return variables.ulm_weather]]]"
    variables:
      ulm_language: "[[[return window.navigator.language ]]]"
    triggers_update: "all"
    tap_action:
      action: "more-info"
    label: |
      [[[
        const event = new Date();
        const options = {month: 'short', day: 'numeric' };
        var locale = variables.ulm_language;
        let formatted_date = event.toLocaleDateString(locale, options);
  
        var icon = '🌡️';
        if (states[variables.ulm_weather].state == 'clear-night'){
          var icon = '🌙';
        } else if(states[variables.ulm_weather].state == 'cloudy'){
          var icon = '☁️';
        } else if(states[variables.ulm_weather].state == 'exceptional'){
          var icon = '🌞';
        } else if(states[variables.ulm_weather].state == 'fog'){
          var icon = '🌫️';
        } else if(states[variables.ulm_weather].state == 'hail'){
          var icon = '⛈️';
        } else if(states[variables.ulm_weather].state == 'lightning'){
          var icon = '⚡';
        } else if(states[variables.ulm_weather].state == 'lightning-rainy'){
          var icon = '⛈️';
        } else if(states[variables.ulm_weather].state == 'partlycloudy'){
          var icon = '⛅';
        } else if(states[variables.ulm_weather].state == 'pouring'){
          var icon = '🌧️';
        } else if(states[variables.ulm_weather].state == 'rainy'){
          var icon = '💧';
        } else if(states[variables.ulm_weather].state == 'snowy'){
          var icon = '❄️';
        } else if(states[variables.ulm_weather].state == 'snowy-rainy'){
          var icon = '🌨️';
        } else if(states[variables.ulm_weather].state == 'sunny'){
          var icon = '☀️';
        } else if(states[variables.ulm_weather].state == 'windy'){
          var icon = '🌪️';
        }
        return icon + ' ' + formatted_date
      ]]]
  ### Chip Back ###
  chip_back:
    template: "chips"
    tap_action:
      action: "navigate"
      navigation_path: "[[[ return variables.ulm_chip_back_path; ]]]"
    show_icon: true
    icon: "mdi:arrow-left"
    styles:
      grid:
        - grid-template-areas: "'i'"
  ### Chip Power Consumption ###
  chip_power_consumption:
    template:
      - "chips"
      - "ulm_language_variables"
    triggers_update: "all"
    label: |
      [[[
        var amount = variables.ulm_chip_electric_price != "" ? true : false
        if (amount){
          return "⚡ " +  states[variables.ulm_chip_electric_price].state + variables.ulm_currency;
        } else {
          return "⚡ " +  states[variables.ulm_chip_electric_consumption].state + states[variables.ulm_chip_electric_consumption].attributes.unit_of_measurement;
        }
      ]]]
  ## Chips Icon Label ###
  chip_icon_label:
    template: "chips"
    show_icon: true
    show_name: false
    show_label: true
    size: "100%"
    styles:
      card:
        - box-shadow: "var(--box-shadow)"
        - padding-top: "6px"
        - padding-button: "6px"
        - padding-left: "12px"
        - padding-right: "6px"
      grid:
        - grid-template-areas: "'i l'"
        - grid-template-columns: "max_content auto"
        - grid-template-rows: "min-content"
      img_cell:
        - place-self: "center"
        - width: "14px"
        - height: "24px"
      label:
        - justify-self: "center"
        - font-weight: "bold"
        - font-size: "12px"
        - margin-left: "0px"
  ### Chip Icon Only ###
  chip_icon_only:
    template: "chips"
    label: |
      [[[
        var icon = "❔";
        if (variables.ulm_chip_icon_only){
          var icon = variables.ulm_chip_icon_only;
        }
        return icon;
      ]]]
  ### Chip Icon State ###
  chip_icon_state:
    template: "chips"
    triggers_update: "all"
    label: |
      [[[
        var icon = "❔";
        if (variables.ulm_chip_icon_state_icon){
          var icon = variables.ulm_chip_icon_state_icon;
        }
        var state = "";
        if (states[variables.ulm_chip_icon_state_entity].state){
          var state = states[variables.ulm_chip_icon_state_entity].state;
          if (states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement){
            state += states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement;
          }
        }
        return icon + " " + state;
      ]]]
  ### Chip Temperature ###
  chip_temperature:
    template: "chips"
    triggers_update: "all"
    label: |
      [[[
        var icon = "🌡️";
        var weather_state = states[variables.ulm_chip_temperature_weather].state;
        if (weather_state == "clear-night"){
          var icon = "🌙";
        } else if(weather_state == "cloudy"){
          var icon = "☁️";
        } else if(weather_state == "exceptional"){
          var icon = "🌞";
        } else if(weather_state == "fog"){
          var icon = "🌫️";
        } else if(weather_state == "hail"){
          var icon = "⛈️";
        } else if(weather_state == "lightning"){
          var icon = "⚡";
        } else if(weather_state == "lightning-rainy"){
          var icon = "⛈️";
        } else if(weather_state == "partlycloudy"){
          var icon = "⛅";
        } else if(weather_state == "pouring"){
          var icon = "🌧️";
        } else if(weather_state == "rainy"){
          var icon = "💧";
        } else if(weather_state == "snowy"){
          var icon = "❄️";
        } else if(weather_state == "snowy-rainy"){
          var icon = "🌨️";
        } else if(weather_state == "sunny"){
          var icon = "☀️";
        } else if(weather_state == "windy"){
          var icon = "🌪️";
        }
        function convertTemperature(temp) {
          if (parseFloat(temp) == temp && Math.floor(temp) != temp) {
              return parseFloat(temp).toFixed(1);
          }
          return temp;
        }
        var outside_temp = states[variables.ulm_chip_temperature_outside].state;
        var inside_temp = states[variables.ulm_chip_temperature_inside].state;
        return icon + " " + convertTemperature(outside_temp) + "° / " + convertTemperature(inside_temp) + "°" ;
      ]]]
  ### Chip Mdi Icon State ###
  chip_mdi_icon_state:
    template: "chips"
    tap_action:
      action: "more-info"
      entity: "[[[ return variables.ulm_chip_mdi_icon_state_entity ]]]"
    triggers_update: "all"
    show_icon: true
    icon: "[[[ return variables.ulm_chip_mdi_icon_state_icon ]]]"
    label: "[[[ return states[variables.ulm_chip_mdi_icon_state_entity].state ]]]"
    styles:
      grid:
        - grid-template-areas: "'i l'"
      icon:
        - color: "[[[ return variables.ulm_chip_mdi_icon_state_icon_color; ]]]"
      label:
        - color: "[[[ return variables.ulm_chip_mdi_icon_state_label_color; ]]]"
  ### Chip Icon Double State ###
  chip_icon_double_state:
    template: "chips"
    tap_action:
      action: "navigate"
      navigation_path: "[[[ return variables.ulm_chip_navigate_path; ]]]"
    triggers_update: "all"
    label: |
      [[[
        var icon = "❔";
        if (variables.ulm_chip_icon_double_state_icon){
          var icon = variables.ulm_chip_icon_double_state_icon;
        }
        var state1 = "";
        if (states[variables.ulm_chip_icon_double_state_entity_1].state){
          var state1 = states[variables.ulm_chip_icon_double_state_entity_1].state;
          if (states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement){
            state1 += states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement;
          }
        }
        var state2 = "";
        if (states[variables.ulm_chip_icon_double_state_entity_2].state){
          var state2 = states[variables.ulm_chip_icon_double_state_entity_2].state;
          if (states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement){
            state2 += states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement;
          }
        }
        return icon + " " + state1 + " • " + state2;
      ]]]
  ### Card Title ###
  card_title:
    tap_action:
      action: "none"
    show_icon: false
    show_label: true
    show_name: true
    styles:
      card:
        - background-color: "rgba(0,0,0,0)"
        - box-shadow: "none"
        - height: "auto"
        - width: "auto"
        - margin-top: "6px"
        - margin-left: "18px"
        - margin-bottom: "0px"
        - padding: "6px"
      grid:
        - grid-template-areas: "'n' 'l'"
        - grid-template-columns: "1fr"
        - grid-template-rows: "min-content min-content"
      name:
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "1.5rem"
      label:
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "1rem"
        - opacity: "0.4"
  ### Vertical Buttons ###
  vertical_buttons:
    show_label: true
    label: "[[[ return (entity.attributes.value )]]]"
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "center"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
      name:
        - margin-top: "10px"
        - justify-self: "center"
        - font-weight: "bold"
        - font-size: "14px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i' 'n' 'l'"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "10px 0px 8px 0px"
    size: "20px"
  ### Vertical Buttons Custom State ###
  vertical_buttons_custom_state:
    template: "vertical_buttons"
    variables:
      state: "default"
      # blue, red, green, yellow, purple, pink
      color: "blue"
    show_last_changed: false
    name: "[[[ return variables.state ]]]"
    styles:
      name:
        - text-transform: "capitalize"
    state:
      - operator: "template"
        value: "[[[ return entity.state == variables.state ]]]"
        styles:
          icon:
            - color: "[[[ return `rgba(var(--color-${variables.color}), 1)`; ]]]"
          label:
            - color: "[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]"
          name:
            - color: "[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]"
          img_cell:
            - background-color: "[[[ return `rgba(var(--color-${variables.color}), 0.2)`; ]]]"
          card:
            - background-color: "[[[ return `rgba(var(--color-background-${variables.color}), var(--opacity-bg))`; ]]]"
    tap_action:
      action: "call-service"
      service: "input_select.select_option"
      service_data:
        entity_id: "[[[ return entity.entity_id ]]]"
        option: "[[[ return variables.state ]]]"
  ### Card Generic Swap ###
  card_generic_swap:
    template:
      - "icon_info_bg"
      - "ulm_language_variables"
    label: >
      [[[
        var unit = entity.attributes.unit_of_measurement != null ? " " + entity.attributes.unit_of_measurement : ""
        if (entity.state == "on") {
          return variables.ulm_on;
        } else if (entity.state == "off") {
          return variables.ulm_off;
        } else if (entity.state == "unavailable") {
          return variables.ulm_unavailable;
        } else if (entity.state == "idle") {
          return variables.ulm_idle;
        } else if (entity.state == "open") {
          return variables.ulm_open;
        } else if (entity.state == "closed") {
          return variables.ulm_closed;
        } else {
          return entity.state + unit;
        }
      ]]]
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.9)"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      name:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - filter: "opacity(100%)"
      grid:
        - grid-template-areas: "'i n' 'i l'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
  card_scenes:
    show_icon: false
    show_name: true
    show_label: false
    variables:
      entity_1:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_2:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_3:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_4:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_5:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_6:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_7:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
    styles:
      grid:
        - grid-template-areas: >
            [[[
              var pills = []
              const entities = [variables.entity_1.entity_id, variables.entity_2.entity_id, variables.entity_3.entity_id, variables.entity_4.entity_id, variables.entity_5.entity_id, variables.entity_6.entity_id, variables.entity_7.entity_id]
              function entity_check(item) {
                  if (item != "") {
                      pills.push("item" + (pills.length+1))
                  }
              }
              entities.forEach(entity_check)
              return pills.join(" ")
            ]]]
        - display: "flex"
        - grid-template-rows: "min-content"
        - justify-content: "space-evenly"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
        - overflow: "visible"
      custom_fields:
        item1:
          - display: "[[[ return (variables.entity_1.entity_id != '') ? 'block' : 'none' ]]]"
        item2:
          - display: "[[[ return (variables.entity_2.entity_id != '') ? 'block' : 'none' ]]]"
        item3:
          - display: "[[[ return (variables.entity_3.entity_id != '') ? 'block' : 'none' ]]]"
        item4:
          - display: "[[[ return (variables.entity_4.entity_id != '') ? 'block' : 'none' ]]]"
        item5:
          - display: "[[[ return (variables.entity_5.entity_id != '') ? 'block' : 'none' ]]]"
        item6:
          - display: "[[[ return (variables.entity_6.entity_id != '') ? 'block' : 'none' ]]]"
        item7:
          - display: "[[[ return (variables.entity_7.entity_id != '') ? 'block' : 'none' ]]]"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_1; ]]]"
          entity: "[[[ return variables.entity_1.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_1.entity_id ]]]"
                icon: "[[[ return variables.entity_1.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_1.entity_id ]]]"
                name: "[[[ return variables.entity_1.name ]]]"
      item2:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_2; ]]]"
          entity: "[[[ return variables.entity_2.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_2.entity_id ]]]"
                icon: "[[[ return variables.entity_2.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_2.entity_id ]]]"
                name: "[[[ return variables.entity_2.name ]]]"
      item3:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_3; ]]]"
          entity: "[[[ return variables.entity_3.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_3.entity_id ]]]"
                icon: "[[[ return variables.entity_3.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_3.entity_id ]]]"
                name: "[[[ return variables.entity_3.name ]]]"
      item4:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_4; ]]]"
          entity: "[[[ return variables.entity_4.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_4.entity_id ]]]"
                icon: "[[[ return variables.entity_4.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_4.entity_id ]]]"
                name: "[[[ return variables.entity_4.name ]]]"
      item5:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_5; ]]]"
          entity: "[[[ return variables.entity_5.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_5.entity_id ]]]"
                icon: "[[[ return variables.entity_5.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_5.entity_id ]]]"
                name: "[[[ return variables.entity_5.name ]]]"
      item6:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_6; ]]]"
          entity: "[[[ return variables.entity_6.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_6.entity_id ]]]"
                icon: "[[[ return variables.entity_6.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_6.entity_id ]]]"
                name: "[[[ return variables.entity_6.name ]]]"
      item7:
        card:
          type: "custom:button-card"
          template: "card_scenes_pill_welcome"
          variables: "[[[ return variables.entity_7; ]]]"
          entity: "[[[ return variables.entity_7.entity_id ]]]"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_7.entity_id ]]]"
                icon: "[[[ return variables.entity_7.icon ]]]"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.entity_7.entity_id ]]]"
                name: "[[[ return variables.entity_7.name ]]]"
  ### Card Script ###
  card_script:
    template:
      - "icon_only"
    label: "[[[ return variables.ulm_card_script_title; ]]]"
    icon: "[[[ return variables.ulm_card_script_icon; ]]]"
    styles:
      icon:
        - color: "rgba(var(--color-blue),0.7)"
      label:
        - align-self: "center"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - filter: "opacity(100%)"
      img_cell:
        - background-color: "rgba(var(--color-blue), 0.2)"
      grid:
        - grid-template-areas: "'i l'"
        - grid-template-columns: "min-content min-content"
        - grid-template-rows: "min-content"
  ### VERTICAL BUTTONS (fka SCENES) ###
  card_vertical_button:
    variables:
      ulm_card_vertical_button_color: "blue"
      ulm_card_vertical_button_state: "on"
    show_label: true
    label: ""
    name: |
      [[[
        if( entity.entity_id.startsWith("input_select.") )
          return variables.ulm_card_vertical_button_state;
        else if( entity.entity_id.startsWith("input_boolean.") )
          return "";
        return entity.state;
      ]]]
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      label:
        - justify-self: "center"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
      name:
        - margin-top: "10px"
        - justify-self: "center"
        - font-weight: "bold"
        - font-size: "14px"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - place-self: "center"
        - width: "42px"
        - height: "42px"
      grid:
        - grid-template-areas: "'i' 'n' 'l'"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "10px 0px 8px 0px"
    size: "20px"
    state:
      - operator: "template"
        value: |
          [[[
            return entity.state == variables.ulm_card_vertical_button_state;
          ]]]
        styles:
          icon:
            - color: "[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}), 1)`; ]]]"
          label:
            - color: "[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}-text), 1)`; ]]]"
          name:
            - color: "[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}-text), 1)`; ]]]"
          img_cell:
            - background-color: "[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}), 0.2)`; ]]]"
          card:
            - background-color: "[[[ return `rgba(var(--color-background-${variables.ulm_card_vertical_button_color}), var(--opacity-bg))`; ]]]"
    tap_action:
      action: "call-service"
      service: |
        [[[
          if( entity.entity_id.startsWith("input_select.") )
            return "input_select.select_option";
          if( entity.entity_id.startsWith("input_boolean.") )
            return "input_boolean.toggle";
          if( entity.entity_id.startsWith("switch.") )
            return "switch.toggle";
          if( entity.entity_id.startsWith("light.") )
            return "light.toggle";
          if( entity.entity_id.startsWith("automation.") )
            return "automation.toggle";
          if( entity.entity_id.startsWith("input_button.") )
            return "input_button.press";
          // If we need to support other entities we can add these options here.
          return "";
        ]]]
      service_data: |
        [[[
          var obj;
          if( entity.entity_id.startsWith("input_select.") )
            obj = { entity_id: entity.entity_id, option: variables.ulm_card_vertical_button_state };
          else
            obj = { entity_id: entity.entity_id };
          return obj;
        ]]]
  ### Card Battery ###
  card_battery:
    template:
      - "icon_info_bg"
      - "ulm_language_variables"
    tap_action:
      action: "more-info"
    variables:
      ulm_card_battery_attribute:
      ulm_card_battery_battery_state_entity_id:
      ulm_card_battery_charger_type_entity_id:
      ulm_card_battery_battery_level_danger:
      ulm_card_battery_battery_level_warning:
      ulm_card_battery_color_battery_level_danger: "var(--google-red)"
      ulm_card_battery_color_battery_level_warning: "var(--google-yellow)"
      ulm_card_battery_color_battery_level_ok: "var(--google-green)"
    triggers_update: "all"
    icon: |
      [[[
        // Get battery level
        const battery_level = variables.ulm_card_battery_attribute !== null ?
          states[entity.entity_id].attributes[variables.ulm_card_battery_attribute] :
          states[entity.entity_id].state;
  
        // Generate icon infix
        let infix = "";
        if (variables.ulm_card_battery_charger_type_entity_id == null) {
          // Check wether the battery state is charging
          infix = variables.ulm_card_battery_battery_state_entity_id !== null &&
            states[variables.ulm_card_battery_battery_state_entity_id].state.toLowerCase() === "charging" ?
            "-charging" : ""
        } else {
          // Select the infix based on the entity charging state
          switch (states[variables.ulm_card_battery_charger_type_entity_id].state.toLowerCase()) {
            case "wireless":
              infix = "-charging-wireless";
              break;
            case "charging":
              infix = "-charging";
              break;
            case "ac":
              infix = "-charging";
              break;
            case "usb":
              infix = "-charging";
              break;
            default:
              infix = "";
          }
        }
  
        // Generate the icon based on the battery_level
        let icon = "mdi:help-circle-outline";
        if (battery_level == 100) {
          icon = "mdi:battery";
        } else if (battery_level < 10) {
          icon = "mdi:battery" + infix + "-outline";
        } else if (battery_level == "unknown" || battery_level == "unavailable") {
          icon = "mdi:battery-off";
        } else {
          icon = "mdi:battery" + infix + "-" + Math.floor(battery_level / 10) * 10;
        }
  
        return icon;
      ]]]
    label: |
      [[[
        const battery_level = variables.ulm_card_battery_attribute !== null
          ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]
          : states[entity.entity_id].state;
        if(battery_level == "unknown")
        { return variables.ulm_unavailable; }
        else
        { return battery_level + "%"; }
      ]]]
    name: |
      [[[
        return states[entity.entity_id].attributes.friendly_name;
      ]]]
    styles:
      icon:
        - color: |
            [[[
              const battery_level = variables.ulm_card_battery_attribute !== null ?
                states[entity.entity_id].attributes[variables.ulm_card_battery_attribute] :
                states[entity.entity_id].state;
  
              // Get the color based on battery_level
              let color = "rgba(var(--color-theme), 0.9)";
              if (battery_level !== "unavailable" && (variables.ulm_card_battery_battery_level_danger !== null || variables.ulm_card_battery_battery_level_warning !== null)) {
                if (battery_level <= variables.ulm_card_battery_battery_level_danger) {
                  color = variables.ulm_card_battery_color_battery_level_danger;
                } else if (battery_level <= variables.ulm_card_battery_battery_level_warning) {
                  color = variables.ulm_card_battery_color_battery_level_warning;
                } else if (battery_level == "unknown" || battery_level == "unavailable") {
                  color = variables.ulm_card_battery_color_battery_level_danger;
                } else {
                  color = variables.ulm_card_battery_color_battery_level_ok;
                }
              }
  
              return color;
            ]]]
      label:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - filter: "opacity(100%)"
      name:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      grid:
        - grid-template-areas: "'i l' 'i n'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
  ### Card Navigate ###
  card_navigate:
    template:
      - "icon_only"
      - "blue_no_state"
    tap_action:
      action: "navigate"
      navigation_path: "[[[ return variables.ulm_card_navigate_path; ]]]"
    label: "[[[ return variables.ulm_card_navigate_title; ]]]"
    icon: "[[[ return variables.ulm_card_navigate_icon; ]]]"
    styles:
      icon:
        - color: "rgba(var(--color-blue),0.7)"
      label:
        - align-self: "center"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - filter: "opacity(100%)"
      img_cell:
        - background-color: "rgba(var(--color-blue), 0.2)"
      grid:
        - grid-template-areas: "'i l'"
        - grid-template-columns: "min-content min-content"
        - grid-template-rows: "min-content"
  card_vacuum:
    show_name: false
    show_icon: false
    show_label: false
    template:
      - "ulm_language_variables"
    variables:
      ulm_card_vacuum_name: "[[[ return entity.attributes.friendly_name ]]]"
      ulm_card_vacuum_icon: "[[[ return entity.attributes.icon ]]]"
      ulm_card_vacuum_room:
      ulm_card_vacuum_room_icon: "[[[ return entity.attributes.icon ]]]"
      ulm_card_vacuum_camera:
      ulm_card_vacuum_camera_toggle:
    triggers_update: "all"
    styles:
      grid:
        - grid-template-areas: >
            [[[
              if( variables.ulm_card_vacuum_camera ){
                if ( variables.ulm_card_vacuum_camera_toggle ) {
                  if( entity.state.toLowerCase() === 'cleaning' ){
                    return "'item1' 'item3' 'item2'";
                  } else {
                    return "'item1' 'item2'";
                  }
                } else {
                  return "'item1' 'item3' 'item2'";
                }
              } else {
                return "'item1' 'item2'";
              }
            ]]]
        - grid-template-columns: "1fr"
        - grid-template-rows: >
            [[[
              if( variables.ulm_card_vacuum_camera ){
                if ( variables.ulm_card_vacuum_camera_toggle ) {
                  if( entity.state.toLowerCase() === 'cleaning' ){
                    return "repeat(3, min-content)";
                  } else {
                    return "repeat(2, min-content)";
                  }
                } else {
                  return "repeat(3, min-content)";
                }
              } else {
                return "repeat(2, min-content)";
              }
            ]]]
        - row-gap: "12px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
        - background-color: >
            [[[
              if(hass.themes.darkMode)
                if( entity.state.toLowerCase() === 'cleaning' ){
                  return 'rgba(var(--color-blue),0.1)'
                } else if( entity.state.toLowerCase() === 'paused' ){
                  return 'rgba(var(--color-green),0.1)'
                } else if( entity.state.toLowerCase() === 'mopping' ){
                  return 'rgba(var(--color-yellow),0.1)'
                } else if( entity.state.toLowerCase() === 'returning' ){
                  return 'rgba(var(--color-purple),0.1)'
                }
            ]]]
      custom_fields:
        item3:
          - display: >
              [[[
                if( variables.ulm_card_vacuum_camera ){
                  if ( variables.ulm_card_vacuum_camera_toggle ) {
                    if( entity.state.toLowerCase() === 'cleaning' ){
                      return "block";
                    } else {
                      return "none";
                    }
                  } else {
                    return "block";
                  }
                } else {
                  return "none";
                }
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "icon_more_info"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "[[[ return variables.ulm_card_vacuum_icon ]]]"
                styles:
                  icon:
                    - color: >
                        [[[
                          if( entity.state.toLowerCase() === 'cleaning' ){
                            return 'rgba(var(--color-blue),1)'
                          } else if( entity.state.toLowerCase() === 'paused' ){
                            return 'rgba(var(--color-green),1)'
                          } else if( entity.state.toLowerCase() === 'mopping' ){
                            return 'rgba(var(--color-yellow),1)'
                          } else if( entity.state.toLowerCase() === 'returning' ){
                            return 'rgba(var(--color-purple),1)'
                          } else if( entity.state.toLowerCase() === 'error' ){
                            return 'rgba(var(--color-red),1)'
                          } else {
                          return 'rgba(var(--color-theme),0.2)'
                          }
                        ]]]
                  img_cell:
                    - background-color: >
                        [[[
                          if( entity.state.toLowerCase() === 'cleaning' ){
                            return 'rgba(var(--color-blue),0.2)'
                          } else if( entity.state.toLowerCase() === 'paused' ){
                            return 'rgba(var(--color-green),0.2)'
                          } else if( entity.state.toLowerCase() === 'mopping' ){
                            return 'rgba(var(--color-yellow),0.2)'
                          } else if( entity.state.toLowerCase() === 'returning' ){
                            return 'rgba(var(--color-purple),0.2)'
                          } else if( entity.state.toLowerCase() === 'error' ){
                            return 'rgba(var(--color-red),0.2)'
                          } else {
                          return 'rgba(var(--color-theme),0.05)'
                          }
                        ]]]
            item2:
              card:
                type: "custom:button-card"
                templates:
                  - "ulm_language_variables"
                entity: "[[[ return entity.entity_id ]]]"
                name: "[[[ return variables.ulm_card_vacuum_name ]]]"
                label: >
                  [[[
                    let label = entity.attributes.friendly_name
                    if(variables.ulm_card_vacuum_label){
                      label = variables.ulm_card_vacuum_label;
                    } else if(entity.state.toLowerCase() === 'cleaning'){
                      label = variables.ulm_cleaning;
                    } else if(entity.state.toLowerCase() === 'idle'){
                      label = variables.ulm_idle;
                    } else if(entity.state.toLowerCase() === 'paused'){
                      label = variables.ulm_paused;
                    } else if(entity.state.toLowerCase() === 'returning'){
                      label = variables.ulm_returning;
                    } else if(entity.state.toLowerCase() === 'docked'){
                      label = variables.ulm_docked;
                    } else if(entity.state.toLowerCase() === 'mopping'){
                      label = variables.ulm_mopping;
                    } else {
                      label = entity.state;
                    }
                    return label
                  ]]]
      item2:
        card:
          type: "custom:button-card"
          template: "list_4_items"
          styles:
            card:
              - padding: "0px"
              - background: "none"
              - border-radius: "0"
              - box-shadow: "none"
            grid:
              - grid-template-areas: >
                  [[[
                    if(variables.ulm_card_vacuum_room){
                      return "'item1 item2 item3 item4'";
                    } else {
                      return "'item1 item2 item3'";
                    }
                  ]]]
              - grid-template-columns: >
                  [[[
                    if(variables.ulm_card_vacuum_room){
                      return "1fr 1fr 1fr 1fr";
                    } else {
                      return "1fr 1fr 1fr";
                    }
                  ]]]
            custom_fields:
              item4:
                - display: >
                    [[[
                      if(variables.ulm_card_vacuum_room){
                        return "block";
                      } else {
                        return "none";
                      }
                    ]]]
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:play"
                state:
                  - operator: "template"
                    value: "[[[ return entity.state.toLowerCase() === 'cleaning' ]]]"
                    icon: "mdi:stop"
                    tap_action:
                      action: "call-service"
                      service: "vacuum.stop"
                      service_data:
                        entity_id: "[[[ return entity.entity_id ]]]"
                tap_action:
                  action: "call-service"
                  service: >
                    [[[
                      if (entity.state.toLowerCase() === 'cleaning'){
                        return "vacuum.stop"
                      } else {
                        return "vacuum.start"
                      }
                    ]]]
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
            item2:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:home-map-marker"
                tap_action:
                  action: "call-service"
                  service: "vacuum.return_to_base"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
            item3:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:map-marker"
                state:
                tap_action:
                  action: "call-service"
                  service: "vacuum.locate"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
            item4:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return variables.ulm_card_vacuum_room ]]]"
                icon: "[[[ return variables.ulm_card_vacuum_room_icon ]]]"
                tap_action:
                  action: "call-service"
                  service: "script.turn_on"
                  service_data:
                    entity_id: "[[[ return variables.ulm_card_vacuum_room ]]]"
      item3:
        card:
          type: "picture-entity"
          camera_view: "live"
          entity: "[[[ return variables.ulm_card_vacuum_camera ]]]"
          show_name: false
          show_state: false
  ### Card Weather ###
  card_weather:
    variables:
      ulm_card_weather_backdrop: false
      ulm_card_weather_primary_info: "extrema"
      ulm_card_weather_secondary_info: "precipitation"
    show_icon: false
    show_name: false
    show_label: false
    styles:
      grid:
        - grid-template-areas: "'item1'"
        - grid-template-columns: "1fr"
        - grid-template-rows: "min-content"
        - row-gap: "12px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "0px"
    custom_fields:
      item1:
        card:
          type: "custom:simple-weather-card"
          entity: "[[[ return entity.entity_id; ]]]"
          name: "[[[ return variables.ulm_card_weather_name || entity.attributes.friendly_name ]]]"
          primary_info: "[[[ return variables.ulm_card_weather_primary_info ]]]"
          secondary_info: "[[[ return variables.ulm_card_weather_secondary_info ]]]"
          backdrop: "[[[ return variables.ulm_card_weather_backdrop ]]]"
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }
            ha-card.type-custom-simple-weather-card {
              padding: 24px;
            }
            ha-card[bg].type-custom-simple-weather-card{
              color: white;
            }
            ha-card.type-custom-simple-weather-card .weather__info {
              text-align: left
            }
  ### Card Power Outlet ###
  card_power_outlet:
    template:
      - "icon_info_bg"
      - "yellow"
      - "ulm_language_variables"
    variables:
      ulm_card_power_outlet_consumption_sensor:
    triggers_update: "all"
    label: |-
      [[[
        if (entity.state === "on" && variables.ulm_card_power_outlet_consumption_sensor !== null) {
          return variables.ulm_on + " • " + states[variables.ulm_card_power_outlet_consumption_sensor].state + "W";
        } else if (entity.state === "on") {
          return variables.ulm_on;
        } else if (entity.state === "off") {
          return variables.ulm_off;
        } else if (entity.state === "unavailable") {
          return variables.ulm_unavailable;
        } else {
          return entity.state;
        }
      ]]]
  ### Card Binary Sensor ###
  card_binary_sensor:
    template:
      - "icon_info_bg"
      - "blue"
    name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
    show_last_changed: true
  ### Card Input Boolean ###
  card_input_boolean:
    template:
      - "icon_info_bg"
      - "ulm_language_variables"
      - "blue"
    name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
    label: >
      [[[
        if (entity.state != "unavailable"){
          if (entity.state == "on"){
            return variables.ulm_on;
          } else {
            return variables.ulm_off;
          }
        } else {
          return variables.ulm_unavailable;
        }
      ]]]
  ### Card Generic ###
  card_generic:
    template:
      - "icon_info_bg"
      - "ulm_language_variables"
    label: >
      [[[
        var unit = entity.attributes.unit_of_measurement != null ? " " + entity.attributes.unit_of_measurement : ""
        if (entity.state == "on") {
          return variables.ulm_on;
        } else if (entity.state == "off") {
          return variables.ulm_off;
        } else if (entity.state == "unavailable") {
          return variables.ulm_unavailable;
        } else if (entity.state == "idle") {
          return variables.ulm_idle;
        } else if (entity.state == "open") {
          return variables.ulm_open;
        } else if (entity.state == "closed") {
          return variables.ulm_closed;
        } else {
          return entity.state + unit;
        }
      ]]]
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.9)"
      label:
        - align-self: "end"
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - filter: "opacity(100%)"
      name:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bolder"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
      grid:
        - grid-template-areas: "'i l' 'i n'"
        - grid-template-columns: "min-content auto"
        - grid-template-rows: "min-content min-content"
  ### Card Person ###
  card_person:
    template:
      - "icon_info_bg"
      - "ulm_language_variables"
    variables:
      ulm_card_person_use_entity_picture: false
      ulm_card_person_zone1: ""
      ulm_card_person_zone2: ""
      ulm_address: ""
    triggers_update: "all"
    tap_action:
      action: "more-info"
      entity: "[[[ return variables.ulm_card_person_entity; ]]]"
    show_label: true
    show_name: true
    label: >
      [[[
        if (variables.ulm_address !== ''){
          return states[variables.ulm_address].state
        } else {
          let state = states[variables.ulm_card_person_entity].state;
          return variables["ulm_person_state_" + state] ? variables["ulm_person_state_" + state] : state;
        }
      ]]]
    name: "[[[ return states[variables.ulm_card_person_entity].attributes.friendly_name ]]]"
    entity: "[[[ return variables.ulm_card_person_entity; ]]]"
    icon: "mdi:face-man"
    show_entity_picture: "[[[ return variables.ulm_card_person_use_entity_picture ]]]"
    entity_picture: "[[[ return variables.ulm_card_person_use_entity_picture != false ? states[variables.ulm_card_person_entity].attributes.entity_picture\
      \ : null ]]]"
    styles:
      icon:
        - color: "rgba(var(--color-theme),0.9)"
        - width: >
            [[[
              if (variables.ulm_card_person_use_entity_picture !== true){
                return "20px";
              } else {
                return "42px";
              }
            ]]]
        - place-self: >
            [[[
              if (variables.ulm_card_person_use_entity_picture !== true){
                return "center";
              } else {
                return "stretch stretch";
              }
            ]]]
      custom_fields:
        notification:
          - border-radius: "50%"
          - position: "absolute"
          - left: "38px"
          - top: "8px"
          - height: "16px"
          - width: "16px"
          - border: "2px solid var(--card-background-color)"
          - font-size: "12px"
          - line-height: "14px"
          - background-color: >
              [[[
                if (states[variables.ulm_card_person_entity].state !== 'home') {
                  return "rgba(var(--color-green),1)";
                } else {
                  return "rgba(var(--color-blue),1)";
                }
              ]]]
    custom_fields:
      notification: >
        [[[
          if (states[variables.ulm_card_person_entity].state !== 'home') {
            if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone1]?.attributes?.friendly_name) {
              var icon = states[variables.ulm_card_person_zone1].attributes.icon !== null ? states[variables.ulm_card_person_zone1].attributes.icon : 'mdi:help-circle'
              return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
            } else if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone2]?.attributes?.friendly_name) {
              var icon = states[variables.ulm_card_person_zone2].attributes.icon !== null ? states[variables.ulm_card_person_zone2].attributes.icon : 'mdi:help-circle'
              return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
            } else {
              return '<ha-icon icon="mdi:home-minus" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
            }
          } else {
            return '<ha-icon icon="mdi:home-variant" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          }
        ]]]
  ### Card Cover ###
  card_cover:
    template:
      - "ulm_language_variables"
    variables:
      ulm_card_cover_name: "[[[ return entity.attributes.friendly_name ]]]"
      ulm_card_cover_display_left_right: false
      ulm_card_curtain_display_collapse_expand: false
      ulm_card_cover_garage: false
      ulm_card_cover_gate: false
      ulm_card_cover_enable_controls: false
      ulm_card_cover_enable_slider: false
      ulm_card_cover_enable_horizontal: false
      ulm_card_cover_enable_popup: false
    show_icon: false
    show_name: false
    show_label: false
    # hold_action:
    #   action: >
    #     [[[
    #         if (variables.ulm_card_cover_enable_popup){
    #           return 'fire-dom-event'
    #         }
    #         else{
    #           return 'more-info'
    #         }
    #     ]]]
    #   browser_mod:
    #     command: "popup"
    #     large: true
    #     hide_header: true
    #     card:
    #       type: "custom:button-card"
    #       template: "popup_cover_brightness"
    #       variables:
    #         ulm_popup_cover_entity: "[[[ return entity.entity_id ]]]"
    styles:
      grid:
        - grid-template-areas: >
            [[[
                  var areas = [];
                  if (variables.ulm_card_cover_enable_horizontal) {
                    if ( variables.ulm_card_cover_enable_slider) {
                        return "\"item1 item3\"";
                    } else {
                      return "\"item1 item2\"";
                    }
                  } else {
                    areas.push("item1 item1");
                    if ( variables.ulm_card_cover_enable_controls) {
                        areas.push("item2 item2");
                    }
                    if ( variables.ulm_card_cover_enable_slider) {
                        areas.push("item3 item3");
                    }
                }
                  return "\"" + areas.join("\" \"") + "\"";
            ]]]
        - grid-template-columns: "1fr 1fr"
        - grid-template-rows: >
            [[[
                  var rows = [];
                  rows.push("min-content");
                  if (variables.ulm_card_cover_enable_horizontal) {
                    return "min-content";
                  } else {
                    if ( variables.ulm_card_cover_enable_controls) {
                        rows.push("min-content");
                    }
                    if ( variables.ulm_card_cover_enable_sliderdf) {
                        rows.push("min-content");
                    }
                  }
                  return rows.join(" ");
            ]]]
        - row-gap: "12px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
      custom_fields:
        item2:
          - display: >
              [[[
                    if (variables.ulm_card_cover_enable_controls) {
                        return "block";
                    } else {
                        return "none";
                    }
              ]]]
        item3:
          - display: >
              [[[
                    if (variables.ulm_card_cover_enable_slider) {
                        return "block";
                    } else {
                        return "none";
                    }
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template:
            - "icon_more_info"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                icon: |
                  [[[
                      var icon = "mdi:help-circle";
                      if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
                        if (states[entity.entity_id].state == "closed"){
                          if (variables.ulm_card_curtain_display_collapse_expand){
                            var icon = "mdi:curtains-closed";
                          } else if (variables.ulm_card_cover_garage){
                            var icon = "mdi:garage-variant";
                          } else if (variables.ulm_card_cover_gate){
                            var icon = "mdi:gate";
                          } else
                            var icon = "mdi:window-shutter";
                        } else
                          if (variables.ulm_card_curtain_display_collapse_expand){
                            var icon = "mdi:curtains";
                          } else if (variables.ulm_card_cover_garage){
                            var icon = "mdi:garage-open-variant";
                          } else if (variables.ulm_card_cover_gate){
                            var icon = "mdi:gate-open";
                          }else
                            var icon = "mdi:window-shutter-open";
                      } else {
                        if (states[entity.entity_id].attributes.current_position == 0){
                          if (variables.ulm_card_curtain_display_collapse_expand){
                            var icon = "mdi:curtains-closed";
                          } else if (variables.ulm_card_cover_garage){
                            var icon = "mdi:garage-variant";
                          } else if(variables.ulm_card_cover_gate){
                            var icon = "mdi:gate";
                          } else
                            var icon = "mdi:window-shutter";
                        } else
                          if (variables.ulm_card_curtain_display_collapse_expand){
                            var icon = "mdi:curtains";
                          } else if(variables.ulm_card_cover_garage){
                            var icon = "mdi:garage-open-variant";
                          } else if(variables.ulm_card_cover_gate){
                            var icon = "mdi:gate-open";
                          }
                          else
                            var icon = "mdi:window-shutter-open";
                      }
                      return icon ;
                  ]]]
                # hold_action:
                #   action: >
                #     [[[
                #         if (variables.ulm_card_cover_enable_popup){
                #           return 'fire-dom-event'
                #         }
                #         else{
                #           return 'more-info'
                #         }
                #     ]]]
                # browser_mod:
                #   command: "popup"
                #   large: true
                #   hide_header: true
                #   card:
                #     type: "custom:button-card"
                #     template: "popup_cover_brightness"
                #     variables:
                #       ulm_popup_cover_entity: "[[[ return entity.entity_id ]]]"
                styles:
                  icon:
                    - color: >
                        [[[
                            if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
                              if (states[entity.entity_id].state == "closed"){
                                return 'rgba(var(--color-theme),0.2)';
                              } else
                                return 'rgba(var(--color-blue),1)'
                            } else {
                              if (states[entity.entity_id].attributes.current_position == 0){
                                return 'rgba(var(--color-theme),0.2)';
                              } else {
                                return 'rgba(var(--color-blue),1)'
                              }
                            }
                        ]]]
                  img_cell:
                    - background-color: >
                        [[[
                            if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
                              if (states[entity.entity_id].state == "closed"){
                                return 'rgba(var(--color-theme),0.05)';
                              } else
                                return 'rgba(var(--color-blue),0.2)';
                            } else {
                              if (states[entity.entity_id].attributes.current_position == 0){
                                return 'rgba(var(--color-theme),0.05)';
                              } else {
                                return 'rgba(var(--color-blue),0.2)';
                              }
                            }
                        ]]]
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                name: "[[[ return variables.ulm_card_cover_name ]]]"
                # hold_action:
                #   action: >
                #     [[[
                #         if (variables.ulm_card_cover_enable_popup){
                #           return 'fire-dom-event'
                #         }
                #         else{
                #           return 'more-info'
                #         }
                #     ]]]
                #   browser_mod:
                #     command: "popup"
                #     large: true
                #     hide_header: true
                #     card:
                #       type: "custom:button-card"
                #       template: "popup_cover_brightness"
                #       variables:
                #         ulm_popup_cover_entity: "[[[ return entity.entity_id ]]]"
                label: >-
                  [[[
                      if (entity.state !="unavailable"){
                        if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
                          if (states[entity.entity_id].state == "closed"){
                            return variables.ulm_closed;
                          } else
                            return variables.ulm_open;
                        } else {
                          if (states[entity.entity_id].attributes.current_position == 0){
                            return variables.ulm_closed;
                          } else {
                            return variables.ulm_open + " • " + (states[entity.entity_id].attributes.current_position) + "%" ;
                          }
                        }
                    } else {
                      return variables.ulm_unavailable;
                    }
                  ]]]
      item2:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                state:
                  - value: "closed"
                    styles:
                      icon:
                        - color: "rgba(var(--color-theme),0.4)"
                tap_action:
                  action: "call-service"
                  service: "cover.close_cover"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                icon: >-
                  [[[
                    if (variables.ulm_card_cover_display_left_right){
                      return "mdi:arrow-left";
                    }
                    if (variables.ulm_card_curtain_display_collapse_expand){
                      return "mdi:arrow-collapse-horizontal";
                    }
                    return "mdi:arrow-down";
                  ]]]
            item2:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                tap_action:
                  action: "call-service"
                  service: "cover.stop_cover"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                icon: "mdi:pause"
            item3:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                state:
                  - value: "open"
                    styles:
                      icon:
                        - color: "rgba(var(--color-theme),0.4)"
                tap_action:
                  action: "call-service"
                  service: "cover.open_cover"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                icon: >-
                  [[[
                    if (variables.ulm_card_cover_display_left_right){
                      return "mdi:arrow-right";
                    }
                    if (variables.ulm_card_curtain_display_collapse_expand){
                      return "mdi:arrow-expand-horizontal";
                    }
                    return "mdi:arrow-up";
                  ]]]
      item3:
        card:
          type: "custom:my-slider"
          entity: "[[[ return entity.entity_id ]]]"
          radius: "14px"
          height: "42px"
          mainSliderColor: >
            [[[
                if (entity.state == "unavailable"){
                  return "rgba(var(--color-grey),1)";
                }
                else{
                  return "rgba(var(--color-blue),1)";
                }
            ]]]
          secondarySliderColor: >
            [[[
                if (entity.state == "unavailable"){
                  return "rgba(var(--color-grey),0.2)";
                }
                else{
                  return "rgba(var(--color-blue),0.2)";
                }
            ]]]
          mainSliderColorOff: "rgba(var(--color-theme),0.05)"
          secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
          thumbHorizontalPadding: "0px"
          thumbVerticalPadding: "0px"
          thumbWidth: "0px"
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }
  ### Card Light ###
  card_light:
    template:
      - "ulm_language_variables"
    variables:
      ulm_card_light_name: "[[[ return entity.attributes.friendly_name ]]]"
      ulm_card_light_icon: "[[[ return entity.attributes.icon ]]]"
      ulm_card_light_enable_collapse: false
      ulm_card_light_enable_slider: false
      ulm_card_light_enable_slider_minSet: 0
      ulm_card_light_enable_slider_maxSet: 100
      ulm_card_light_enable_horizontal: false
      ulm_card_light_enable_horizontal_wide: false
      ulm_card_light_enable_color: false
      ulm_card_light_force_background_color: false
      ulm_card_light_enable_popup: false
    show_icon: false
    show_name: false
    show_label: false
    tap_action:
      action: "toggle"
    hold_action:
      action: >
        [[[
            if (variables.ulm_card_light_enable_popup){
              return 'fire-dom-event'
            }
            else{
              return 'more-info'
            }
        ]]]
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_light_brightness"
          variables:
            ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
    state:
      - value: "on"
        styles:
          card:
            - background-color: >-
                [[[
                    var color = entity.attributes.rgb_color;
                    if (variables.ulm_card_light_enable_color == true){
                      if(variables.ulm_card_light_force_background_color == true || hass.themes.darkMode){
                        if (color){
                          return 'rgba(' + color + ',0.1)'
                        } else {
                          return 'rgba(var(--color-yellow-text),0.1)'
                        }
                      }
                    }
                    return 'rgba(var(--color-background-yellow),var(--opacity-bg))';
                ]]]
    styles:
      grid:
        - grid-template-areas: >
            [[[
                  if (variables.ulm_card_light_enable_collapse && entity.state != "on") {
                      return "\"item1\"";
                  } else if (variables.ulm_card_light_enable_horizontal) {
                      return "\"item1 item2\"";
                  } else if (variables.ulm_card_light_enable_slider) {
                      return "\"item1\" \"item2\"";
                  } else {
                      return "\"item1\"";
                  }
            ]]]
        - grid-template-columns: >
            [[[
                  if (variables.ulm_card_light_enable_collapse && entity.state != "on") {
                      return "1fr";
                  } else if (variables.ulm_card_light_enable_horizontal) {
                    if(variables.ulm_card_light_enable_horizontal_wide){
                      return "1fr 2fr";
                      } else {
                        return "1fr 1fr";
                      }
                  } else {
                      return "1fr";
                  }
            ]]]
        - grid-template-rows: >
            [[[
                  if (variables.ulm_card_light_enable_collapse && entity.state != "on") {
                      return "1fr";
                  } else if (variables.ulm_card_light_enable_slider && !variables.ulm_card_light_enable_horizontal) {
                      return "min-content min-content";
                  } else {
                      return "1fr";
                  }
            ]]]
        - row-gap: "12px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
      custom_fields:
        item2:
          - display: >
              [[[
                    if (variables.ulm_card_light_enable_collapse && entity.state != "on") {
                        return "none";
                    } else if (variables.ulm_card_light_enable_slider) {
                        return "block";
                    } else {
                        return "none";
                    }
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template:
            - "icon_more_info"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "[[[ return variables.ulm_card_light_icon ]]]"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_light_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_brightness"
                      variables:
                        ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
                styles:
                  icon:
                    - color: >
                        [[[
                            var color = entity.attributes.rgb_color;
                            if (entity.state != "on"){
                              return 'rgba(var(--color-theme),0.2)';
                            }
                            else if (color && variables.ulm_card_light_enable_color){
                              return 'rgba(' + color + ',1)'
                            }
                            else{
                              return 'rgba(var(--color-yellow),1)'
                            }
                        ]]]
                  img_cell:
                    - background-color: >
                        [[[
                            var color = entity.attributes.rgb_color;
                            if (entity.state != "on"){
                              return 'rgba(var(--color-theme),0.05)';
                            }
                            else if (color && variables.ulm_card_light_enable_color){
                              return 'rgba(' + color + ',0.2)';
                            }
                            else{
                              return 'rgba(var(--color-yellow),0.2)';
                            }
                        ]]]
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                name: "[[[ return variables.ulm_card_light_name ]]]"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_light_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_light_brightness"
                      variables:
                        ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
                label: >-
                  [[[
                    if (entity.state !="unavailable"){
                      if (entity.state =="off"){
                        return variables.ulm_off;
                      } else if (entity.state == "on"){
                        if (entity.attributes.brightness != null){
                          var bri = Math.round(entity.attributes.brightness / 2.55);
                          return (bri ? bri : "0") + "%";
                        } else {
                          return variables.ulm_on
                        }
                      }
                    } else {
                      return variables.ulm_unavailable;
                    }
                  ]]]
                state:
                  - value: "on"
                    styles:
                      name:
                        - color: >-
                            [[[
                                var color = entity.attributes.rgb_color;
                                if (variables.ulm_card_light_enable_color == true){
                                  if(variables.ulm_card_light_force_background_color == true || hass.themes.darkMode){
                                    if (color){
                                      return 'rgba(' + color + ',1)'
                                    } else {
                                      return 'rgba(var(--color-yellow-text),1)'
                                    }
                                  }
                                }
                                return 'rgba(var(--color-yellow-text),1)'
                            ]]]
                      label:
                        - color: >-
                            [[[
                                var color = entity.attributes.rgb_color;
                                if (variables.ulm_card_light_enable_color == true){
                                  if(variables.ulm_card_light_force_background_color == true || hass.themes.darkMode){
                                    if (color){
                                      return 'rgba(' + color + ',1)'
                                    } else {
                                      return 'rgba(var(--color-yellow-text),1)'
                                    }
                                  }
                                }
                                return 'rgba(var(--color-yellow-text),1)'
                            ]]]
      item2:
        card:
          type: "custom:my-slider"
          entity: "[[[ return entity.entity_id ]]]"
          radius: "14px"
          height: "42px"
          minSet: "[[[ return variables.ulm_card_light_enable_slider_minSet ]]]"
          maxSet: "[[[ return variables.ulm_card_light_enable_slider_maxSet ]]]"
          mainSliderColor: >
            [[[
                var color = entity.attributes.rgb_color;
                if (entity.state == "unavailable"){
                   return "rgba(var(--color-grey),1)";
                }
                else if (color && variables.ulm_card_light_enable_color){
                   return "rgba(" + color + ",1)";
                }
                else{
                  return "rgba(var(--color-yellow),1)";
                }
            ]]]
          secondarySliderColor: >
            [[[
                var color = entity.attributes.rgb_color;
                if (entity.state == "unavailable"){
                   return "rgba(var(--color-grey),0.2)";
                }
                else if (color && variables.ulm_card_light_enable_color){
                   return "rgba(" + color + ",0.2)";
                }
                else{
                  return "rgba(var(--color-yellow),0.2)";
                }
            ]]]
          mainSliderColorOff: "rgba(var(--color-theme),0.05)"
          secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
          thumbHorizontalPadding: "0px"
          thumbVerticalPadding: "0px"
          thumbWidth: "0px"
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }
  card_room:
    template:
      - "ulm_language_variables"
    variables:
      label_use_temperature: true
      label_use_brightness: false
    color: "var(--google-grey-500)"
    show_icon: true
    show_name: true
    show_label: true
    size: "45%"
    aspect_ratio: "1/1"
    label: |-
      [[[
        if (variables.label_use_temperature) {
          return (entity.attributes.current_temperature || entity.attributes.temperature || entity.state || '-') + (entity.attributes.unit_of_measurement || '°C');
        } else if (variables.label_use_brightness) {
          if (entity.state){
            if (entity.state == "off"){
              return variables.ulm_off;
            } else if (entity.state == "on"){
              if (entity.attributes.brightness != null){
                var bri = Math.round(entity.attributes.brightness / 2.55);
                return (bri ? bri : "0") + "%";
              } else {
                return variables.ulm_on
              }
            }
          } else {
            return variables.ulm_unavailable;
          }
        } else if (entity.state == "on") {
            return variables.ulm_on
        } else if (entity.state == "off") {
            return variables.ulm_off
        } else {
          return entity.state
        }
      ]]]
    state:
      - styles:
          custom_fields:
            notification:
              - border-radius: "50%"
              - border: "2px solid var(--card-background-color)"
              - width: "24.5px"
              - height: "24.5px"
              - position: "absolute"
              - left: "50%"
              - top: "50%"
              - transform: "translate(-50%,-50%)"
              - margin-top: "35%"
              - margin-left: "-35%"
              - line-height: 0
              - display: "grid"
              - background-color: >
                  [[[
                    return "rgba(var(--color-red),1)";
                  ]]]
        value: "unavailable"
    styles:
      card:
        - border-radius: "20px"
        - box-shadow: "var(--box-shadow)"
        - padding: "5px"
      grid:
        - grid-template-areas: "'n n n i1' 'l l l i2' 'i i . i3' 'i i . i4'"
        - grid-template-columns: "1fr 1fr 1fr 1fr"
        - grid-template-rows: "1fr 1fr 1fr 1fr"
        - justify-items: "center"
      icon:
        - color: "rgba(var(--color-theme),0.2)"
      img_cell:
        - background-color: "rgba(var(--color-theme),0.05)"
        - border-radius: "50%"
        - width: "75%"
        - height: "75%"
        - max-width: "none"
        - max-height: "none"
        - position: "absolute"
        - left: "50%"
        - top: "50%"
        - transform: "translate(-50%,-50%)"
        - margin-top: "25%"
        - margin-left: "-25%"
      name:
        - justify-self: "start"
        - align-self: "end"
        - font-weight: "bold"
        - font-size: "14px"
        - margin-left: "12px"
        - margin-bottom: "10%"
      label:
        - justify-self: "start"
        - align-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "12px"
        - margin-top: "-10%"
      state:
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "12px"
        - filter: "opacity(40%)"
        - margin-left: "6px"
      custom_fields:
        i1:
          - border-radius: "50%"
          - width: "80%"
          - height: "80%"
          - line-height: 0
          - display: "grid"
        i2:
          - border-radius: "50%"
          - width: "80%"
          - height: "80%"
          - line-height: 0
          - display: "grid"
        i3:
          - border-radius: "50%"
          - width: "80%"
          - height: "80%"
          - line-height: 0
          - display: "grid"
        i4:
          - border-radius: "50%"
          - width: "80%"
          - height: "80%"
          - line-height: 0
          - display: "grid"
    custom_fields:
      notification: >
        [[[
          if (entity.state =='unavailable'){
            return `<ha-icon icon="mdi:exclamation" style="width: 50%; height: 50%; color: var(--primary-background-color);"></ha-icon>`
          }
        ]]]
      i1:
        card:
          type: "custom:button-card"
          template: >
            [[[
              var templates = ['widget_icon_room'];
              if (variables?.entity_1?.templates?.length) {
                return ['widget_icon_room'].concat(variables.entity_1.templates);
              }
              return templates;
            ]]]
          variables: "[[[ return variables.entity_1; ]]]"
          entity: >
            [[[
              if (variables.entity_1.entity_id) {
                return variables.entity_1.entity_id;
              }
            ]]]
          state:
            - operator: "template"
              value: "[[[ return !variables.entity_1; ]]]"
              styles:
                card:
                  - display: "none"
  
      i2:
        card:
          type: "custom:button-card"
          template: >
            [[[
              var templates = ['widget_icon_room'];
              if (variables?.entity_2?.templates?.length) {
                return ['widget_icon_room'].concat(variables.entity_2.templates);
              }
              return templates;
            ]]]
          variables: "[[[ return variables.entity_2; ]]]"
          entity: >
            [[[
              if (variables?.entity_2?.entity_id) {
                return variables.entity_2.entity_id;
              }
            ]]]
          state:
            - operator: "template"
              value: "[[[ return !variables.entity_2; ]]]"
              styles:
                card:
                  - display: "none"
  
      i3:
        card:
          type: "custom:button-card"
          template: >
            [[[
              var templates = ['widget_icon_room'];
              if (variables?.entity_3?.templates?.length) {
                return ['widget_icon_room'].concat(variables.entity_3.templates);
              }
              return templates;
            ]]]
          variables: "[[[ return variables.entity_3; ]]]"
          entity: >
            [[[
              if (variables?.entity_3?.entity_id) {
                return variables.entity_3.entity_id;
              }
            ]]]
          state:
            - operator: "template"
              value: "[[[ return !variables.entity_3; ]]]"
              styles:
                card:
                  - display: "none"
      i4:
        card:
          type: "custom:button-card"
          template: >
            [[[
              var templates = ['widget_icon_room'];
              if (variables?.entity_4?.templates?.length) {
                return ['widget_icon_room'].concat(variables.entity_4.templates);
              }
              return templates;
            ]]]
          variables: "[[[ return variables.entity_4; ]]]"
          entity: >
            [[[
              if (variables?.entity_4?.entity_id) {
                return variables.entity_4.entity_id;
              }
            ]]]
          state:
            - operator: "template"
              value: "[[[ return !variables.entity_4; ]]]"
              styles:
                card:
                  - display: "none"
  
  widget_icon_room:
    variables:
      tap_action:
        action: "toggle"
      hold_action:
        action: "none"
    tap_action:
      action: >
        [[[ if (variables?.tap_action?.action) return variables.tap_action.action; else return 'none'; ]]]
      entity: "[[[ return variables.tap_action.entity; ]]]"
      navigation_path: "[[[ return variables.tap_action.navigation_path; ]]]"
      url_path: "[[[ return variables.tap_action.url_path; ]]]"
      service: "[[[ return variables.tap_action.service; ]]]"
      service_data: "[[[ return variables.tap_action.service_data; ]]]"
    hold_action:
      action: >
        [[[ if (variables?.hold_action?.action) return variables.hold_action.action; else return 'none'; ]]]
      entity: "[[[ return variables.hold_action.entity; ]]]"
      navigation_path: "[[[ return variables.hold_action.navigation_path; ]]]"
      url_path: "[[[ return variables.hold_action.url_path; ]]]"
      service: "[[[ return variables.hold_action.service; ]]]"
      service_data: "[[[ return variables.hold_action.service_data; ]]]"
    show_icon: true
    show_name: false
    styles:
      grid:
        - grid-template-areas: "'i'"
      card:
        - height: "100%"
        - box-shadow: "none"
        - padding: "0px"
        - border-radius: "50%"
      icon:
        - width: "50%"
        - height: "50%"
        - line-height: "0"
        - color: "rgba(var(--color-theme),0.2)"
      img_cell:
        - border-radius: "50%"
        - background-color: "rgba(var(--color-theme),0.05)"
    size: "15px"
    color: "var(--google-grey)"
  ### Card Thermostat ###
  card_thermostat:
    template:
      - "ulm_language_variables"
    variables:
      ulm_card_thermostat_name: "[[[ return entity.attributes.friendly_name ]]]"
      ulm_card_thermostat_icon: "[[[ return 'mdi:thermometer' ]]]"
      ulm_card_thermostat_enable_collapse: false
      ulm_card_thermostat_enable_controls: false
      ulm_card_thermostat_enable_hvac_modes: false
      ulm_card_thermostat_enable_background_color: false
      ulm_card_thermostat_enable_display_temperature: false
      ulm_card_thermostat_enable_horizontal: false
      ulm_card_thermostat_enable_popup: false
      ulm_card_thermostat_fan_entity: null
    show_icon: false
    show_name: false
    show_label: false
    hold_action:
      action: >
        [[[
            if (variables.ulm_card_thermostat_enable_popup){
              return 'fire-dom-event'
            }
            else{
              return 'more-info'
            }
        ]]]
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_thermostat_temperature"
          variables:
            ulm_popup_thermostat_entity: "[[[ return entity.entity_id ]]]"
    state:
      - operator: "template"
        value: >
          [[[
            return (entity.attributes.hvac_action == 'heating' && variables.ulm_card_thermostat_enable_background_color)
          ]]]
        styles:
          card:
            - background-color: "rgba(255,165,0,0.75)"
      - operator: "template"
        value: >
          [[[
            return (entity.attributes.hvac_action == 'cooling' && variables.ulm_card_thermostat_enable_background_color)
          ]]]
        styles:
          card:
            - background-color: "rgba(0,191,255,0.75)"
      - operator: "template"
        value: >
          [[[
            return entity.state != 'off'
          ]]]
        styles:
          card:
            - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
    styles:
      grid:
        - grid-template-areas: >
            [[[
                  var areas = [];
                  if (variables.ulm_card_thermostat_enable_horizontal) {
                    return "\"item1 item2\"";
                  }
                  if (variables.ulm_card_thermostat_enable_display_temperature) {
                      areas.push("item1 item4");
                  } else {
                    areas.push("item1 item1");
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                      areas.push("item2 item2");
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                      areas.push("low_temp_adjustment low_temp_adjustment");
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                      areas.push("item3 item3");
                  }
                  return "\"" + areas.join("\" \"") + "\"";
            ]]]
        - grid-template-columns: >
            [[[
                  if (variables.ulm_card_thermostat_enable_horizontal) {
                    return "1fr 1fr";
                  } else {
                    return "2fr 1fr";
                  }
            ]]]
        - grid-template-rows: >
            [[[
                  var rows = [];
                  rows.push("min-content");
                  if (variables.ulm_card_thermostat_enable_horizontal) {
                    return "min-content";
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                      rows.push("min-content");
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                      rows.push("min-content");
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                      rows.push("min-content");
                  }
                  return rows.join(" ");
            ]]]
        - row-gap: "12px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
      custom_fields:
        item2:
          - display: >
              [[[
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                        return "block";
                    } else {
                        return "none";
                    }
              ]]]
        low_temp_adjustment:
          - display: >
              [[[
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                        return "block";
                    } else {
                        return "none";
                    }
              ]]]
        item3:
          - display: >
              [[[
                  if (variables.ulm_card_thermostat_enable_horizontal) {
                    return "none";
                  }
                  if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                    return "block";
                  } else {
                    return "none";
                  }
              ]]]
        item4:
          - display: >
              [[[
                  if (variables.ulm_card_thermostat_enable_horizontal) {
                    return "none";
                  }
                  if (variables.ulm_card_thermostat_enable_display_temperature) {
                    return "block";
                  } else {
                    return "none";
                  }
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template:
            - "icon_more_info"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "[[[ return variables.ulm_card_thermostat_icon ]]]"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_thermostat_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_thermostat_temperature"
                      variables:
                        ulm_popup_thermostat_entity: "[[[ return entity.entity_id ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'heating')
                      ]]]
                    styles:
                      icon:
                        - color: "rgba(var(--color-red),1)"
                      img_cell:
                        - background-color: "rgba(var(--color-red),0.2)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling')
                      ]]]
                    styles:
                      icon:
                        - color: "rgba(var(--color-blue),1)"
                      img_cell:
                        - background-color: "rgba(var(--color-blue),0.2)"
            item2:
              card:
                type: "custom:button-card"
                entity: "[[[ return entity.entity_id ]]]"
                name: "[[[ return variables.ulm_card_thermostat_name ]]]"
                tap_action:
                  action: "call-service"
                  service: >
                    [[[
                          if (entity.state =='off'){
                              return "climate.turn_on";
                          } else {
                              return "climate.turn_off";
                          }
                    ]]]
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_thermostat_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_thermostat_temperature"
                      variables:
                        ulm_popup_thermostat_entity: "[[[ return entity.entity_id ]]]"
                label: >-
                  [[[
                      var label = variables.ulm_off ;
                      if (entity.state =='off'){
                        label = variables.ulm_off ;
                      }else if (entity.state == 'auto'){
                        label = variables.ulm_auto ;
                      }else if (entity.state == 'heat'){
                        label = variables.ulm_heat ;
                      }else if (entity.state == 'cool'){
                        label = variables.ulm_cool ;
                      }else if (entity.state == 'dry'){
                        label = variables.ulm_dry ;
                      }else if (entity.state == 'heat_cool'){
                        label = variables.ulm_heat_cool ;
                      }else if (entity.state == 'fan_only' || ((variables.ulm_card_thermostat_fan_entity !== null) && states[variables.ulm_card_thermostat_fan_entity].state == 'on')){
                        label = variables.ulm_fan_only ;
                      }else{
                        label = variables.ulm_idle;
                      }
  
                      if (entity.attributes.hvac_action == 'heating'){
                        var mode = variables.ulm_heating ;
                      }else if (entity.attributes.hvac_action == 'cooling'){
                        var mode = variables.ulm_cooling ;
                      }else if (entity.attributes.hvac_action == 'idle'){
                        var mode = variables.ulm_idle ;
                      }else{
                        var mode = variables.ulm_unavailable;
                      }
  
                      if((entity.attributes.temperature || entity.attributes.target_temp_high != null) && !variables.ulm_card_thermostat_enable_display_temperature){
                        return (entity.attributes.current_temperature ) + '°' + ' • ' + label + (entity.state !='off' ? ' (' + mode + ')' : '');
                      }
                      return label;
                  ]]]
      item2:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:minus"
                tap_action:
                  action: "call-service"
                  service: "climate.set_temperature"
                  service_data:
                    target_temp_low: |
                      [[[
                        if (entity.attributes.target_temp_low == null) {
                          return 0;
                        } else {
                          const unit = hass.config.unit_system.temperature
                          const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                          const new_temp =  (parseFloat(entity.attributes.target_temp_high) - step)
                          return (new_temp < entity.attributes.target_temp_low ? new_temp : entity.attributes.target_temp_low);
                        }
                      ]]]
                    target_temp_high: |
                      [[[
                        if (entity.attributes.target_temp_low == null) {
                          return 0;
                        } else {
                          const unit = hass.config.unit_system.temperature
                          const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                          return (parseFloat(entity.attributes.target_temp_high) - step)
                        }
                      ]]]
                    temperature: |
                      [[[
                        if (entity.attributes.temperature == null) {
                          return 0;
                        } else {
                          const unit = hass.config.unit_system.temperature
                          const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                          return (parseFloat(states[entity.entity_id].attributes.temperature) - step)
                        }
                      ]]]
                    entity_id: "[[[ return entity.entity_id ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            item2:
              card:
                type: "custom:button-card"
                show_icon: false
                show_name: false
                show_label: true
                entity: "[[[ return entity.entity_id ]]]"
                label: |-
                  [[[
                      var temperature = entity.attributes.temperature || entity.attributes.target_temp_high;
                      if (temperature == null) {
                        var temperature = '-';
                      }
                      return temperature + hass.config.unit_system.temperature;
                  ]]]
                styles:
                  card:
                    - background: "none"
                    - box-shadow: "none"
            item3:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:plus"
                tap_action:
                  action: "call-service"
                  service: "climate.set_temperature"
                  service_data:
                    target_temp_low: |
                      [[[
                        if (entity.attributes.target_temp_low == null) {
                          return 0;
                        } else {
                          return entity.attributes.target_temp_low;
                        }
                      ]]]
                    target_temp_high: |
                      [[[
                        if (entity.attributes.target_temp_high == null) {
                          return 0;
                        } else {
                          const unit = hass.config.unit_system.temperature
                          const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                          return (parseFloat(entity.attributes.target_temp_high) + step)
                        }
                      ]]]
                    temperature: |
                      [[[
                        if (entity.attributes.temperature == null) {
                          return 0;
                        } else {
                          const unit = hass.config.unit_system.temperature
                          const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                          return (parseFloat(states[entity.entity_id].attributes.temperature) + step)
                        }
                      ]]]
                    entity_id: "[[[ return entity.entity_id ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
      low_temp_adjustment:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          styles:
            card:
              - background: "none"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:minus"
                tap_action:
                  action: "call-service"
                  service: "climate.set_temperature"
                  service_data:
                    target_temp_low: |
                      [[[
                        const unit = hass.config.unit_system.temperature
                        const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                        return (parseFloat(entity.attributes.target_temp_low) - step)
                      ]]]
                    target_temp_high: "[[[ return entity.attributes.target_temp_high ]]]"
                    entity_id: "[[[ return entity.entity_id ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            item2:
              card:
                type: "custom:button-card"
                show_icon: false
                show_name: false
                show_label: true
                entity: "[[[ return entity.entity_id ]]]"
                label: |-
                  [[[
                      var temperature = entity.attributes.target_temp_low;
                      if (temperature == null) {
                        var temperature = '-';
                      }
                      return temperature + hass.config.unit_system.temperature;
                  ]]]
                styles:
                  card:
                    - background: "none"
                    - box-shadow: "none"
            item3:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return entity.entity_id ]]]"
                icon: "mdi:plus"
                tap_action:
                  action: "call-service"
                  service: "climate.set_temperature"
                  service_data:
                    target_temp_low: |
                      [[[
                        const unit = hass.config.unit_system.temperature
                        const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                        return (parseFloat(entity.attributes.target_temp_low) + step)
                      ]]]
                    target_temp_high: |
                      [[[
                        const unit = hass.config.unit_system.temperature
                        const step = entity.attributes.target_temp_step || (unit == '°F' ? 1.0 : 0.5)
                        const new_temp = (parseFloat(entity.attributes.target_temp_low) + step)
                        return (new_temp > entity.attributes.target_temp_high ? new_temp : entity.attributes.target_temp_high)
                      ]]]
                    entity_id: "[[[ return entity.entity_id ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
      item3:
        card:
          type: "custom:button-card"
          styles:
            grid:
              - grid-template-areas: >
                  [[[
                        var areas = [];
                        if (states[entity.entity_id].attributes.hvac_modes.includes("auto")) {
                            areas.push("auto");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                            areas.push("heat");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                            areas.push("cool");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("dry")) {
                            areas.push("dry");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("heat_cool")) {
                            areas.push("heat_cool");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("fan_only")) {
                            areas.push("fan_only");
                        }
                        if (!states[entity.entity_id].attributes.hvac_modes.includes("fan_only") && (variables.ulm_card_thermostat_fan_entity !== null)) {
                            areas.push("fan_entity_only");
                        }
                        return "\"" + areas.join(" ") + "\"";
                  ]]]
              - grid-template-columns: >
                  [[[
                        var columns = [];
                        if (states[entity.entity_id].attributes.hvac_modes.includes("auto")) {
                            columns.push("1fr");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                            columns.push("1fr");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                            columns.push("1fr");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("dry")) {
                            columns.push("1fr");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("heat_cool")) {
                            columns.push("1fr");
                        }
                        if (states[entity.entity_id].attributes.hvac_modes.includes("fan_only")) {
                            columns.push("1fr");
                        }
                        if (!states[entity.entity_id].attributes.hvac_modes.includes("fan_only") && (variables.ulm_card_thermostat_fan_entity !== null)) {
                            columns.push("1fr");
                        }
                        return columns.join(" ");
                  ]]]
              - grid-template-rows: "min-content"
              - column-gap: "7px"
            card:
              - box-shadow: "none"
              - padding: "0px"
              - background: "none"
            custom_fields:
              auto:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("auto")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              heat:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              cool:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              dry:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("dry")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              heat_cool:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("heat_cool")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              fan_only:
                - display: >
                    [[[
                      if (states[entity.entity_id].attributes.hvac_modes.includes("fan_only")) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
              fan_entity_only:
                - display: >
                    [[[
                      if (!states[entity.entity_id].attributes.hvac_modes.includes("fan_only") && (variables.ulm_card_thermostat_fan_entity !== null)) {
                          return "block";
                      } else {
                          return "none";
                      }
                    ]]]
          custom_fields:
            auto:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:autorenew"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "auto"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "auto"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-green),0.5)"
                      icon:
                        - color: "rgba(var(--color-green),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            heat:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:fire"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "heat"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "heat"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-red),0.5)"
                      icon:
                        - color: "rgba(var(--color-red),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            cool:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:snowflake"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "cool"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "cool"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-blue),0.5)"
                      icon:
                        - color: "rgba(var(--color-blue),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            dry:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:water"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "dry"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "dry"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-yellow),0.5)"
                      icon:
                        - color: "rgba(var(--color-yellow),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            heat_cool:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:sun-snowflake"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "heat_cool"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "heat_cool"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-purple),0.5)"
                      icon:
                        - color: "rgba(var(--color-purple),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            fan_only:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:fan"
                tap_action:
                  action: "call-service"
                  service: "climate.set_hvac_mode"
                  service_data:
                    entity_id: "[[[ return entity.entity_id ]]]"
                    hvac_mode: "fan_only"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return entity.state == "fan_only"
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.5)"
                      icon:
                        - color: "rgba(var(--color-green),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
            fan_entity_only:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                icon: "mdi:fan"
                tap_action:
                  action: "call-service"
                  service: "fan.toggle"
                  service_data:
                    entity_id: "[[[ return variables.ulm_card_thermostat_fan_entity !== null ? states[variables.ulm_card_thermostat_fan_entity].entity_id : null ]]]"
                state:
                  - operator: "template"
                    value: >
                      [[[
                        return ((variables.ulm_card_thermostat_fan_entity !== null) && states[variables.ulm_card_thermostat_fan_entity].state == 'on')
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.5)"
                      icon:
                        - color: "rgba(var(--color-green),1)"
                  - operator: "template"
                    value: >
                      [[[
                        return (entity.attributes.hvac_action == 'cooling' || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color
                      ]]]
                    styles:
                      card:
                        - background-color: "rgba(var(--color-theme),0.15)"
      item4:
        card:
          type: "custom:button-card"
          show_icon: false
          show_name: false
          show_label: true
          entity: "[[[ return entity.entity_id ]]]"
          label: |-
            [[[
                var temperature = entity.attributes.current_temperature;
                if (temperature == null) {
                  var temperature = '-';
                }
                return temperature + hass.config.unit_system.temperature;
            ]]]
          styles:
            card:
              - background: "none"
              - box-shadow: "none"
  ### Card Binary Sensor Alert ###
  card_binary_sensor_alert:
    template:
      - "icon_info_alert"
    name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
    show_last_changed: true
  card_welcome_scenes:
    variables:
      ulm_weather: "[[[ return variables.ulm_weather]]]"
      ulm_language: "[[[ return window.navigator.language ]]]"
      entity_1:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_2:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_3:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_4:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_5:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_6:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
      entity_7:
        entity_id: ""
        color: >
          [[[
            var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
            var color = colors[Math.floor(Math.random() * colors.length)];
            return color;
          ]]]
    template:
      - "ulm_language_variables"
    show_icon: false
    show_name: false
    show_label: true
    styles:
      grid:
        - grid-template-areas: >
            [[[
              if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
                return "\'item1\' \'item2\' ";
              } else {
                return "\'item1\' \'item2\' \'item3\' \'item4\'";
              }
            ]]]
        - grid-template-columns: "1fr"
        - grid-template-rows: "min-content min-content"
        - row-gap: "0px"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "10px"
      custom_fields:
        item3:
          - display: >
              [[[
                if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
                  return "none";
                } else {
                  return "block";
                }
              ]]]
        item4:
          - display: >
              [[[
                if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
                  return "none";
                } else {
                  return "block";
                }
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "card_topbar_welcome"
          variables:
            ulm_card_welcome_scenes_collapse: "[[[ return variables.ulm_card_welcome_scenes_collapse ]]]"
            ulm_weather: "[[[ return variables.ulm_weather]]]"
            ulm_language: "[[[ return variables.ulm_language ]]]"
          styles:
            card:
              - border-radius: "none"
              - box-shadow: "none"
              - padding: "4px"
      item2:
        card:
          type: "custom:button-card"
          show_icon: false
          show_label: false
          show_name: true
          show_entity_picture: false
          name: |
            [[[
              var today = new Date();
              var time = today.getHours()
              let welcome = '';
              if (time >= '18'){
                welcome = variables.ulm_evening;
              } else if (time >= '12'){
                welcome = variables.ulm_afternoon;
              } else if (time >= '5'){
                welcome = variables.ulm_morning;
              } else {
                welcome = variables.ulm_hello;
              }
              return welcome + ', ' + '   <br>' + user.name + '!';
            ]]]
          styles:
            name:
              - align-self: "start"
              - justify-self: "start"
              - font-weight: "bold"
              - font-size: "24px"
              - margin-left: "16px"
            grid:
              - grid-template-areas: "'i n' 'i l'"
              - grid-template-columns: "min-content auto"
              - grid-template-rows: "min-content min-content"
              - text-align: "start"
            card:
              - box-shadow: "none"
              - padding-bottom: "8px"
      item3:
        card:
          type: "custom:button-card"
          show_icon: true
          show_label: true
          show_name: true
          show_entity_picture: false
          name: "Scenes"
          icon: "mdi:dots-vertical"
          styles:
            icon:
              - height: "20px"
              - filter: "opacity(50%)"
            name:
              - align-self: "start"
              - justify-self: "start"
              - font-weight: "bold"
              - font-size: "18px"
              - margin-left: "16px"
            grid:
              - grid-template-areas: "'n i'"
              - grid-template-columns: "6fr 1fr"
              - grid-template-rows: "min-content min-content"
              - text-align: "start"
            card:
              - box-shadow: "none"
              - padding-bottom: "0px"
              - bottom: "10px"
      item4:
        card:
          type: "custom:button-card"
          template: >
            [[[
              if(variables?.entity_1?.entity_id != ""){
                return 'card_scenes'
              } else {
                return 'card_scenes_welcome_auto'
              }
            ]]]
          styles:
            card:
              - border-radius: "none"
              - box-shadow: "none"
              - padding: "4px"
          variables:
            entity_1: "[[[ return variables.entity_1]]]"
            entity_2: "[[[ return variables.entity_2]]]"
            entity_3: "[[[ return variables.entity_3]]]"
            entity_4: "[[[ return variables.entity_4]]]"
            entity_5: "[[[ return variables.entity_5]]]"
            entity_6: "[[[ return variables.entity_6]]]"
            entity_7: "[[[ return variables.entity_7]]]"
  card_title_welcome:
    tap_action:
      action: "none"
    show_icon: false
    show_label: true
    show_name: true
    styles:
      card:
        - background-color: "rgba(0,0,0,0)"
        - box-shadow: "none"
        - height: "auto"
        - width: "auto"
        - margin-top: "-10px"
        - margin-left: "16px"
        - margin-bottom: "-15px"
      grid:
        - grid-template-areas: "'n' 'l'"
        - grid-template-columns: "1fr"
        - grid-template-rows: "min-content min-content"
      name:
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "20px"
      label:
        - justify-self: "start"
        - font-weight: "bold"
        - font-size: "1rem"
        - opacity: "0.4"
  
  # pill
  card_scenes_pill_welcome:
    show_icon: false
    show_label: false
    show_name: false
    state:
      - operator: "template"
        value: >
          [[[
            return (entity.state !== 'on' && entity.state !== 'playing' && entity.state != variables?.state)
          ]]]
        styles:
          card:
            - overflow: "visible"
            - box-shadow: "none"
    styles:
      grid:
        - grid-template-areas: "'item1' 'item2'"
        - grid-template-columns: "min-content"
        - grid-template-rows: "1fr 1fr"
        - row-gap: "12px"
        - justify-items: "center"
        - column-gap: "auto"
      card:
        - border-radius: "50px"
        - place-self: "center"
        - width: "52px"
        - height: "84px"
        - box-shadow: >
            [[[
              if (hass.themes.darkMode){
                return "0px 2px 4px 0px rgba(0,0,0,0.80)";
              } else {
                return "var(--box-shadow)";
              }
            ]]]
    color: "var(--google-grey)"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          show_icon: true
          show_label: false
          show_name: false
          tap_action:
            action: >
              [[[
                if(variables?.nav_path){
                  return "navigate"
                } else {
                  return "call-service"
                }
              ]]]
            service: >
              [[[
                if(entity.entity_id.startsWith("scene.")){
                  return "scene.turn_on"
                }
                else if(entity.entity_id.startsWith("media_player.")){
                  return "media_player.media_play_pause"
                }
                else if(entity.entity_id.startsWith("input_select.")){
                  return "input_select.select_option"
                } else {
                  return "homeassistant.toggle"
                }
              ]]]
            navigation_path: "[[[ return variables?.nav_path; ]]]"
            service_data: |
              [[[
                var obj;
                if( entity.entity_id.startsWith("input_select.") )
                  obj = { entity_id: entity.entity_id, option: variables.state };
                else
                  obj = { entity_id: entity.entity_id };
                return obj;
              ]]]
          styles:
            grid:
              - grid-template-areas: "i"
            icon:
              - color: >
                  [[[
                    var color = variables?.color
                    if(hass.themes.darkMode){var color = "#FAFAFA";}
                    return `rgba(var(--color-${color}), 1)`;
                  ]]]
              - width: "20px"
            img_cell:
              - background-color: >
                  [[[
                    var color = variables?.color
                    var opacity = '0.20'
                    if(hass.themes.darkMode){var opacity = '1'}
                    return `rgba(var(--color-${color}), ${opacity})`;
                  ]]]
              - border-radius: "50%"
              - width: "42px"
              - height: "42px"
            card:
              - box-shadow: "none"
              - border-radius: "50px"
              - padding: "5px"
          state:
            - operator: "template"
              value: >
                [[[
                  return (entity.state !== 'on' && entity.state !== 'playing' && entity.state != variables?.state)
                ]]]
              styles:
                card:
                  - overflow: "visible"
                  - box-shadow: >
                      [[[
                        if (hass.themes.darkMode){
                          return "0px 2px 4px 0px rgba(0,0,0,0.80)";
                        } else {
                          return "var(--box-shadow)";
                        }
                      ]]]
      item2:
        card:
          type: "custom:button-card"
          show_icon: false
          show_label: false
          tap_action:
            action: >
              [[[
                if(variables?.nav_path){
                  return "navigate"
                } else {
                  return "call-service"
                }
              ]]]
            navigation_path: "[[[ return variables?.nav_path; ]]]"
            service: >
              [[[
                if(entity.entity_id.startsWith("scene.")){
                  return "scene.turn_on"
                }
                else if(entity.entity_id.startsWith("media_player.")){
                  return "media_player.media_play_pause"
                }
                else if(entity.entity_id.startsWith("input_select.")){
                  return "input_select.select_option"
                } else {
                  return "homeassistant.toggle"
                }
              ]]]
            service_data: |
              [[[
                var obj;
                if( entity.entity_id.startsWith("input_select.") )
                  obj = { entity_id: entity.entity_id, option: variables.state };
                else
                  obj = { entity_id: entity.entity_id };
                return obj;
              ]]]
          styles:
            grid:
              - grid-template-areas: "n"
            name:
              - font-weight: "bold"
              - font-size: "9.5px"
              - width: "33px"
              - padding-bottom: "7px"
            card:
              - box-shadow: "none"
              - padding: "0px 5px 5px 5px"
              - margin-top: "-5px"
              - border-radius: "50px"
  card_topbar_welcome:
    show_icon: false
    show_name: false
    show_label: false
    styles:
      grid:
        - grid-template-areas: "item1 item2 item3"
        - justify-content: "space-between"
        - display: "flex"
      card:
        - border-radius: "none"
        - box-shadow: "none"
        - padding: "12px"
        - background: "none"
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template: "chips"
          entity: "[[[ return variables.ulm_card_welcome_scenes_collapse ]]]"
          icon: "mdi:chevron-up"
          show_icon: true
          styles:
            grid:
              - grid-template-areas: "'i'"
            card:
              - box-shadow: >
                  [[[
                    if (hass.themes.darkMode){
                      return "0px 2px 4px 0px rgba(0,0,0,0.80)";
                    } else {
                      return "var(--box-shadow)";
                    }
                  ]]]
          state:
            - value: "on"
              icon: "mdi:chevron-down"
              styles:
                icon:
                  - color: "rgb(var(--color-theme))"
          tap_action:
            action: "call-service"
            service: "input_boolean.toggle"
            service_data:
              entity_id: "[[[ return variables.ulm_card_welcome_scenes_collapse ]]]"
      item2:
        card:
          type: "custom:button-card"
          template: "chip_weather_date"
          entity: "[[[ return variables.ulm_weather]]]"
          variables:
            ulm_weather: "[[[ return variables.ulm_weather ]]]"
            ulm_language: "[[[ return variables.ulm_language ]]]"
          styles:
            card:
              - width: "100px"
              - box-shadow: >
                  [[[
                    if (hass.themes.darkMode){
                      return "0px 2px 4px 0px rgba(0,0,0,0.80)";
                    } else {
                      return "var(--box-shadow)";
                    }
                  ]]]
      item3:
        card:
          type: "custom:button-card"
          tap_action:
            action: "navigate"
            navigation_path: "/config/dashboard"
          template: "chip_mdi_icon_only"
          variables:
            ulm_chip_mdi_icon_only_icon: "mdi:cog-outline"
          styles:
            card:
              - align-self: "end"
              - box-shadow: >
                  [[[
                    if (hass.themes.darkMode){
                      return "0px 2px 4px 0px rgba(0,0,0,0.80)";
                    } else {
                      return "var(--box-shadow)";
                    }
                  ]]]
  # auto-entities
  card_scenes_welcome_auto:
    show_icon: false
    show_name: true
    show_label: false
    variables:
      colors: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    styles:
      grid:
        - grid-template-areas: "item1"
        - display: "flex"
        - justify-content: "center"
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
    custom_fields:
      item1:
        card:
          type: "custom:auto-entities"
          card:
            type: "grid"
            columns: 5
            square: false
          card_param: "cards"
          sort:
            count: 5
          filter:
            include:
              - domain: "light"
                options:
                  type: "custom:button-card"
                  template: "card_scenes_pill_welcome"
                  custom_fields:
                    item1:
                      card:
                        type: "custom:button-card"
                        entity: "this.entity_id"
                        styles:
                          icon:
                            - color: >
                                [[[
                                  var color = variables.colors
                                  if(hass.themes.darkMode){var color = "#FAFAFA";}
                                  return `rgba(var(--color-${color}), 1)`;
                                ]]]
                            - width: "20px"
                          img_cell:
                            - background-color: >
                                [[[
                                  var color = variables.colors
                                  var opacity = '0.20'
                                  if(hass.themes.darkMode){var opacity = '1'}
                                  return `rgba(var(--color-${color}), ${opacity})`;
                                ]]]
                    item2:
                      card:
                        type: "custom:button-card"
                        entity: "this.entity_id"
  ### Card Media Player ###
  card_media_player:
    template:
      - "ulm_language_variables"
    variables:
      ulm_card_media_player_name: "[[[ return entity.attributes.friendly_name ]]]"
      ulm_card_media_player_icon: false
      ulm_card_media_player_enable_art: false
      ulm_card_media_player_enable_controls: false
      ulm_card_media_player_enable_volume_slider: false
      ulm_card_media_player_collapsible: false
      ulm_card_media_player_player_controls_entity: "[[[ return entity.entity_id ]]]"
      ulm_card_media_player_enable_popup: false
      ulm_card_media_player_more_info: false
    triggers_update: "all"
    show_icon: false
    show_name: false
    show_label: false
    hold_action:
      action: >
        [[[
            if (variables.ulm_card_media_player_enable_popup){
              return 'fire-dom-event'
            }
            else{
              return 'more-info'
            }
        ]]]
      browser_mod:
        command: "popup"
        large: true
        hide_header: true
        card:
          type: "custom:button-card"
          template: "popup_media_player_infos"
          variables:
            ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
    styles:
      grid:
        - grid-template-areas: |
            [[[
              var areas = "'item1'";
              if (variables.ulm_card_media_player_enable_controls){
                areas = areas + " 'item2'";
              }
              if (variables.ulm_card_media_player_enable_volume_slider){
                areas = areas + " 'item3'";
              }
              return areas;
            ]]]
        - grid-template-columns: "1fr"
        - grid-template-rows: |
            [[[
              var rows = "min-content";
              if (variables.ulm_card_media_player_enable_controls){
                rows = rows + " min-content";
              }
              if (variables.ulm_card_media_player_enable_volume_slider){
                rows = rows + " min-content";
              }
              return rows;
            ]]]
        - row-gap: |-
            [[[
              if (!variables.ulm_card_media_player_collapsible) {
                  return "12px";
                } else {
                  return entity.state !== "off" ? "12px" : "0px";
                }
            ]]]
      card:
        - border-radius: "var(--border-radius)"
        - box-shadow: "var(--box-shadow)"
        - padding: "12px"
        - background-blend-mode: "multiply"
        - background: |
            [[[
              return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
              ? 'center / cover url(' + states[entity.entity_id].attributes.entity_picture + ') rgba(0, 0, 0, 0.15)'
              : ''
            ]]]
      custom_fields:
        item2:
          - display: |
              [[[
                if(variables.ulm_card_media_player_enable_controls) {
                  if(variables.ulm_card_media_player_collapsible){
                    return entity.state === "off" ? "none" : "block";
                  }
                  return "block";
                }
                return "none";
              ]]]
        item3:
          - display: |
              [[[
                if(variables.ulm_card_media_player_enable_volume_slider) {
                  if(variables.ulm_card_media_player_collapsible){
                    return entity.state === "off" ? "none" : "block";
                  }
                  return "block";
                }
                return "none";
              ]]]
    custom_fields:
      item1:
        card:
          type: "custom:button-card"
          template:
            - "icon_info_bg"
            - "ulm_language_variables"
          entity: "[[[ return entity.entity_id ]]]"
          hold_action:
            action: >
              [[[
                  if (variables.ulm_card_media_player_enable_popup){
                    return 'fire-dom-event'
                  }
                  else{
                    return 'more-info'
                  }
              ]]]
            browser_mod:
              command: "popup"
              large: true
              hide_header: true
              card:
                type: "custom:button-card"
                template: "popup_media_player_infos"
                variables:
                  ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
          icon: |
            [[[
              var icon =  entity.attributes.icon || "mdi:speaker";
              if(entity.attributes.app_name){
                var app = entity.attributes.app_name.toLowerCase();
                if(app == "spotify"){
                  var icon = "mdi:spotify";
                } else if(app == "google podcasts"){
                  var icon = "mdi:google-podcast";
                } else if(app == "plex"){
                  var icon = "mdi:plex";
                } else if(app == "soundcloud"){
                  var icon = "mdi:soundcloud";
                } else if(app == "youtube music"){
                  var icon = "mdi:youtube";
                } else if (app == "oto music"){
                  var icon = "mdi:music-circle";
                } else if(app == "pandora"){
                  var icon = "mdi:pandora";
                } else if(app == "netflix"){
                  var icon = "mdi:netflix";
                } else if(app == "bluetooth audio"){
                  var icon = "mdi:bluetooth";
                }
              }
              return variables.ulm_card_media_player_icon || icon;
            ]]]
          label: |
            [[[
                let state = entity.state;
                return variables["ulm_" + state] ? variables["ulm_" + state] : state;
            ]]]
          state:
            - operator: "template"
              value: "[[[ return entity.state == 'off' ]]]"
              name: |
                [[[
                  let name = variables.ulm_card_media_player_name || states[entity.entity_id].attributes.friendly_name;
                  return name;
                ]]]
            - operator: "template"
              value: "[[[ return entity.state != 'off' ]]]"
              name: |
                [[[
                  let name = variables.ulm_card_media_player_name || states[entity.entity_id].attributes.friendly_name;
                  if(states[entity.entity_id].attributes.media_title){
                      name = states[entity.entity_id].attributes.media_title;
                  }
                  return name;
                ]]]
              label: |
                [[[
                  let label = variables.ulm_on;
                  if (variables.ulm_card_media_player_more_info && states[entity.entity_id].attributes.media_artist
                      && states[entity.entity_id].attributes.media_album_name) {
                      label = states[entity.entity_id].attributes.media_artist + " • " + states[entity.entity_id].attributes.media_album_name;
                  } else if(states[entity.entity_id].attributes.media_album_name) {
                      label = states[entity.entity_id].attributes.media_album_name;
                  } else if (states[entity.entity_id].attributes.media_artist) {
                      label = states[entity.entity_id].attributes.media_artist
                  } else {
                      label = variables.ulm_on;
                  }
                  return label;
                ]]]
          styles:
            label:
              - opacity: "1"
              - filter: "opacity(100%)"
              - text-shadow: |
                  [[[
                    return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                    ? '0 0 black'
                    : 'none'
                  ]]]
              - color: |
                  [[[
                    return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                    ? 'white'
                    : 'rgba(var(--color-theme), .5)'
                  ]]]
            name:
              - color: |
                  [[[
                    return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                    ? 'white'
                    : 'rgba(var(--color-theme), 1)'
                  ]]]
              - text-shadow: "0 0 black"
            icon:
              - color: |
                  [[[
                    return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                    ? 'white'
                    : 'rgba(var(--color-theme), 0.2)'
                  ]]]
            img_cell:
              - background-color: |
                  [[[
                    return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                    ? 'rgba(0, 0, 0, 0.2)'
                    : 'rgba(var(--color-theme), 0.05)'
                  ]]]
            card:
              - padding: "0px"
              - background: "none"
              - border-radius: "0"
              - box-shadow: "none"
      item2:
        card:
          type: "custom:button-card"
          template: "list_3_items"
          hold_action:
            action: >
              [[[
                  if (variables.ulm_card_media_player_enable_popup){
                    return 'fire-dom-event'
                  }
                  else{
                    return 'more-info'
                  }
              ]]]
            browser_mod:
              command: "popup"
              large: true
              hide_header: true
              card:
                type: "custom:button-card"
                template: "popup_media_player_infos"
                variables:
                  ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
          styles:
            card:
              - padding: "0px"
              - background: "none"
              - border-radius: "0"
              - box-shadow: "none"
          custom_fields:
            item1:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_media_player_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_media_player_infos"
                      variables:
                        ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
                tap_action:
                  action: "call-service"
                  service: "media_player.media_previous_track"
                  service_data:
                    entity_id: "[[[ return variables.ulm_card_media_player_player_controls_entity ]]]"
                icon: "mdi:skip-previous"
                styles:
                  card:
                    - background-color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'rgba(0, 0, 0, 0.2)'
                          : 'rgba(var(--color-theme),0.05)'
                        ]]]
                  icon:
                    - color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'white'
                          : 'rgba(var(--color-theme), 0.9)'
                        ]]]
  
            item2:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                entity: "[[[ return variables.ulm_card_media_player_player_controls_entity ]]]"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_media_player_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_media_player_infos"
                      variables:
                        ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
                tap_action:
                  action: "call-service"
                  service: "media_player.media_play_pause"
                  service_data:
                    entity_id: "[[[ return variables.ulm_card_media_player_player_controls_entity ]]]"
                icon: "mdi:pause"
                state:
                  - value: "paused"
                    icon: "mdi:play"
                  - value: "off"
                    icon: "mdi:play"
                styles:
                  card:
                    - background-color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'rgba(0, 0, 0, 0.2)'
                          : 'rgba(var(--color-theme),0.05)'
                        ]]]
                  icon:
                    - color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'white'
                          : 'rgba(var(--color-theme), 0.9)'
                        ]]]
            item3:
              card:
                type: "custom:button-card"
                template: "widget_icon"
                hold_action:
                  action: >
                    [[[
                        if (variables.ulm_card_media_player_enable_popup){
                          return 'fire-dom-event'
                        }
                        else{
                          return 'more-info'
                        }
                    ]]]
                  browser_mod:
                    command: "popup"
                    large: true
                    hide_header: true
                    card:
                      type: "custom:button-card"
                      template: "popup_media_player_infos"
                      variables:
                        ulm_popup_media_player_entity: "[[[ return entity.entity_id ]]]"
                tap_action:
                  action: "call-service"
                  service: "media_player.media_next_track"
                  service_data:
                    entity_id: "[[[ return variables.ulm_card_media_player_player_controls_entity ]]]"
                icon: "mdi:skip-next"
                styles:
                  card:
                    - background-color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'rgba(0, 0, 0, 0.2)'
                          : 'rgba(var(--color-theme),0.05)'
                        ]]]
                  icon:
                    - color: |
                        [[[
                          return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
                          ? 'white'
                          : 'rgba(var(--color-theme), 0.9)'
                        ]]]
      item3:
        card:
          type: "custom:my-slider"
          entity: "[[[ return entity.entity_id ]]]"
          radius: "14px"
          height: "42px"
          mainSliderColor: |
            [[[
              return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
              ? 'rgba(0, 0, 0, 0.2)'
              : 'rgba(var(--color-blue),1)'
            ]]]
          secondarySliderColor: |
            [[[
              return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture != null
              ? 'rgba(0, 0, 0, 0.1)'
              : 'rgba(var(--color-blue),0.2)'
            ]]]
          mainSliderColorOff: "rgba(var(--color-theme),0.05)"
          secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
          thumbHorizontalPadding: "0px"
          thumbVerticalPadding: "0px"
          thumbWidth: "0px"
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              background-color: transparent;
              box-shadow: none;
            }
