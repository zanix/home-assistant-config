---
# Hacked Tuya Nebula projector
# Sources:
# - https://esphome.io/components/libretiny.html
# - https://www.elektroda.com/rtvforum/topic4021966.html
# - https://www.elektroda.com/rtvforum/topic3999594.html
# - https://www.elektroda.com/rtvforum/topic4054399.html
# - https://github.com/openshwprojects/BK7231GUIFlashTool/releases

substitutions:
  name: nebula-projector
  friendly_name: Nebula Projector
  store_scene_to_rtc: "true"

esphome:
  name: $name
  friendly_name: $friendly_name

bk72xx:
  board: generic-bk7231n-qfn32-tuya

logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_not_ssid
  password: !secret wifi_not_password
  power_save_mode: none
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "AP-${name}"
    password: !secret ap_password
    ap_timeout: 3min

captive_portal:

# Enable Web server.
web_server:
  port: 80

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Boise

text_sensor:
  - platform: version
    name: ESPHome Version

  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID

button:
  - platform: restart
    name: Restart

globals:
  - id: global_scene_id
    type: size_t
    restore_value: $store_scene_to_rtc
    initial_value: "0"

light:
  - platform: rgb
    name: Light
    id: rgb_light
    restore_mode: ALWAYS_OFF
    red: red
    green: green
    blue: blue
    effects:
      - random:
          transition_length: 2.5s
          update_interval: 3s
      - random:
          name: Random Slow
          transition_length: 10s
          update_interval: 5s
      - flicker:
          alpha: 95%
          intensity: 2.5%
      - strobe:
      - pulse:
          name: Pulse Slow
          transition_length: 30s
          min_brightness: 5%
          max_brightness: 100%
      - pulse:
          update_interval: 2s
      - pulse:
          name: Pulse Fast
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: Pulse Asymmetrical
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s

  - platform: monochromatic
    name: Laser
    icon: mdi:laser-pointer
    id: laser
    output: laser_pwm
    restore_mode: ALWAYS_OFF

#   Button LED (UP/Down position, no brightness control)
#   - platform: status_led
#     name: Button LED0
#     id: button_led0
#     output: button_led0_gpio
#     restore_mode: ALWAYS_OFF
#     internal: true
#   - platform: monochromatic
#     name: Button LED1
#     id: button_led1
#     output: button_led1_pwm
#     restore_mode: ALWAYS_OFF
#     internal: true

fan:
  platform: speed
  name: Motor
  icon: mdi:rotate-right
  id: motor
  output: motor_pwm
  restore_mode: ALWAYS_OFF

# The template switch representing the device is currently active (laser/light or motor is ON).
switch:
  - platform: template
    name: Main Switch
    id: switch_main
    lambda: "return (id(motor).state || id(laser).current_values.is_on() || id(rgb_light).current_values.is_on());"

    # Turn on the last scene. In a case there is no last scene saved, use the first scene in select (id=0).
    turn_on_action:
      - select.set_index:
          id: select_scene
          index: !lambda "return id(global_scene_id);"

    # Completely turn off the laser, light, motor and button LED
    turn_off_action:
      - fan.turn_off: motor
      - light.turn_off: laser
      - light.turn_off: rgb_light
      # - light.turn_off: button_led1
      # - script.stop: script_turn_off_timer

      # Remember currently selected scene
      - lambda: |-
          auto index = id(select_scene).active_index();
          if (index.has_value()) {
            id(global_scene_id) = index.value();
          }

output:
  - platform: libretiny_pwm
    id: red
    pin: P6
    # inverted: true

  - platform: libretiny_pwm
    id: green
    pin: P7
    # inverted: true

  - platform: libretiny_pwm
    id: blue
    pin: P8
    # inverted: true

  - platform: libretiny_pwm
    id: laser_pwm
    pin: P24
    # min_power: 0.55
    # zero_means_zero: true
    # inverted: true

  - platform: libretiny_pwm
    id: motor_pwm
    pin: P26
    min_power: 0.15
    zero_means_zero: true

#   - platform: gpio
#     id: button_led0_gpio
#     pin: P1
#     inverted: true

#   - platform: libretiny_pwm
#     id: button_led1_pwm
#     pin: P7
#     inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: P14
      mode: INPUT_PULLDOWN_16
      # inverted: true
    name: Button

    # Change the scene on short press/click
    on_click:
      then:
        # Do not switch the scene when all the components (switch_main) are
        # turned off. Allow the scene switching only when the switch_main is
        # on. When the switch is off, just turn it on.
        - if:
            condition:
              - switch.is_on: switch_main
            then:
              - select.next: select_scene
            else:
              - switch.turn_on: switch_main

    # Turn off after a button long press
    on_multi_click:
      - timing:
          - on for at least 1s
        then:
          - switch.turn_off: switch_main

# Turn off the light, laser and motor automatically after a specified delay
script:
  - id: script_turn_off_timer
    mode: restart
    then:
      - delay: 2h
      - switch.turn_off: switch_main

select:
  platform: template
  name: Scene
  id: select_scene
  options:
    - "Red + Laser"
    - "Blue + Laser"
    - "Green + Laser"
    - "White + Laser"
    - "White Dimmed + Laser"
  optimistic: true
  on_value:
    then:
      # Always reset the timer script
      - script.stop: script_turn_off_timer
      - script.execute: script_turn_off_timer

      # Make sure the button LED is ON
      # - light.turn_on:
      #     id: button_led1
      #     brightness: 60%

      # [INDEX=0]: Scene - Red
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 0);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 80%
                green: 0%
                blue: 50%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=1]: Scene - Blue
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 1);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 50%
                green: 0%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=2]: Scene - Green
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 2);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 0%
                green: 60%
                blue: 30%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=3]: Scene - White
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 3);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 100%
                red: 100%
                green: 100%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 100%
            - fan.turn_on:
                id: motor
                speed: 50

      # [INDEX=4]: Scene - Dimmed
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 4);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 30%
                red: 5%
                green: 5%
                blue: 5%
            - light.turn_on:
                id: laser
                brightness: 30%
            - fan.turn_on:
                id: motor
                speed: 10
