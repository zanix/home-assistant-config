{# UTILITY MACROS #}

{#
  Checks list of entites for availability.
  Expects a list of entities.
    The number of entities are counted.
    The number of entities that are NOT unknown, unavailable, empty, or none are counted.
    If the 2 counts are the same, true is returned, else false, defaults to false.
  Cast result to bool.

  Example:
    {% from 'util.jinja' import avail %}
    {{- avail(['entity_1','entity_2']) | bool -}}
#}
{% macro avail(entity_list) %}
  {# First tests to make sure this is a list #}
  {%- if entity_list is iterable and
    (entity_list is not string and entity_list is not mapping)
  -%}
    {{- entity_list | map('states') | reject('in', ['unknown', 'unavailable', 'none', ''])
    | list | count == entity_list | count -}}
  {%- else -%}
    {{ false }}
  {%- endif -%}
{% endmacro %}

{#
  Returns color based on battery level.
#}
{%- macro battery_color(entity) -%}
  {%- if has_value(entity) -%}
    {%- set battery_level = states(entity) | int // 10 * 10 -%}
    {{ {
      100: "green",
      90: "green",
      80: "green",
      70: "light-green",
      60: "lime",
      50: "yellow",
      40: "amber",
      30: "orange",
      20: "orange",
      10: "red",
      0: "red"
    }[battery_level] }}
  {%- else -%}
    red
  {%- endif -%}
{%- endmacro -%}

{#
  Returns battery icon based on battery level.
#}
{%- macro battery_icon(entity) -%}
  {%- if has_value(entity) -%}
    {%- set battery_level = states(entity) | int -%}
    {%- if battery_level == 100 -%}
      mdi:battery
    {%- elif battery_level >= 10 -%}
      mdi:battery-{{ battery_level // 10 * 10 }}
    {%- elif battery_level < 10 -%}
      mdi:battery-outline
    {%- endif -%}
  {%- else -%}
    mdi:battery-alert-variant-outline
  {%- endif -%}
{%- endmacro -%}

{#
  Returns battery icon based on battery level and charge state.
#}
{%- macro cell_battery_icon(entity, charge, type) -%}
  {%- if has_value(entity) -%}
    {%- set state = "battery" -%}
    {%- if is_state(charge, "charging") -%}
      {%- set state = state ~ "-charging" -%}
      {%- if is_state(type, "wireless") -%}
        {%- set state = state ~ "-wireless" -%}
      {%- endif -%}
    {%- endif -%}
    {%- set battery_level = states(entity) | int -%}
    {%- if battery_level == 100 -%}
      mdi:{{ state }}
    {%- elif battery_level >= 10 -%}
      mdi:{{ state }}-{{ battery_level // 10 * 10 }}
    {%- elif battery_level < 10 -%}
      mdi:{{ state }}-outline
    {%- endif -%}
  {%- else -%}
    mdi:battery-alert-variant-outline
  {%- endif -%}
{%- endmacro -%}

{#
  Return last changed using change history sensor.
#}
{%- macro custom_timedelta(entity) -%}
  {%- set last_changed = state_attr("sensor.nominal_change_history", "changes")[entity] | as_datetime -%}
  {%- if last_changed < today_at() - timedelta(days=6) -%}
    > a week ago
  {%- elif last_changed < today_at() - timedelta(days=1) -%}
    {{ last_changed.timestamp() | timestamp_custom("%A %-I:%M %p") }}
  {%- elif last_changed < today_at() -%}
    {{ last_changed.timestamp() | timestamp_custom("Yesterday %-I:%M %p") }}
  {%- else -%}
    {{ relative_time(last_changed) }} ago
  {%- endif -%}
{%- endmacro -%}

{#
  Flips a dictionary keys and values.
  The result of this needs to be converted using from_json.
#}
{%- macro dict_flip(my_dict) -%}
  {%- set new = namespace(items={}) -%}
  {%- for k, v in my_dict.items() -%}
    {%- set new.items = dict(new.items, **{v:k}) -%}
  {%- endfor -%}
  {{ new.items | to_json }}
{%- endmacro -%}

{#
  Generate a friendly list of entity names.
  Accepts a list of entity objects or Entity IDs.
#}
{%- macro get_friendly_names(entity_list) -%}
  {% for entity in entity_list -%}
    {% set name = entity %}
    {%- if not state_attr(entity, "friendly_name") in ["unavailable", "unknown"] -%}
      {% set name = state_attr(entity, "friendly_name") %}
    {%- endif -%}
    {{ name }}{{ ', ' if loop.length > 2 and not loop.last else ' ' }}{{ 'and ' if loop.length > 1 and loop.revindex0 == 1 }}
  {%- endfor %}
{%- endmacro -%}

{#
  Returns media player icon based on source.
#}
{%- macro media_icon(entity) -%}
  {%- set app = state_attr(entity, "source") -%}
  {%- set app_list = {
    "Crunchyroll": "fapro:crunchyroll",
    "DisneyNow": "fapro:disney_now",
    "Hulu": "mdi:hulu",
    "Netflix": "mdi:netflix",
    "PBS Kids": "fapro:pbs_kids",
    "Plex": "mdi:plex",
    "Prime Video": "fapro:prime_video",
    "SmartTube": "mdi:youtube",
    "Spotify": "mdi:spotify",
    "YouTube": "mdi:youtube",
    "YouTube Kids": "fapro:youtube_kids",
    "Twitch": "mdi:twitch",
  } -%}
  {%- set media_type = state_attr(entity, "media_content_type") -%}
  {%- set media_type_list = {
    "tvshow": "mdi:television",
    "movie": "mdi:movie-open",
    "music": "mdi:music",
    "playlist": "mdi:playlist-music",
    "game": "mdi:gamepad-variant",
  } -%}
  {%- if media_type in media_type_list -%}
    {{ media_type_list[media_type] }}
  {%- elif app in app_list -%}
    {{ app_list[app] }}
  {%- else -%}
    mdi:motion-play-outline
  {%- endif -%}
{%- endmacro -%}

{#
  Return a random string.
#}
{%- macro random_string(len) -%}
  {% set char = 'abcdefghijklmnopqrstuvwxyz' %}
  {{ ''.join((('0123456789' ~ char + char | upper)  * len) | slice(len) | map('random')) }}
{%- endmacro -%}

{#
  Returns color based on humidity.
#}
{%- macro room_humidity(entity) -%}
  {%- set color = "#4599dd" -%}
  {%- if has_value(entity) -%}
    {%- set value = states(entity) | int -%}
    {%- if value <= 20 -%}
      {%- set color = "#dd1212" -%}
    {%- elif value <= 28 -%}
      {%- set color = "#f5b52a" -%}
    {%- elif value > 70 -%}
      {%- set color = "#f5b52a" -%}
    {%- elif value >= 80 -%}
      {%- set color = "#dd1212" -%}
    {%- endif -%}
  {%- endif -%}
  {{ color }}
{%- endmacro -%}

{#
  Returns color based on room temperature.
#}
{%- macro room_temp(entity) -%}
  {%- set color = "#bdbdbd" -%}
  {%- if has_value(entity) -%}
    {%- set value = states(entity) | int -%}
    {%- if value >= 90 -%}
      {%- set color = "#c4161e" -%}
    {%- elif value >= 88 -%}
      {%- set color = "#c93905" -%}
    {%- elif value >= 86 -%}
      {%- set color = "#ca5400" -%}
    {%- elif value >= 84 -%}
      {%- set color = "#c86c00" -%}
    {%- elif value >= 82 -%}
      {%- set color = "#c18200" -%}
    {%- elif value >= 80 -%}
      {%- set color = "#b89700" -%}
    {%- elif value >= 78 -%}
      {%- set color = "#aaac00" -%}
    {%- elif value >= 76 -%}
      {%- set color = "#97bf00" -%}
    {%- elif value >= 74 -%}
      {%- set color = "#7fd206" -%}
    {%- elif value >= 72 -%}
      {%- set color = "#59E442" -%}
    {%- elif value >= 70 -%}
      {%- set color = "#59E442" -%}
    {%- elif value >= 68 -%}
      {%- set color = "#00cc9e" -%}
    {%- elif value >= 66 -%}
      {%- set color = "#00aaf9" -%}
    {%- elif value >= 64 -%}
      {%- set color = "#007eff" -%}
    {%- elif value >= 62 -%}
      {%- set color = "#0f28e5" -%}
    {%- elif value >= 60 -%}
      {%- set color = "#251ab9" -%}
    {%- elif value >= 58 -%}
      {%- set color = "#260d8f" -%}
    {%- elif value < 58 -%}
      {%- set color = "#1a095d" -%}
    {%- endif -%}
  {%- endif -%}
  {{ color }}
{%- endmacro -%}

{#
  Return a count of open doors or unlocked locks.
#}
{%- macro security_count() -%}
  {%- set security = expand("binary_sensor.all_doors") | selectattr("state", "==", "on") | map(attribute="entity_id") | list -%}
  {%- set security = security + expand([
    "lock.front_door",
    "cover.opengarage"
  ]) | selectattr("state", "in", ["open", "unlocked"]) | map(attribute="entity_id") | list -%}
  {{ security | count }}
{%- endmacro -%}

{#
  Converts various "true" states into a boolean true or false.
#}
{%- macro truthify(state) -%}
  {{ state in ['on', 'true', 'open'] }}
{%- endmacro -%}

{#
  Returns wifi icon based on signal level.
#}
{%- macro wifi_icon(signal, connection) -%}
  {%- if not is_state(connection, "<not connected>") -%}
    {%- if has_value(signal) -%}
      {%- set signal_level = states(signal) | int | abs -%}
      {%- if signal_level >= 100 -%}
        mdi:wifi-strength-off
      {%- elif signal_level >= 96 -%}
        mdi:wifi-strength-outline
      {%- elif signal_level >= 85 -%}
        mdi:wifi-strength-1
      {%- elif signal_level >= 75 -%}
        mdi:wifi-strength-2
      {%- elif signal_level >= 55 -%}
        mdi:wifi-strength-3
      {%- elif signal_level >= 1 -%}
        mdi:wifi-strength-4
      {%- endif -%}
    {%- else -%}
      mdi:wifi-strength-off
    {%- endif -%}
  {%- else -%}
    mdi:signal
  {%- endif -%}
{%- endmacro -%}
