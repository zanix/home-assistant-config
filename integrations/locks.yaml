---
# Package: Door Locks
#
# This requires a bunch of things to be precisely named.
#
# https://community.home-assistant.io/t/schlage-connect-locks-ha-integration-needs-attention/36512
#
homeassistant:
  customize:
    lock.lock_front:
      icon_template: >-
        {% set alarm_type_value = states('sensor.lock_front_alarm_type') %}
        {% set alarm_type_icons = {
          '0':'mdi:blur-radial',
          '9':'mdi:lock-reset',
          '17':'mdi:lock-reset',
          '18':'mdi:lock-smart',
          '19':'mdi:account-key',
          '21':'mdi:lock',
          '22':'mdi:lock-open',
          '23':'mdi:lock-reset',
          '24':'mdi:wifi-strength-4-lock',
          '25':'mdi:wifi',
          '26':'mdi:lock-reset',
          '27':'mdi:lock-clock',
          '32':'mdi:delete-sweep',
          '33':'mdi:delete',
          '112':'mdi:form-textbox-password',
          '113':'mdi:content-duplicate',
          '161':'mdi:lock-alert',
          '162':'mdi:lock-clock',
          '167':'mdi:battery-10',
          '168':'mdi:battery-outline',
          '169':'mdi:battery-alert',
          } %}
        {% if alarm_type_value in alarm_type_icons %}
          {{ alarm_type_icons[alarm_type_value] }}
        {% elif states('lock.lock_front') == "locked" %}
          mdi:lock
        {% elif states('lock.lock_front') == "unlocked" %}
          mdi:lock-open
        {% else %}
          mdi:lock-question
        {% endif %}

    # Hide Scripts from Frontend
    script.lock_keypad_delete:
      hidden: true

  customize_glob:
    "zwave.lock_*":
      icon: mdi:lock-smart

    # Set icons (customize is less text than adding these to each one)
    "input_boolean.lock_keypad_*_switch":
      icon: mdi:lock-smart
    "input_text.lock_keypad_*_code":
      icon: mdi:form-textbox-password
    "input_select.lock_keypad_*_access_schedule":
      icon: mdi:calendar-clock
    "input_datetime.lock_keypad_*_date_start":
      icon: mdi:clock-start
    "input_datetime.lock_keypad_*_date_end":
      icon: mdi:clock-end

    # Hide unneeded lock sensors
    "sensor.lock_*_access_control":
      hidden: true
    "sensor.lock_*_alarm_level":
      hidden: true
    "sensor.lock_*_alarm_type":
      hidden: true
    "sensor.lock_*_power_management":
      hidden: true
    "sensor.lock_*_system":
      hidden: true

history:
  exclude:
    entity_globs:
      - input_text.lock_keypad_*_name
      - input_text.lock_keypad_*_code
      - input_select.lock_keypad_*_access_schedule
      - input_datetime.lock_keypad_*_date_start
      - input_datetime.lock_keypad_*_date_end
      - input_boolean.lock_keypad_*_front_switch
      - sensor.keypad_*_temp_lock_turn_on
      - sensor.keypad_*_temp_lock_turn_off
    entities:
      - sensor.lock_front_power_management
      - sensor.lock_front_sourcenodeid
      - sensor.lock_front_system
      - script.lock_keypad_delete

recorder:
  exclude:
    entity_globs:
      - input_text.lock_keypad_*_name
      - input_text.lock_keypad_*_code
      - input_select.lock_keypad_*_access_schedule
      - input_datetime.lock_keypad_*_date_start
      - input_datetime.lock_keypad_*_date_end
      - input_boolean.lock_keypad_*_front_switch
      - sensor.keypad_*_temp_lock_turn_on
      - sensor.keypad_*_temp_lock_turn_off
    entities:
      - sensor.lock_front_power_management
      - sensor.lock_front_sourcenodeid
      - sensor.lock_front_system
      - script.lock_keypad_delete

influxdb:
  exclude:
    entity_globs:
      - input_text.lock_keypad_*_name
      - input_text.lock_keypad_*_code
      - input_select.lock_keypad_*_access_schedule
      - input_datetime.lock_keypad_*_date_start
      - input_datetime.lock_keypad_*_date_end
      - input_boolean.lock_keypad_*_front_switch
      - sensor.keypad_*_temp_lock_turn_on
      - sensor.keypad_*_temp_lock_turn_off
    entities:
      - sensor.lock_front_power_management
      - sensor.lock_front_sourcenodeid
      - sensor.lock_front_system
      - script.lock_keypad_delete

script:
  lock_keypad_delete:
    alias: Keypad Delete Code
    description: Deletes a code from a keypad
    fields:
      keypad:
        description: "The keypad/code slot ID"
        example: "1"
    sequence:
      - service: input_text.set_value
        data_template:
          value: ''
          entity_id: "input_text.lock_keypad_{{ keypad }}_name"
      - service: input_text.set_value
        data_template:
          value: ''
          entity_id: "input_text.lock_keypad_{{ keypad }}_code"
      - service: input_select.select_option
        data_template:
          option: 'Always'
          entity_id: "input_select.lock_keypad_{{ keypad }}_access_schedule"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.lock_keypad_{{ keypad }}_front_switch"

sensor:
  - platform: template
    sensors:
      lock_front_status:
        friendly_name: Front Lock Status
        availability_template: "{{ not is_state('lock.lock_front', 'unavailable') }}"
        value_template: >-
          {% set number = states('sensor.lock_front_alarm_level') %}
          {% set alarm_type_value = states('sensor.lock_front_alarm_type') %}
          {% set entity_id = 'input_text.lock_keypad_' + number + '_name' %}
          {% set user = 'Master' if number == '0' else states(entity_id) %}
          {% set now = as_timestamp(now()) %}
          {% set alarm_type_value = '24' if (now - as_timestamp(states.lock.lock_front.last_changed)) < 15 and (now - as_timestamp(states.sensor.lock_front_alarm_type.last_changed)) > 15  and (states('lock.lock_front')) == 'locked' else alarm_type_value %}
          {% set alarm_type_value = '25' if (now - as_timestamp(states.lock.lock_front.last_changed)) < 15 and (now - as_timestamp(states.sensor.lock_front_alarm_type.last_changed)) > 15  and (states('lock.lock_front')) == 'unlocked' else alarm_type_value %}
          {% set alarm_type_general_actions = {
            '0':'No Status Reported',
            '9':'Lock Jammed',
            '17':'Keypad Lock Jammed',
            '21':'Manual Lock',
            '22':'Manual Unlock',
            '23':'HA Lock Jammed',
            '24':'HA Lock',
            '25':'HA Unlock',
            '26':'Auto Lock Jammed',
            '27':'Auto Lock',
            '32':'All Codes Deleted',
            '161':'Bad Code Entered',
            '167':'Battery Low',
            '168':'Battery Critical',
            '169':'Battery Too Low To Operate Lock' } %}
          {% set alarm_type_lock_actions = {
            '18':'Keypad Lock',
            '19':'Keypad Unlock',
            '162':'Lock Code Attempt Outside of Schedule' } %}
          {% set alarm_type_code_actions = {
            '33':'Code Deleted',
            '112':'Code Changed',
            '113':'Duplicate Code' } %}
          {% if alarm_type_value in alarm_type_code_actions %}
            {{ alarm_type_code_actions[alarm_type_value] }} (Code {{ number }})
          {% elif alarm_type_value in alarm_type_lock_actions and number == '0' %}
            {{ alarm_type_lock_actions[alarm_type_value] }} with Schlage Button
          {% elif alarm_type_value in alarm_type_lock_actions %}
            {{ alarm_type_lock_actions[alarm_type_value] }} by {{ user }} ({{ number }})
          {% elif alarm_type_value in alarm_type_general_actions %}
            {{ alarm_type_general_actions[alarm_type_value] }}
          {% else %}
            Unknown Alarm Type Value {{ states('sensor.lock_front_alarm_type') }}
          {% endif %}
        icon_template: >-
          {% set alarm_type_value = states('sensor.lock_front_alarm_type') %}
          {% set alarm_type_icons = {
            '0':'mdi:blur-radial',
            '9':'mdi:lock-reset',
            '17':'mdi:lock-reset',
            '18':'mdi:lock-smart',
            '19':'mdi:account-key',
            '21':'mdi:lock',
            '22':'mdi:lock-open',
            '23':'mdi:lock-reset',
            '24':'mdi:wifi-strength-4-lock',
            '25':'mdi:wifi',
            '26':'mdi:lock-reset',
            '27':'mdi:lock-clock',
            '32':'mdi:delete-sweep',
            '33':'mdi:delete',
            '112':'mdi:form-textbox-password',
            '113':'mdi:content-duplicate',
            '161':'mdi:lock-alert',
            '162':'mdi:lock-clock',
            '167':'mdi:battery-10',
            '168':'mdi:battery-outline',
            '169':'mdi:battery-alert',
            } %}
          {% if alarm_type_value in alarm_type_icons %}
            {{ alarm_type_icons[alarm_type_value] }}
          {% elif states('lock.lock_front') == "locked" %}
            mdi:lock
          {% elif states('lock.lock_front') == "unlocked" %}
            mdi:lock-open
          {% else %}
            mdi:lock-question
          {% endif %}

      keypad_1_temp_lock_turn_on:
        friendly_name: Turn keypad 1 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_1_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_1_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_2_temp_lock_turn_on:
        friendly_name: Turn keypad 2 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_2_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_2_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_3_temp_lock_turn_on:
        friendly_name: Turn keypad 3 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_3_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_3_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_4_temp_lock_turn_on:
        friendly_name: Turn keypad 4 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_4_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_4_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_5_temp_lock_turn_on:
        friendly_name: Turn keypad 5 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_5_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_5_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_6_temp_lock_turn_on:
        friendly_name: Turn keypad 6 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_6_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_6_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_7_temp_lock_turn_on:
        friendly_name: Turn keypad 7 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_7_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_7_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_8_temp_lock_turn_on:
        friendly_name: Turn keypad 8 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_8_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_8_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_9_temp_lock_turn_on:
        friendly_name: Turn keypad 9 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_9_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_9_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_10_temp_lock_turn_on:
        friendly_name: Turn keypad 10 on
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_10_date_start'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_10_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_1_temp_lock_turn_off:
        friendly_name: Turn keypad 1 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_1_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_1_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_2_temp_lock_turn_off:
        friendly_name: Turn keypad 2 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_2_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_2_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_3_temp_lock_turn_off:
        friendly_name: Turn keypad 3 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_3_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_3_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_4_temp_lock_turn_off:
        friendly_name: Turn keypad 4 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_4_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_4_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_5_temp_lock_turn_off:
        friendly_name: Turn keypad 5 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_5_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_5_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_6_temp_lock_turn_off:
        friendly_name: Turn keypad 6 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_6_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_6_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_7_temp_lock_turn_off:
        friendly_name: Turn keypad 7 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_7_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_7_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_8_temp_lock_turn_off:
        friendly_name: Turn keypad 8 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_8_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_8_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_9_temp_lock_turn_off:
        friendly_name: Turn keypad 9 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_9_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_9_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

      keypad_10_temp_lock_turn_off:
        friendly_name: Turn keypad 10 off
        value_template: >-
          {% set input = states['input_datetime']['lock_keypad_10_date_end'] %}
          {% set time_now = states['sensor']['date_time'].state|replace(',', '') ~ ':00' %}
          {% set access_schedule = states['input_select']['lock_keypad_10_access_schedule'].state %}
          {{ (access_schedule in ['Temporary', 'Recurring']) and input.state == time_now }}

input_text:
  lock_keypad_1_name:
    name: Name
  lock_keypad_1_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_2_name:
    name: Name
  lock_keypad_2_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_3_name:
    name: Name
  lock_keypad_3_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_4_name:
    name: Name
  lock_keypad_4_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_5_name:
    name: Name
  lock_keypad_5_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_6_name:
    name: Name
  lock_keypad_6_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_7_name:
    name: Name
  lock_keypad_7_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_8_name:
    name: Name
  lock_keypad_8_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_9_name:
    name: Name
  lock_keypad_9_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4
  lock_keypad_10_name:
    name: Name
  lock_keypad_10_code:
    name: Code
    pattern: '[0-9]*'
    min: 4
    max: 4

input_select:
  lock_keypad_1_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_2_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_3_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_4_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_5_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_6_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_7_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_8_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_9_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time
  lock_keypad_10_access_schedule:
    name: Access Schedule
    options:
      - Always
      - Recurring
      - Temporary
      - One Time

input_datetime:
  lock_keypad_1_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_1_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_2_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_2_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_3_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_3_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_4_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_4_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_5_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_5_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_6_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_6_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_7_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_7_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_8_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_8_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_9_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_9_date_end:
    name: End Time
    has_date: true
    has_time: true
  lock_keypad_10_date_start:
    name: Start Time
    has_date: true
    has_time: true
  lock_keypad_10_date_end:
    name: End Time
    has_date: true
    has_time: true

input_boolean:
  lock_keypad_1_front_switch:
    name: Front Lock
  lock_keypad_2_front_switch:
    name: Front Lock
  lock_keypad_3_front_switch:
    name: Front Lock
  lock_keypad_4_front_switch:
    name: Front Lock
  lock_keypad_5_front_switch:
    name: Front Lock
  lock_keypad_6_front_switch:
    name: Front Lock
  lock_keypad_7_front_switch:
    name: Front Lock
  lock_keypad_8_front_switch:
    name: Front Lock
  lock_keypad_9_front_switch:
    name: Front Lock
  lock_keypad_10_front_switch:
    name: Front Lock

automation:
  - alias: "[Lock] Front Door Lock Jammed"
    trigger:
      platform: state
      entity_id: sensor.lock_front_alarm_type
      to: "9"
    action:
      - service: script.notify_mobile
        data:
          who: "parents"
          title: "Front Door Lock Issue"
          message: "Check the front door, something is wrong with the lock."
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"
      - service: notify.shield_living_room
        data:
          title: "Front Door Lock Issue"
          message: "Check the front door, something is wrong with the lock."
          data:
            icon: "https://raw.githubusercontent.com/zanix/home-assistant-config/master/www/icons/lock-smart.png"
            smallicon: "https://raw.githubusercontent.com/zanix/home-assistant-config/master/www/icons/home-assistant.png"
      - service: script.notify_speech
        data:
          media_player: media_player.living_room_speaker
          message: "Check the front door, something is wrong with the lock."

  - alias: "[Lock] Front Door Lock at Night"
    trigger:
      platform: time
      at: "21:00:00"
    condition:
      - condition: state
        entity_id: lock.lock_front
        state: "unlocked"
      - condition: state
        entity_id: sensor.door_front
        state: "Closed"
    action:
      service: lock.lock
      entity_id: lock.lock_front

  - alias: "[Lock] Front Door Re-lock after Unlock"
    trigger:
      platform: state
      entity_id: lock.lock_front
      to: "unlocked"
      for:
        minutes: 2
    condition:
      - condition: time
        after: "21:00:00"
        before: "08:00:00"
      - condition: state
        entity_id: sensor.door_front
        state: "Closed"
    action:
      service: lock.lock
      entity_id: lock.lock_front

  - alias: "[Lock] Front Door Lock when Away"
    trigger:
      platform: state
      entity_id: group.people
      from: "home"
      to: "not_home"
      for:
        minutes: 5
    condition:
      - condition: time
        after: "08:00:00"
        before: "21:00:00"
      - condition: state
        entity_id: lock.lock_front
        state: "unlocked"
    action:
      - service: lock.lock
        entity_id: lock.lock_front
      - service: script.notify_mobile
        data:
          who: "parents"
          title: "Front Door Lock"
          message: "The Front Door has been locked since no one is home."
          icon: "/local/icons/lock.png"
          group: "lock-front"

  - alias: "[Lock] Keypad Switch On"
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - input_boolean.lock_keypad_1_front_switch
        - input_boolean.lock_keypad_2_front_switch
        - input_boolean.lock_keypad_3_front_switch
        - input_boolean.lock_keypad_4_front_switch
        - input_boolean.lock_keypad_5_front_switch
        - input_boolean.lock_keypad_6_front_switch
        - input_boolean.lock_keypad_7_front_switch
        - input_boolean.lock_keypad_8_front_switch
        - input_boolean.lock_keypad_9_front_switch
        - input_boolean.lock_keypad_10_front_switch
      to: "on"
    condition:
      condition: template
      value_template: >-
        {% set object_id = trigger.to_state.object_id %}
        {% set code_slot = object_id.split('_')[2] %}
        {% set select_id = 'lock_keypad_' ~ code_slot ~ '_access_schedule' %}
        {{ states['input_select'][select_id].state == 'Always' }}
    action:
      - service: lock.set_usercode
        data_template:
          node_id: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set lock_name = object_id.split('_')[3] %}
            {% set lock_id = 'lock_' ~ lock_name %}
            {{ states['lock'][lock_id].attributes.node_id }}
          code_slot: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[2] %}
            {{ code_slot }}
          usercode: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[2] %}
            {% set user_code_id = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {{ states['input_text'][user_code_id].state }}
      - service: script.notify_mobile
        data:
          who: "josh"
          title: "Code Enabled"
          message: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[2] %}
            {% set usercode_input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {% set usercode = states['input_text'][usercode_input].state %}
            {% set name_input = 'lock_keypad_' ~ code_slot ~ '_name' %}
            {% set name = states['input_text'][name_input].state %}
            The pin code {{ usercode }} for {{ name }} has now been enabled.
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"

  - alias: "[Lock] Keypad Switch Off"
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - input_boolean.lock_keypad_1_front_switch
        - input_boolean.lock_keypad_2_front_switch
        - input_boolean.lock_keypad_3_front_switch
        - input_boolean.lock_keypad_4_front_switch
        - input_boolean.lock_keypad_5_front_switch
        - input_boolean.lock_keypad_6_front_switch
        - input_boolean.lock_keypad_7_front_switch
        - input_boolean.lock_keypad_8_front_switch
        - input_boolean.lock_keypad_9_front_switch
        - input_boolean.lock_keypad_10_front_switch
      to: "off"
    condition:
      condition: template
      value_template: >-
        {% set object_id = trigger.to_state.object_id %}
        {% set code_slot = object_id.split('_')[2] %}
        {% set select_id = 'lock_keypad_' ~ code_slot ~ '_access_schedule' %}
        {{ states['input_select'][select_id].state == 'Always' }}
    action:
      - service: lock.clear_usercode
        # service: lock.set_usercode
        data_template:
          node_id: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set lock_name = object_id.split('_')[3] %}
            {% set lock_id = 'lock_' ~ lock_name %}
            {{ states['lock'][lock_id].attributes.node_id }}
          code_slot: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[2] %}
            {{ code_slot }}
          # usercode: >-
          #   {{ range(1000, 9999)|random }}
      - service: script.notify_mobile
        data:
          who: "josh"
          title: "Code Disabled"
          message: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[2] %}
            {% set usercode_input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {% set usercode = states['input_text'][usercode_input].state %}
            {% set name_input = 'lock_keypad_' ~ code_slot ~ '_name' %}
            {% set name = states['input_text'][name_input].state %}
            The pin code for {{ name }} is now disabled.
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"

  - alias: "[Lock] Keypad Temporary Code Start"
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - sensor.keypad_1_temp_lock_turn_on
        - sensor.keypad_2_temp_lock_turn_on
        - sensor.keypad_3_temp_lock_turn_on
        - sensor.keypad_4_temp_lock_turn_on
        - sensor.keypad_5_temp_lock_turn_on
        - sensor.keypad_6_temp_lock_turn_on
        - sensor.keypad_7_temp_lock_turn_on
        - sensor.keypad_8_temp_lock_turn_on
        - sensor.keypad_9_temp_lock_turn_on
        - sensor.keypad_10_temp_lock_turn_on
      to: "True"
    condition:
      condition: template
      value_template: >-
        {% set object_id = trigger.to_state.object_id %}
        {% set code_slot = object_id.split('_')[1] %}
        {% set input = 'lock_keypad_' ~ code_slot ~ '_front_switch' %}
        {{ states['input_boolean'][input].state == 'on' }}
    action:
      - service: lock.set_usercode
        data_template:
          node_id: >-
            {{ states['lock']['lock_front'].attributes.node_id }}
          code_slot: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[1] %}
            {{ code_slot }}
          usercode: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[1] %}
            {% set input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {{ states['input_text'][input].state }}
      - service: script.notify_mobile
        data:
          who: "parents"
          title: "Temporary Code Enabled"
          message: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[1] %}
            {% set usercode_input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {% set usercode = states['input_text'][usercode_input].state %}
            {% set name_input = 'lock_keypad_' ~ code_slot ~ '_name' %}
            {% set name = states['input_text'][name_input].state %}
            {% set start_input = 'lock_keypad_' ~ code_slot ~ '_date_start' %}
            {% set start = states['input_datetime'][start_input].state %}
            {% set end_input = 'lock_keypad_' ~ code_slot ~ '_date_end' %}
            {% set end = states['input_datetime'][end_input].state %}
            The pin code {{ usercode }} is now temporarily enabled for {{ name }} from {{ start }} to {{ end }}.
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"

  - alias: "[Lock] Keypad Temporary Code End"
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - sensor.keypad_1_temp_lock_turn_off
        - sensor.keypad_2_temp_lock_turn_off
        - sensor.keypad_3_temp_lock_turn_off
        - sensor.keypad_4_temp_lock_turn_off
        - sensor.keypad_5_temp_lock_turn_off
        - sensor.keypad_6_temp_lock_turn_off
        - sensor.keypad_7_temp_lock_turn_off
        - sensor.keypad_8_temp_lock_turn_off
        - sensor.keypad_9_temp_lock_turn_off
        - sensor.keypad_10_temp_lock_turn_off
      to: "True"
    action:
      - service: lock.clear_usercode
        # service: lock.set_usercode
        data_template:
          node_id: >-
            {{ states['lock']['lock_front'].attributes.node_id }}
          code_slot: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[1] %}
            {{ code_slot }}
          # usercode: >-
          #   {{ range(1000, 9999)|random }}
      - service: script.notify_mobile
        data:
          who: "parents"
          title: "Temporary Code Disabled"
          message: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set code_slot = object_id.split('_')[1] %}
            {% set usercode_input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {% set usercode = states['input_text'][usercode_input].state %}
            {% set name_input = 'lock_keypad_' ~ code_slot ~ '_name' %}
            {% set name = states['input_text'][name_input].state %}
            The pin code {{ usercode }} for {{ name }} has now been removed.
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"
      - condition: template
        value_template: >-
          {% set object_id = trigger.to_state.object_id %}
          {% set code_slot = object_id.split('_')[1] %}
          {% set input = 'lock_keypad_' ~ code_slot ~ '_access_schedule' %}
          {% set input_value = states['input_select'][input].state %}
          {{ input_value == 'Temporary' }}
      - service: script.turn_on
        entity_id: script.lock_keypad_delete
        data_template:
          variables:
            keypad: "{{ trigger.to_state.object_id.split('_')[1] }}"

  - alias: "[Lock] Keypad One Time Use Code Unlock"
    trigger:
      platform: state
      entity_id: sensor.lock_front_alarm_level
    condition:
      condition: template
      value_template: >-
        {% set alarm_type_value = states('sensor.lock_front_alarm_type') %}
        {% set code_slot = trigger.to_state.state %}
        {% set input = 'lock_keypad_' ~ code_slot ~ '_access_schedule' %}
        {% set input_value = states['input_select'][input].state %}
        {{ input_value == 'One Time' and alarm_type_value == '19' }}
    action:
      - service: lock.clear_usercode
        # service: lock.set_usercode
        data_template:
          node_id: >-
            {{ states['lock']['lock_front'].attributes.node_id }}
          code_slot: >-
            {% set code_slot = trigger.to_state.state %}
            {{ code_slot }}
          # usercode: >-
          #   {{ range(1000, 9999)|random }}
      - service: script.notify_mobile
        data:
          who: "parents"
          title: "One Time Use Code Used"
          message: >-
            {% set code_slot = trigger.to_state.state %}
            {% set usercode_input = 'lock_keypad_' ~ code_slot ~ '_code' %}
            {% set usercode = states['input_text'][usercode_input].state %}
            {% set name_input = 'lock_keypad_' ~ code_slot ~ '_name' %}
            {% set name = states['input_text'][name_input].state %}
            The one time use pin code {{ usercode }} for {{ name }} has been used and removed.
          icon: "/local/icons/lock-smart.png"
          group: "lock-front"
      - condition: template
        value_template: >-
          {% set code_slot = trigger.to_state.state %}
          {% set input = 'lock_keypad_' ~ code_slot ~ '_access_schedule' %}
          {% set input_value = states['input_select'][input].state %}
          {{ input_value == 'One Time' }}
      - service: script.turn_on
        entity_id: script.lock_keypad_delete
        data_template:
          variables:
            keypad: "{{ trigger.to_state.object_id.split('_')[1] }}"
