---
# HASS.Agent is a Windows-based client for Home Assistant, developed in .NET 6.
# It provides notifications, quick actions, commands, sensors and more.
#
# https://github.com/LAB02-Research/HASS.Agent
#
script:
  hass_publish_sensors:
    alias: '[HASS.Agent] Publish Sensors'
    description: 'Publishes user and Satellite sensors.'
    icon: mdi:gesture-tap-button

    fields:
      computer:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        example: 'computer'
        required: true
        selector:
          select:
            mode: dropdown
            custom_value: true
            multiple: true
            options: !secret hass_agent_computers

    # Set local variables for reuse in this script.
    variables:
      computer: '{{ computer | default([]) | lower }}'
      computer_list: >
        {% set computers = namespace(names=[]) %}
        {% if computer %}
          {# Convert to a list #}
          {% if ',' in computer %}
            {% set entitynum = computer.split(',') | count %}
            {% for i in range(0, entitynum) %}
              {% set computers.names = computers.names + [computer.split(',')[i] | string | trim ] %}
            {% endfor %}
          {% elif computer[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
            {% set computers.names = computers.names + [computer | string | trim] %}
          {% else %}
            {% set computers.names = computer %}
          {% endif %}
        {% endif %}
        {{ computers.names | unique | list | lower }}

    sequence:
      # Loop through computer_list
      - repeat:
          for_each: '{{ computer_list }}'
          sequence:
            - service: button.press
              target:
                entity_id:
                  - 'button.{{ repeat.item }}_publish_sensors'
                  - 'button.{{ repeat.item }}_satellite_publish_sensors'

  hass_agent_launch:
    alias: '[HASS.Agent] Launch Application'
    description: 'Opens an application.'
    icon: mdi:application-outline

    fields:
      computer:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        example: 'computer'
        required: true
        selector:
          select:
            mode: dropdown
            custom_value: true
            multiple: true
            options: !secret hass_agent_computers
      command:
        name: 'Command'
        description: 'Application name or command line.'
        example: '"notepad++.exe" or "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"'
        required: true
        selector:
          text:

    # Set local variables for reuse in this script.
    variables:
      computer: '{{ computer | default([]) | upper }}'
      computer_list: >
        {% set computers = namespace(names=[]) %}
        {% if computer %}
          {# Convert to a list #}
          {% if ',' in computer %}
            {% set entitynum = computer.split(',') | count %}
            {% for i in range(0, entitynum) %}
              {% set computers.names = computers.names + [computer.split(',')[i] | string | trim ] %}
            {% endfor %}
          {% elif computer[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
            {% set computers.names = computers.names + [computer | string | trim] %}
          {% else %}
            {% set computers.names = computer %}
          {% endif %}
        {% endif %}
        {{ computers.names | unique | list | upper }}

    sequence:
      # Loop through computer_list
      - repeat:
          for_each: '{{ computer_list }}'
          sequence:
            - service: mqtt.publish
              data:
                topic_template: "homeassistant/button/{{ repeat.item }}/{{ repeat.item }}_Launch/action"
                payload_template: '{{ command }}'

  hass_agent_launch_url:
    alias: '[HASS.Agent] Launch URL'
    description: 'Open a URL or file using the default application.'
    icon: mdi:application-outline

    fields:
      computer:
        name: 'Computer'
        description: 'The HASS.Agent computer.'
        example: 'computer'
        required: true
        selector:
          select:
            mode: dropdown
            custom_value: true
            multiple: true
            options: !secret hass_agent_computers
      url:
        name: 'URL'
        description: 'URL or file path.'
        example: '"steam://rungameid/1151640", or "https://hassagent.readthedocs.io"'
        required: true
        selector:
          text:

    # Set local variables for reuse in this script.
    variables:
      computer: '{{ computer | default([]) | upper }}'
      computer_list: >
        {% set computers = namespace(names=[]) %}
        {% if computer %}
          {# Convert to a list #}
          {% if ',' in computer %}
            {% set entitynum = computer.split(',') | count %}
            {% for i in range(0, entitynum) %}
              {% set computers.names = computers.names + [computer.split(',')[i] | string | trim ] %}
            {% endfor %}
          {% elif computer[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
            {% set computers.names = computers.names + [computer | string | trim] %}
          {% else %}
            {% set computers.names = computer %}
          {% endif %}
        {% endif %}
        {{ computers.names | unique | list | upper }}

    sequence:
      # Loop through computer_list
      - repeat:
          for_each: '{{ computer_list }}'
          sequence:
            - service: mqtt.publish
              data:
                topic_template: "homeassistant/button/{{ repeat.item }}/{{ repeat.item }}_Launch_URL/action"
                payload_template: '{{ url }}'

  notify_hass_agent:
    alias: '[Notify] HASS.Agent'
    description: 'Notify via HASS.Agent'
    icon: mdi:cellphone-message
    mode: parallel

    fields:
      computer:
        name: 'Computer'
        description: 'Which computer to send to. Also accepts comma separated values or a list.'
        example: 'computer'
        required: true
        selector:
          select:
            mode: dropdown
            custom_value: true
            multiple: true
            options: !secret hass_agent_computers
      title:
        name: 'Title'
        example: 'Startup: Home Assistant is Up and Running!'
        selector:
          text:
      message:
        name: 'Message'
        example: 'Message text'
        required: true
        selector:
          text:
            multiline: true
      image:
        name: 'Image'
        example: 'local/image.png'
        selector:
          text:
      camera:
        name: 'Camera'
        description: 'Camera stream to attach.'
        example: 'camera.doorbell'
        selector:
          entity:
            domain: camera
      duration:
        name: 'Duration'
        description: 'The duration in seconds for which the notification will be displayed.'
        example: '5'
        selector:
          number:
            mode: box
            unit_of_measurement: seconds
            min: 1
            max: 36000
      actions:
        name: 'Actions'
        description: 'A list of actions for actionable notifications.'
        example: ''
        selector:
          object:

    # Set local variables for reuse in this script.
    variables:
      computer: '{{ computer | default([]) | lower }}'
      computer_list: >
        {% set computers = namespace(names=[]) %}
        {% if computer %}
          {# Convert to a list #}
          {% if ',' in computer %}
            {% set entitynum = computer.split(',') | count %}
            {% for i in range(0, entitynum) %}
              {% set computers.names = computers.names + [computer.split(',')[i] | string | trim ] %}
            {% endfor %}
          {% elif computer[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
            {% set computers.names = computers.names + [computer | string | trim] %}
          {% else %}
            {% set computers.names = computer %}
          {% endif %}
        {% endif %}
        {{ computers.names | unique | list | lower }}

    sequence:
      # Loop through computer_list
      - repeat:
          for_each: '{{ computer_list }}'
          sequence:
            - variables:
                notification_service: 'notify.{{ repeat.item }}'
                image_path: >-
                  {%- if image is string -%}
                    {%- if image.startswith("http") -%}
                      {{ image }}
                    {%- else -%}
                      {{ state_attr("sensor.config", "internal_url") }}/{{ image }}
                    {%- endif -%}
                  {%- endif -%}
                duration: '{{ duration | default(5) }}'

            - if:
                - condition: template
                  value_template: '{{ is_state("sensor." ~ repeat.item ~ "_user_notification", "AcceptsNotifications") }}'
              then:
                - choose:
                    # Send camera image.
                    - conditions: '{{ camera is string }}'
                      sequence:
                        - service: '{{ notification_service }}'
                          data:
                            title: '{{ title }}'
                            message: '{{ message }}'
                            data:
                              image: '{{ state_attr("sensor.config", "internal_url") }}{{ state_attr(camera, "entity_picture") }}'
                              duration: '{{ duration }}'
                              actions: '{{ actions | default([], true) }}'

                    # Send an image.
                    - conditions: '{{ image is string }}'
                      sequence:
                        - service: '{{ notification_service }}'
                          data:
                            title: '{{ title }}'
                            message: '{{ message }}'
                            data:
                              image: '{{ image_path }}'
                              duration: '{{ duration }}'
                              actions: '{{ actions | default([], true) }}'

                  # Send a basic notification message.
                  default:
                    - service: '{{ notification_service }}'
                      data:
                        title: '{{ title }}'
                        message: '{{ message }}'
                        data:
                          duration: '{{ duration }}'
                          actions: '{{ actions | default([], true) }}'
