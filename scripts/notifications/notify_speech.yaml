---
# Sends a Text-to-Speech message to a media player.
# This checks the current time as to not disturb sleeping kids (or adults) then
# calls script.media_play to send the message.
notify_speech:
  alias: '[Notify] Speech'
  description: 'Notify users via Text-to-speech.'
  icon: mdi:microphone-message
  mode: parallel

  fields:
    media_player:
      name: 'Media Player'
      example: media_player.cast_living_room_speaker
      required: true
      selector:
        entity:
          multiple: true
          domain: media_player
    message:
      name: 'Message'
      example: 'Message text'
      required: true
      selector:
        text:
          multiline: true
    voice:
      name: Voice Service
      description: The voice service to use.
      selector:
        select:
          options:
            - label: Google Cloud
              value: google_cloud
            - label: Nabu Casa Cloud
              value: cloud

  sequence:
    - alias: Set local variables for reuse in this script.
      variables:
        # Use a lower volume during quiet hours.
        volume:
          media_player.cast_living_room_speaker: '{{ iif(is_state("schedule.quiet_hours", "on"), 30, 60) }}'
          media_player.cast_family_room_speaker: '{{ iif(is_state("schedule.quiet_hours", "on"), 30, 70) }}'
          media_player.cast_office_speaker: '{{ iif(is_state("schedule.quiet_hours", "on"), 15, 40) }}'
        # Check for availability.
        available:
          media_player.cast_living_room_speaker: true
          media_player.cast_family_room_speaker: true
          media_player.cast_office_speaker: '{{ is_state("binary_sensor.erebus_mic_active", "off") }}'
        media_player: '{{ media_player | default([]) }}'
        media_player_list: >
          {% set entities = namespace(names=[]) %}
          {% if media_player %}
            {# Convert to a list #}
            {% if ',' in media_player %}
              {% set entitynum = media_player.split(',') | count %}
              {% for i in range(0, entitynum) %}
                {% set entities.names = entities.names + [media_player.split(',')[i] | string | trim] %}
              {% endfor %}
            {% elif media_player[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
              {% set entities.names = entities.names + [media_player | string | trim] %}
            {% else %}
              {% set entities.names = media_player %}
            {% endif %}
          {% endif %}
          {{ entities.names | unique | list }}
        voice: '{{ voice | default("cloud") }}'
    - alias: Only send the message if notifications are enabled.
      condition: state
      entity_id: input_boolean.audio_notifications
      state: 'on'
    - repeat:
        for_each: '{{ media_player_list }}'
        sequence:
          - alias: Check the entity is available.
            condition: template
            value_template: '{{ available[repeat.item] }}'
          - alias: Use script.turn_on to play on all devices simultaneously
            action: script.turn_on
            target:
              entity_id: script.media_play
            data:
              variables:
                media_player: '{{ repeat.item }}'
                message: '{{ message }}'
                volume: >-
                  {% if repeat.item in volume %}
                    {{ volume[repeat.item] }}
                  {% else %}
                    {{ iif(is_state("schedule.quiet_hours", "on"), 30, 60) }}
                  {% endif %}
                voice: '{{ voice }}'
