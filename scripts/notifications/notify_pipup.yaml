---
notify_pipup:
  alias: '[Notify] PiPup'
  description: 'Notify PiPup devices.'
  icon: mdi:android
  mode: parallel

  fields:
    device:
      name: 'Device'
      description: 'Which device to send to.'
      required: true
      selector:
        select:
          mode: dropdown
          custom_value: true
          multiple: true
          options:
            - Living Room
            - Family Room
            - Master Bedroom
    title:
      name: 'Title'
      example: 'Startup: Home Assistant is Up and Running!'
      selector:
        text:
    message:
      name: 'Message'
      example: 'Message text'
      selector:
        text:
          multiline: true
    icon:
      name: 'Icon'
      description: 'Send an icon as an image and set the width to 64.'
      example: 'local/icon.png or http://url.to.image'
      selector:
        text:
    image:
      name: 'Image'
      example: 'local/image.png or http://url.to.image'
      selector:
        text:
    camera:
      name: 'Camera'
      description: 'Camera stream to attach.'
      example: 'camera.doorbell'
      selector:
        entity:
          domain: camera
    url:
      name: 'URL'
      description: 'Webpage to display in the notification.'
      selector:
        text:
    width:
      name: 'Media width'
      description: 'Used for Image, Camera, and URL'
      default: '640'
      selector:
        number:
          mode: box
          min: 1
          max: 1024
    height:
      name: 'Media height'
      description: 'Used for Camera and URL'
      default: '480'
      selector:
        number:
          mode: box
          min: 1
          max: 1024
    position:
      name: 'Position'
      description: 'Location of the notification.'
      default: '1'
      selector:
        select:
          options:
            - label: Top Right
              value: '0'
            - label: Top Left
              value: '1'
            - label: Bottom Right
              value: '2'
            - label: Bottom Left
              value: '3'
            - label: Center
              value: '4'
    background_color:
      name: 'Background color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      default: '#cc0f0e0e'
      selector:
        text:
    title_color:
      name: 'Title color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      default: '#50bff2'
      selector:
        text:
    message_color:
      name: 'Message color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      default: '#fbf5f5'
      selector:
        text:
    title_size:
      name: 'Title size'
      default: '16'
      selector:
        number:
          mode: box
          min: 1
          max: 60
    message_size:
      name: 'Message size'
      default: '12'
      selector:
        number:
          mode: box
          min: 1
          max: 60
    duration:
      name: 'Duration'
      description: 'The duration in seconds for which the notification will be displayed.'
      default: '8'
      example: '5'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 60

  # Set local variables for reuse in this script.
  variables:
    devices: !secret pipup_devices
    device: '{{ device|default([])|lower }}'
    device_list: >
      {% set devices = namespace(names=[]) %}
      {% if device %}
        {# Convert to a list #}
        {% if ',' in device %}
          {% set entitynum = device.split(',') | count %}
          {% for i in range(0, entitynum) %}
            {% set devices.names = devices.names + [device.split(',')[i]|string|trim ] %}
          {% endfor %}
        {% elif device[0]|count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
          {% set devices.names = devices.names + [device|string|trim] %}
        {% else %}
          {% set devices.names = device %}
        {% endif %}
      {% endif %}
      {{ devices.names|unique|list|lower }}

    # Generate a random ID for the webrtc link.
    link_id: '{% for _ in range(40) %}{{ range(10)|random }}{% endfor %}'
    icon_path: >-
      {%- if icon is string -%}
        {%- if icon.startswith("http") -%}
          {{ icon }}
        {%- else -%}
          {{ state_attr("sensor.config", "internal_url") }}/{{ icon }}
        {%- endif -%}
      {%- endif -%}
    image_path: >-
      {%- if image is string -%}
        {%- if image.startswith("http") -%}
          {{ image }}
        {%- else -%}
          {{ state_attr("sensor.config", "internal_url") }}/{{ image }}
        {%- endif -%}
      {%- endif -%}
    media_data: >-
      {%- if url is string -%}
        {{ {
            "web": {
              "uri": url,
              "width": width | default(640, true),
              "height": height | default(480, true),
            }
          }|tojson }}
      {%- elif icon is string -%}
        {{ {
            "image": {
              "uri": icon_path,
              "width": width | default(64, true),
            }
          }|tojson }}
      {%- elif image is string -%}
        {{ {
            "image": {
              "uri": image_path,
              "width": width | default(640, true),
            }
          }|tojson }}
      {%- elif camera is string -%}
        {{ {
            "web": {
              "uri": state_attr("sensor.config", "internal_url") ~ '/webrtc/embed?url=' ~ link_id ~ '&webrtc=false',
              "width": width | default(640, true),
              "height": height | default(480, true),
            }
          }|tojson }}
      {%- endif -%}

  sequence:
    # Create the webrtc link if a camera was chosen.
    - if:
        - condition: template
          value_template: '{{ camera is string }}'
      then:
        - service: webrtc.create_link
          data:
            link_id: '{{ link_id }}'
            entity: '{{ camera }}'
            open_limit: 5
            time_to_live: 60
    # Loop through device_list
    - repeat:
        for_each: '{{ device_list }}'
        sequence:
          - variables:
              device_value: >-
                {% if repeat.item|int(default=-1) == -1 %}
                  {{ devices[repeat.item|lower] }}
                {% else %}
                  {{ repeat.item }}
                {% endif %}
          - service: rest_command.pipup
            data:
              ip_address: '{{ device_value }}'
              duration: '{{ duration | default(8, true) }}'
              position: '{{ position | default(1, true) }}'
              title: '{{ title | default("", true) }}'
              titleColor: '{{ title_color | default("#50bff2", true) }}'
              titleSize: '{{ title_size | default(16, true) }}'
              message: '{{ message | default("", true) }}'
              messageColor: '{{ message_color | default("#fbf5f5", true) }}'
              messageSize: '{{ message_size | default(12, true) }}'
              backgroundColor: '{{ background_color | default("#cc0f0e0e", true) }}'
              media_data: '{{ media_data | default("{}", true) }}'
