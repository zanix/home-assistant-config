---
notify_pipup:
  alias: '[Notify] PiPup'
  description: 'Notify PiPup devices.'
  icon: mdi:picture-in-picture-top-right
  mode: parallel

  fields:
    entity:
      name: 'Entity'
      description: 'Which Android TV entity to send to.'
      required: true
      selector:
        entity:
          multiple: true
          integration: androidtv
    title:
      name: 'Title'
      example: 'Startup: Home Assistant is Up and Running!'
      selector:
        text:
    message:
      name: 'Message'
      example: 'Message text'
      selector:
        text:
          multiline: true
    icon_url:
      name: 'Icon'
      description: 'Send an icon as an image and set the width to 64.'
      example: 'local/icon.png or http://url.to.image'
      selector:
        text:
    image:
      name: 'Image'
      example: 'local/image.png or http://url.to.image'
      selector:
        text:
    camera:
      name: 'Camera'
      description: 'Camera stream to attach.'
      example: 'camera.doorbell'
      selector:
        entity:
          domain: camera
    url:
      name: 'URL'
      description: 'Webpage to display in the notification.'
      selector:
        text:
    width:
      name: 'Media width'
      description: 'Used for Image, Camera, and URL'
      example: '640'
      selector:
        number:
          mode: box
          min: 1
          max: 1024
    height:
      name: 'Media height'
      description: 'Used for Camera and URL'
      example: '480'
      selector:
        number:
          mode: box
          min: 1
          max: 1024
    position:
      name: 'Position'
      description: 'Location of the notification.'
      selector:
        select:
          options:
            - label: Top Right
              value: '0'
            - label: Top Left
              value: '1'
            - label: Bottom Right
              value: '2'
            - label: Bottom Left
              value: '3'
            - label: Center
              value: '4'
    background_color:
      name: 'Background color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      example: '#cc0f0e0e'
      selector:
        color_rgb:
    background_transparency:
      name: 'Background transparency'
      example: '204'
      selector:
        number:
          min: 0
          max: 255
    title_color:
      name: 'Title color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      example: '#50bff2'
      selector:
        color_rgb:
    title_transparency:
      name: 'Title transparency'
      example: '255'
      selector:
        number:
          min: 0
          max: 255
    message_color:
      name: 'Message color'
      description: 'Color in HEX format "#[AA]RRGGBB"'
      example: '#fbf5f5'
      selector:
        color_rgb:
    message_transparency:
      name: 'Message transparency'
      example: '255'
      selector:
        number:
          min: 0
          max: 255
    title_size:
      name: 'Title size'
      example: '16'
      selector:
        number:
          mode: box
          min: 1
          max: 60
    message_size:
      name: 'Message size'
      example: '12'
      selector:
        number:
          mode: box
          min: 1
          max: 60
    duration:
      name: 'Duration'
      description: 'The duration in seconds for which the notification will be displayed.'
      example: '8'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 60
    enable_debug:
      name: Enable debug output?
      selector:
        constant:
          value: true
          label: Enabled

  # Set local variables for reuse in this script.
  variables:
    # Set to true to create a "persistent_notification" with debugging information.
    debug: '{{ iif(enable_debug is defined, enable_debug, false) }}'

    background_color_rgba: |-
      {%- set transparancy = iif(background_transparancy is defined, background_transparancy, 204) -%}
      {%- if background_color is defined -%}
        {%- if background_color is iterable -%}
          #{{ "%02x%02x%02x%02x" | format(transparancy, background_color[0], background_color[1], background_color[2]) }}
        {%- elif background_color is string -%}
          {{ background_color }}
        {%- endif -%}
      {%- endif -%}
    title_color_rgba: |-
      {%- set transparancy = iif(title_transparancy is defined, title_transparancy, 255) -%}
      {%- if title_color is defined -%}
        {%- if title_color is iterable -%}
          #{{ "%02x%02x%02x%02x" | format(transparancy, title_color[0], title_color[1], title_color[2]) }}
        {%- elif title_color is string -%}
          {{ title_color }}
        {%- endif -%}
      {%- endif -%}
    message_color_rgba: |-
      {%- set transparancy = iif(message_transparancy is defined, message_transparancy, 255) -%}
      {%- if message_color is defined -%}
        {%- if message_color is iterable -%}
          #{{ "%02x%02x%02x%02x" | format(transparancy, message_color[0], message_color[1], message_color[2]) }}
        {%- elif message_color is string -%}
          {{ message_color }}
        {%- endif -%}
      {%- endif -%}
    entity: '{{ entity | default([]) }}'
    entity_list: >
      {% set entities = namespace(names=[]) %}
      {% if entity %}
        {# Convert to a list #}
        {% if ',' in entity %}
          {% set entitynum = entity.split(',') | count %}
          {% for i in range(0, entitynum) %}
            {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
          {% endfor %}
        {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
          {% set entities.names = entities.names + [entity | string | trim] %}
        {% else %}
          {% set entities.names = entity %}
        {% endif %}
      {% endif %}
      {{ entities.names | unique | list | lower }}

    # Generate a random ID for the webrtc link.
    link_id: '{% for _ in range(40) %}{{ range(10) | random }}{% endfor %}'
    icon_path: >-
      {%- if icon_url is string -%}
        {%- if icon_url.startswith("http") -%}
          {{ icon_url }}
        {%- else -%}
          {{ state_attr("sensor.config", "internal_url") }}/{{ icon_url }}
        {%- endif -%}
      {%- endif -%}
    image_path: >-
      {%- if image is string -%}
        {%- if image.startswith("http") -%}
          {{ image }}
        {%- else -%}
          {{ state_attr("sensor.config", "internal_url") }}/{{ image }}
        {%- endif -%}
      {%- endif -%}
    media_data: >-
      {%- if url is string -%}
        {{ {
            "web": {
              "uri": url,
              "width": width | default(640, true),
              "height": height | default(480, true),
            }
          } | tojson }}
      {%- elif icon_path is string -%}
        {{ {
            "image": {
              "uri": icon_path,
              "width": width | default(64, true),
            }
          } | tojson }}
      {%- elif image is string -%}
        {{ {
            "image": {
              "uri": image_path,
              "width": width | default(640, true),
            }
          } | tojson }}
      {%- elif camera is string -%}
        {{ {
            "web": {
              "uri": state_attr("sensor.config", "internal_url") ~ '/webrtc/embed?url=' ~ link_id ~ '&webrtc=false',
              "width": width | default(640, true),
              "height": height | default(360, true),
            }
          } | tojson }}
      {%- endif -%}

  sequence:
    # Set enable_debug = true above to provide output troubleshooting information.
    - if:
        - condition: template
          value_template: '{{ debug == true }}'
      then:
        - service: persistent_notification.create
          data:
            notification_id: 'notify_pipup'
            title: 'DEBUG: script.notify_pipup'
            message: |-
              entity_list: {{ entity_list }}
              duration: {{ duration | default(8, true) }}
              position: {{ position | default(1, true) }}
              title: {{ title | default("", true) }}
              titleColor: {{ title_color_rgba | default("#50bff2", true) }}
              titleSize: {{ title_size | default(16, true) }}
              message: {{ message | default("", true) }}
              messageColor: {{ message_color_rgba | default("#fbf5f5", true) }}
              messageSize: {{ message_size | default(12, true) }}
              backgroundColor: {{ background_color_rgba | default("#cc0f0e0e", true) }}
              media_data: {{ media_data | default("", true) }}
    # Create the webrtc link if a camera was chosen.
    - if:
        - condition: template
          value_template: '{{ camera is string }}'
      then:
        - service: webrtc.create_link
          data:
            link_id: '"{{ link_id }}"'
            entity: '{{ camera }}'
            open_limit: 5
            time_to_live: 60
    # Loop through entity_list
    - repeat:
        for_each: '{{ entity_list }}'
        sequence:
          - variables:
              ip_address: >-
                {{ device_attr(repeat.item, 'name') | replace("Android TV ", "") }}
          # Only send the message if the device is on.
          - if:
              - condition: template
                value_template: '{{ not is_state(repeat.item, "off") }}'
            then:
              - service: rest_command.pipup
                data:
                  ip_address: '{{ ip_address }}'
                  duration: '{{ duration | default(8, true) }}'
                  position: '{{ position | default(1, true) }}'
                  title: '{{ title | default("", true) }}'
                  titleColor: '{{ title_color_rgba | default("#50bff2", true) }}'
                  titleSize: '{{ title_size | default(16, true) }}'
                  message: '{{ message | default("", true) }}'
                  messageColor: '{{ message_color_rgba | default("#fbf5f5", true) }}'
                  messageSize: '{{ message_size | default(12, true) }}'
                  backgroundColor: '{{ background_color_rgba | default("#cc0f0e0e", true) }}'
                  media_data: '{{ media_data | default("", true) }}'
