---
notify_tvoverlay:
  alias: '[Notify] TVOverlay'
  description: 'Notify TVOverlay devices.'
  icon: mdi:picture-in-picture-top-right
  mode: parallel

  fields:
    notification_type:
      name: Notification type
      description: >-
        Send normal, fixed, or clear notification
      default: notify
      selector:
        select:
          mode: dropdown
          options:
            - value: notify
              label: Send notification
            - value: fixed
              label: Fixed notification
            - value: clear_notification
              label: Remove notifications with a tag
            - value: clear_fixed
              label: Remove fixed notifications with a tag
            - value: restart
              label: Restart service
    entity:
      name: 'Entity'
      description: 'Which Android TV entity to send to.'
      required: true
      selector:
        entity:
          multiple: true
          filter:
            - integration: androidtv
              domain: media_player
    app_title:
      name: 'App Title'
      example: 'Home Assistant'
      selector:
        text:
    title:
      name: 'Title'
      description: 'Title of the notification. Only for normal notifications.'
      example: 'Home Assistant'
      selector:
        text:
    message:
      name: 'Message'
      example: 'Message text'
      selector:
        text:
          multiline: true
    tag:
      name: Tag
      description: >-
        Unique tag for the notification. For updating/replacing or clearing
        specific notifications.
      example: tag
      selector:
        text:
    large_icon:
      name: 'Large Icon'
      description: >-
        Sets main icon. Accepts mdi icons, image urls, and bitmap encoded to base64.
        Only icon for Fixed notifications.
      example: 'mdi:icon_name, local/image.png, or http://url.to.image'
      selector:
        text:
    small_icon:
      name: 'Small Icon'
      description: >-
        Sets small icon. Accepts mdi icons, image urls, and bitmap encoded to base64.
        Not available for Fixed notifications.
      example: 'mdi:icon_name, local/image.png, or http://url.to.image'
      selector:
        text:
    icon_color:
      name: 'Small Icon color. Sets icon color for Fixed notifications.'
      description: 'Color in HEX format "#RRGGBB"'
      example: '#0f0e0e'
      selector:
        color_rgb:
    image:
      name: 'Image'
      description: 'Accepts mdi icons, image urls and bitmap encoded to base64.'
      example: 'mdi:icon_name, local/image.png, or http://url.to.image'
      selector:
        text:
    video:
      name: 'Video'
      description: 'Supports rtps, hls, dash, smoothstreaming, etc. Overrides image.'
      example: 'rtsp://localhost:5555/live'
      selector:
        text:
    position:
      name: 'Position'
      description: 'Location of the notification. Only for normal notifications.'
      default: top_start
      selector:
        select:
          mode: dropdown
          options:
            - label: Top Right
              value: 'top_start'
            - label: Top Left
              value: 'top_end'
            - label: Bottom Right
              value: 'bottom_end'
            - label: Bottom Left
              value: 'bottom_start'
    duration:
      name: 'Duration'
      description: 'The duration in seconds for which the notification will be displayed.'
      example: '8'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 3660
    shape:
      name: 'Fixed notificaiton shape'
      description: 'Shape of the fixed notification. Only available for Fixed notifications.'
      default: rounded
      selector:
        select:
          mode: dropdown
          options:
            - label: Rounded
              value: rounded
            - label: Rectangular
              value: rectangular
            - label: Circle
              value: circle
    message_color:
      name: 'Message color'
      description: 'Color in HEX format "#RRGGBB". Only available for Fixed notifications.'
      default:
        - 255
        - 255
        - 255
      example: '#0f0e0e'
      selector:
        color_rgb:
    background_color:
      name: 'Border color'
      description: 'Color in HEX format "#RRGGBB". Only available for Fixed notifications.'
      default:
        - 0
        - 0
        - 0
      example: '#0f0e0e'
      selector:
        color_rgb:
    background_transparency:
      name: 'Background transparency'
      description: 'Background transparency 0-255. Only available for Fixed notifications.'
      example: '204'
      selector:
        number:
          min: 0
          max: 255
    border_color:
      name: 'Border color'
      description: 'Color in HEX format "#RRGGBB". Only available for Fixed notifications.'
      default:
        - 255
        - 255
        - 255
      example: '#0f0e0e'
      selector:
        color_rgb:
    border_transparency:
      name: 'Border transparency'
      description: 'Border transparency 0-255. Only available for Fixed notifications.'
      example: '204'
      selector:
        number:
          min: 0
          max: 255
    enable_debug:
      name: Enable debug output?
      selector:
        constant:
          value: true
          label: Enabled
  sequence:
    - alias: Set local variables for reuse in this script.
      variables:
        debug: '{{ iif(enable_debug is defined, enable_debug, false) }}'
        notification_type: "{{ notification_type | default('notify') }}"
        tag: "{{ tag | default(none, true) }}"
        entity: '{{ entity | default([]) }}'
        entity_list: >
          {% set entities = namespace(names=[]) %}
          {% if entity %}
            {# Convert to a list #}
            {% if ',' in entity %}
              {% set entitynum = entity.split(',') | count %}
              {% for i in range(0, entitynum) %}
                {% set entities.names = entities.names + [entity.split(',')[i] | string | trim ] %}
              {% endfor %}
            {% elif entity[0] | count == 1 %} {# if the first item in the list has only a single character, it can't be a valid entity #}
              {% set entities.names = entities.names + [entity | string | trim] %}
            {% else %}
              {% set entities.names = entity %}
            {% endif %}
          {% endif %}
          {{ entities.names | unique | list | lower }}
        large_icon_path: >-
          {%- if large_icon is string -%}
            {%- if large_icon.startswith("http") -%}
              {{ large_icon }}
            {%- elif not large_icon.startswith("mdi") -%}
              {{ state_attr("sensor.hass_config", "internal_url") }}/{{ large_icon }}
            {%- else -%}
              {{ large_icon }}
            {%- endif -%}
          {%- endif -%}
        small_icon_path: >-
          {%- if small_icon is string -%}
            {%- if small_icon.startswith("http") -%}
              {{ small_icon }}
            {%- elif not small_icon.startswith("mdi") -%}
              {{ state_attr("sensor.hass_config", "internal_url") }}/{{ small_icon }}
            {%- else -%}
              {{ small_icon }}
            {%- endif -%}
          {%- endif -%}
        icon_color_rgb: |-
          {%- if icon_color is defined -%}
            {%- if icon_color is string -%}
              {{ icon_color }}
            {%- elif icon_color is iterable -%}
              #{{ "%02x%02x%02x" | format(icon_color[0], icon_color[1], icon_color[2]) }}
            {%- endif -%}
          {%- else -%}
            {{ none }}
          {%- endif -%}
        image_path: >-
          {%- if image is string and not camera is string -%}
            {%- if image.startswith("http") -%}
              {{ image }}
            {%- elif not image.startswith("mdi") -%}
              {{ state_attr("sensor.hass_config", "internal_url") }}/{{ image }}
            {%- else -%}
              {{ image }}
            {%- endif -%}
          {%- endif -%}
        video_path: >-
          {%- if video is string -%}
            {%- if video.startswith("rtsp") -%}
              {{ video }}
            {%- elif video.startswith("http") -%}
              {{ video }}
            {%- else -%}
              rtsp://10.10.10.10:8554/{{ video }}
            {%- endif -%}
          {%- endif -%}
        background_color_rgba: |-
          {%- set transparency = iif(background_transparency is defined, background_transparency, 204) -%}
          {%- if background_color is defined -%}
            {%- if background_color is iterable -%}
              #{{ "%02x%02x%02x%02x" | format(transparency, background_color[0], background_color[1], background_color[2]) }}
            {%- elif background_color is string -%}
              {{ background_color }}
            {%- endif -%}
          {%- endif -%}
        border_color_rgb: |-
          {%- set transparency = iif(border_transparency is defined, border_transparency, 204) -%}
          {%- if border_color is defined -%}
            {%- if border_color is iterable -%}
              #{{ "%02x%02x%02x%02x" | format(transparency, border_color[0], border_color[1], border_color[2]) }}
            {%- elif border_color is string -%}
              {{ border_color }}
            {%- endif -%}
          {%- endif -%}
        message_color_rgb: |-
          {%- if message_color is defined -%}
            {%- if message_color is string -%}
              {{ message_color }}
            {%- elif message_color is iterable -%}
              #{{ "%02x%02x%02x" | format(message_color[0], message_color[1], message_color[2]) }}
            {%- endif -%}
          {%- else -%}
            {{ none }}
          {%- endif -%}
    - alias: Set enable_debug = true above to provide output troubleshooting information.
      if:
        - condition: template
          value_template: '{{ debug == true }}'
      then:
        - action: persistent_notification.create
          data:
            notification_id: 'notify_tvoverlay'
            title: 'DEBUG: script.notify_tvoverlay'
            message: |-
              id: {{ tag | default(none, true) }}
              type: {{ notification_type | default(none, true) }}
              entity_list: {{ entity_list }}
              appTitle: {{ app_title | default(none, true) }}
              title: {{ title | default(none, true) }}
              message: {{ message | default(none, true) }}
              image: {{ image_path | default(none, true) }}
              video: {{ video_path | default(none, true) }}
              largeIcon: {{ large_icon_path | default(none, true) }}
              smallIcon: {{ small_icon_path | default(none, true) }}
              smallIconColor: {{ icon_color_rgb | default(none, true) }}
              position: {{ position | default("top_start", true) }}
              duration: {{ duration | default(none, true) }}
              shape: {{ shape | default(none, true) }}
              messageColor: {{ message_color_rgb | default(none, true) }}
              backgroundColor: {{ background_color_rgba | default(none, true) }}
              borderColor: {{ border_color_rgb | default(none, true) }}
    - alias: Check for empty entity list
      condition: template
      value_template: "{{ entity_list | count > 0 }}"
    - alias: Loop through entity_list
      repeat:
        for_each: '{{ entity_list }}'
        sequence:
          - alias: Only send the message if the device has a value.
            condition: template
            value_template: "{{ has_value(repeat.item) }}"
          - alias: Only send the message if the device is on.
            condition: template
            value_template: "{{ not is_state(repeat.item, \"off\") }}"
          - variables:
              ip_address: >-
                {{ device_attr(repeat.item, 'name') | replace("Android TV ", "") }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notification_type == 'notify' }}"
                sequence:
                  - action: rest_command.tvoverlay
                    data:
                      ip_address: "{{ ip_address }}"
                      id: "{{ tag | default(none, true) }}"
                      app_title: "{{ app_title | default(none, true) }}"
                      title: "{{ title | default(none, true) }}"
                      message: "{{ message | default(none, true) }}"
                      image: "{%- if video is string -%}{{ none }}{%- else -%}{{ image_path | default(none, true) }}{% endif -%}"
                      video: "{{ video_path | default(none, true) }}"
                      large_icon: "{{ large_icon_path | default(none, true) }}"
                      small_icon: "{{ small_icon_path | default(none, true) }}"
                      icon_color: "{{ icon_color_rgb | default(none, true) }}"
                      position: "{{ position | default('top_start', true) }}"
                      duration: "{{ duration | default(none, true) }}"
              - conditions:
                  - condition: template
                    value_template: "{{ notification_type == 'clear_notification' }}"
                sequence:
                  - action: rest_command.tvoverlay
                    data:
                      ip_address: "{{ ip_address }}"
                      id: "{{ tag | default(none, true) }}"
                      title: "REMOVED"
                      duration: "0"
              - conditions:
                  - condition: template
                    value_template: "{{ notification_type == 'fixed' }}"
                sequence:
                  - action: rest_command.tvoverlay_fixed
                    data:
                      ip_address: "{{ ip_address }}"
                      id: "{{ tag | default(none, true) }}"
                      visible: true
                      icon: "{{ large_icon_path | default(none, true) }}"
                      message: "{{ message | default(none, true) }}"
                      message_color: "{{ message_color_rgb | default(none, true) }}"
                      icon_color: "{{ icon_color_rgb | default(none, true) }}"
                      border_color: "{{ border_color_rgb | default(none, true) }}"
                      background_color: "{{ background_color_rgba | default(none, true) }}"
                      shape: "{{ shape | default('rounded', true) }}"
                      expiration: "{{ duration | default(none, true) }}"
              - conditions:
                  - condition: template
                    value_template: "{{ notification_type == 'clear_fixed' }}"
                sequence:
                  - action: rest_command.tvoverlay_fixed
                    data:
                      ip_address: "{{ ip_address }}"
                      id: "{{ tag | default(none, true) }}"
                      visible: false
              - conditions:
                  - condition: template
                    value_template: "{{ notification_type == 'restart' }}"
                sequence:
                  - action: rest_command.tvoverlay_restart
                    data:
                      ip_address: "{{ ip_address }}"
