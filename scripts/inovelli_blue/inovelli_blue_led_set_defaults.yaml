---
# Sets default LED color + intensity.
# Originally in a script by Kevin Schlichter https://github.com/kschlichter/Home-Assistant-Inovelli-Red-Dimmer-Switch
#
inovelli_blue_led_set_defaults:
  alias: 'Inovelli Blue LED - Set Defaults (Zigbee2MQTT)'
  description: 'Set the default/initial state of the LED light on Inovelli Blue 2-in-1 switches.'
  icon: mdi:led-outline

  fields:
    entity_id:
      name: Entities
      description: Inovelli devices to set defaults.
      example: light.family_room
      required: true
      selector:
        entity:
          domain:
            - light
            - switch
          integration: mqtt
          multiple: true
    led:
      name: LED
      description: Choose which LED to control. Default is All. (You can also enter the number value directly)
      selector:
        select:
          custom_value: true
          options:
            - label: All
              value: '0'
            - label: 'Led 1'
              value: '1'
            - label: 'Led 2'
              value: '2'
            - label: 'Led 3'
              value: '3'
            - label: 'Led 4'
              value: '4'
            - label: 'Led 5'
              value: '5'
            - label: 'Led 6'
              value: '6'
            - label: 'Led 7'
              value: '7'
    color_on:
      name: LED Color on
      description: (You can also enter the number value directly)
      selector:
        select:
          custom_value: true
          options:
            - "Off"
            - Red
            - Orange
            - Yellow
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Light Pink
            - Pink
            - White
    intensity_on:
      name: LED intensity level on
      description: LED intensity when the switch is on. Value from 0 (off) to 100 (100% intensity). 101 = Syncronized with all LED strip intensity parameter
      selector:
        number:
          min: 0
          max: 101
    color_off:
      name: LED Color off
      description: (You can also enter the number value directly)
      selector:
        select:
          custom_value: true
          options:
            - "Off"
            - Red
            - Orange
            - Yellow
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Light Pink
            - Pink
            - White
    intensity_off:
      name: LED intensity level off
      description: LED intensity when the switch is off. Value from 0 (off) to 100 (100% intensity). 101 = Syncronized with all LED strip intensity parameter
      selector:
        number:
          min: 0
          max: 101
    enable_debug:
      name: Enable debug output?
      selector:
        constant:
          value: true
          label: Enabled

  variables:
    # Set to true to create a "persistent_notification" with debugging information.
    debug: '{{ iif(enable_debug is defined, enable_debug, false) }}'
    entity_list: '{{ entity_id }}'

    led_value: '{{ led | default(0) | int(default=0) }}'

    intensity_on_value: '{{ intensity_on | default(40) | int }}'
    intensity_off_value: '{{ intensity_off | default(1) | int }}'

    colors:
      'Off': 0
      'Red': 1
      'Orange': 21
      'Yellow': 42
      'Green': 85
      'Cyan': 127
      'Teal': 145
      'Blue': 170
      'Purple': 195
      'Light Pink': 220
      'Pink': 234
      'White': 255
    color: '{{ color | default("Yellow") }}'
    color_on_value: >-
      {% if color_on | int(default=-1) == -1 %}
        {{ colors[color_on | title] | int(default=0) }}
      {% else %}
        {{ color_on | int(default=0) }}
      {% endif %}
    color_off_value: >-
      {% if color_off | int(default=-1) == -1 %}
        {{ colors[color_off | title] | int(default=0) }}
      {% else %}
        {{ color_off | int(default=0) }}
      {% endif %}

  sequence:
    # Loop through each entity_id
    - repeat:
        for_each: '{{ entity_list }}'
        sequence:
          # Set enable_debug = true above to provide output troubleshooting information.
          - if:
              - condition: template
                value_template: '{{ debug == true }}'
            then:
              - service: persistent_notification.create
                data:
                  notification_id: 'inovelli_blue_led_set_defaults'
                  title: 'DEBUG: script.inovelli_blue_led_set_defaults'
                  message: |-
                    entity: {{ repeat.item }}
                    device_name: {{ device_attr(repeat.item, "name") }}
                    topic: zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set
                    led: {{ led_value }}
                    color_on: {{ color_on_value }}
                    color_off: {{ color_off_value }}
                    intensity_on: {{ intensity_on_value }}
                    intensity_off: {{ intensity_off_value }}

          - choose:
              - conditions:
                  - '{{ led_value == 0 }}'
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                      payload_template: "{\"ledColorWhenOn\": {{ color_on_value }}}"

                  - service: mqtt.publish
                    data:
                      topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                      payload_template: "{\"ledColorWhenOff\": {{ color_off_value }}}"

                  - service: mqtt.publish
                    data:
                      topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                      payload_template: "{\"ledIntensityWhenOn\": {{ intensity_on_value }}}"

                  - service: mqtt.publish
                    data:
                      topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                      payload_template: "{\"ledIntensityWhenOff\": {{ intensity_off_value }}}"

            default:
              - service: mqtt.publish
                data:
                  topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                  payload_template: "{\"defaultLed{{ led_value }}ColorWhenOn\": {{ color_on_value }}}"

              - service: mqtt.publish
                data:
                  topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                  payload_template: "{\"defaultLed{{ led_value }}ColorWhenOff\": {{ color_off_value }}}"

              - service: mqtt.publish
                data:
                  topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                  payload_template: "{\"defaultLed{{ led_value }}IntensityWhenOn\": {{ intensity_on_value }}}"

              - service: mqtt.publish
                data:
                  topic: 'zigbee2mqtt/{{ device_attr(repeat.item, "name") }}/set'
                  payload_template: "{\"defaultLed{{ led_value }}IntensityWhenOff\": {{ intensity_off_value }}}"
