---
# Generate a list of garbage collection dates for a year.
#
# Sources:
#   https://community.home-assistant.io/t/create-next-pickup-date-entity-for-garbage-collection/549569
#   https://gist.github.com/Didgeridrew/491fa955ef2fe7c4f16bc503ac121db8
#   https://community.home-assistant.io/t/template-guide-days-away-from-calendar-event/211209
#   https://github.com/bruxy70/Garbage-Collection/issues/462
#
generate_collection_dates:
  alias: 'Generate Collection Dates'
  description: 'Generate a list of garbage collection dates for a year.'
  icon: mdi:trash-can

  fields:
    name:
      name: Name of Collection
      description: Set the name of each event
      required: true
      example: 'Garbage'
      selector:
        text:
    calendar:
      name: Calendar
      description: Calendar to add collection events to
      required: true
      selector:
        entity:
          filter:
            domain: calendar
    frequency:
      name: Frequency
      default: '2'
      required: true
      selector:
        select:
          options:
            - label: Weekly
              value: '2'
            - label: Even Weeks
              value: '0'
            - label: Odd Weeks
              value: '1'
    pickup_day:
      name: Pickup Day
      default: '0'
      required: true
      selector:
        select:
          options:
            - label: Monday
              value: '0'
            - label: Tuesday
              value: '1'
            - label: Wednesday
              value: '2'
            - label: Thursday
              value: '3'
            - label: Friday
              value: '4'
            - label: Saturday
              value: '5'
    holiday_entity:
      name: Holidays
      description: Entity containing the holidays - an instance of Holidays custom integration (available through HACS)
      selector:
        entity:
          integration: holidays
          multiple: false
    year:
      name: Year
      description: Set the year to generate dates. Default is the current year.
      example: '2023'
      selector:
        text:

  variables:
    year_value: '{{ iif(year is defined, year | int, now().year) }}'
    skip: '{{ frequency | int }}'
    pickup: '{{ pickup_day | int }}'
    collection_dates: >-
      {# Set up collection namespace to store dates #}
      {%- set collection = namespace(days=[], week=[]) -%}

      {# Find the first day of the first week of the year #}
      {%- set f = (year_value ~ "-01-01") | as_datetime | as_local -%}
      {%- set first = f - timedelta(days=f.weekday()) -%}
      {%- if first.isocalendar().week > 1 -%}
        {%- set first = first + timedelta(days=7) -%}
      {%- endif -%}

      {# Find the last week of the year #}
      {%- set l = f.replace(year=year_value+1) -%}
      {%- if l.isocalendar().week == 1 -%}
        {%- set l = l - timedelta(days=7) -%}
      {%- endif -%}
      {%- set last_week = l.isocalendar().week -%}

      {# Generate range of weeks in a year #}
      {%- set week_range = (range(0, last_week)) | list -%}

      {# Set the pickup day #}
      {%- set first = first + timedelta(days=pickup - first.weekday()) -%}

      {# Generate collection dates #}
      {%- for i in week_range -%}
        {# Skip week if enabled #}
        {%- if i % 2 == skip -%}
          {%- continue -%}
        {%- endif -%}

        {%- set date = first + timedelta(days = 7 * (i)) -%}
        {%- set holiday = namespace(found=false, days=[], name="") -%}

        {# Check for a holiday on or before the collection day during the week #}
        {%- if holiday_entity is defined -%}
          {# Get list of holidays from calendar #}
          {%- set holidays = states[holiday_entity].attributes.get("holidays") -%}
          {%- for i in range(date.weekday() + 1) -%}
            {%- set d = (date - timedelta(days=i)) | as_timestamp | timestamp_custom("%Y-%m-%d", local=false) -%}
            {%- if d in holidays -%}
              {%- set holiday.found = true -%}
              {%- set holiday.name = holidays[d] -%}
              {%- set holiday.days = holiday.days + [d] -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}

        {%- if holiday_entity is defined and holiday.found -%}
          {# Increase offset until we find a date that is not public holiday #}
          {%- set offset = namespace(days=1, found=false) -%}
          {%- for _ in range(7) if not offset.found -%}
            {%- set d = (date + timedelta(days=offset.days)) | as_timestamp | timestamp_custom("%Y-%m-%d", local=false) -%}
            {%- if d in holiday.days -%}
              {%- set offset.days = offset.days + 1 -%}
            {%- else -%}
              {%- set offset.found = true -%}
            {%- endif -%}
          {%- endfor -%}
          {# Set collection for offset #}
          {%- set collection.days = collection.days + [{
            "summary": name,
            "description": "Offset due to " ~ holiday.name,
            "start_date": (date + timedelta(days=offset.days)).strftime("%Y-%m-%d"),
            "end_date": (date + timedelta(days=offset.days+1)).strftime("%Y-%m-%d")
          }] -%}
        {%- else -%}
          {# Set collection for normal date #}
          {%- set collection.days = collection.days + [{
            "summary": name,
            "description": "",
            "start_date": date.strftime("%Y-%m-%d"),
            "end_date": (date + timedelta(days=1)).strftime("%Y-%m-%d")
          }] -%}
        {%- endif -%}
      {%- endfor -%}
      {{ collection.days }}

  sequence:
    - repeat:
        for_each: '{{ collection_dates }}'
        sequence:
          - service: calendar.create_event
            data:
              summary: '{{ repeat.item.summary }}'
              description: '{{ repeat.item.description }}'
              start_date: '{{ repeat.item.start_date }}'
              end_date: '{{ repeat.item.end_date }}'
            target:
              entity_id: '{{ calendar }}'
