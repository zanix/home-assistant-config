---
# Sends a media file or Text-to-Speech message to a media player.
# This is normally called by script.notify_speech as it handles availability.
media_play:
  alias: Media Play
  description: >-
    Plays TTS or media at the specified volume then restores the volume to the
    previous level. For Google Speakers, media will play without the extra
    bleeps and bloops (most of the time).
  icon: mdi:cast-audio
  mode: parallel

  fields:
    media_player:
      name: Media Player
      description: Which Media Player to play
      example: media_player.cast_living_room_speaker
      required: true
      selector:
        entity:
          domain: media_player
    message:
      name: Message
      example: Message text for TTS
      selector:
        text:
          multiline: true
    media_location:
      name: Media Content
      description: The ID of the content to play. Platform dependent.
      example: media-source://media_source/local/sounds/file.wav
      selector:
        text: null
    media_type:
      name: Content Type
      description: The type of the content to play.
      example: music
      selector:
        select:
          options:
            - channel
            - episode
            - image
            - music
            - playlist
            - tvshow
            - video
    volume:
      name: Volume
      description: The announcement volume.
      example: "50"
      selector:
        number:
          min: 0
          max: 100
          step: 5
          unit_of_measurement: "%"
    voice:
      name: Voice Service
      description: The voice service to use.
      selector:
        select:
          options:
            - label: Google Cloud
              value: google_cloud
            - label: Nabu Casa Cloud
              value: cloud

  variables:
    # Special handling for Google devices
    is_google: "{{ 'Google' in device_attr(media_player, 'model') }}"
    # Define voice service so I don't have to hunt for it below
    voice_service: script.say_{{ voice | default("cloud") }}

  sequence:
    - alias: Actions for Google devices
      if:
        - condition: template
          value_template: "{{ is_google }}"
      then:
        - alias: Mute to hide the Google bloop-bloop sound
          action: media_player.volume_mute
          data:
            is_volume_muted: true
          target:
            entity_id: "{{ media_player }}"

        - alias: Play a 1 second silent track to mask bloop
          action: media_player.play_media
          data:
            media_content_type: music
            media_content_id: media-source://media_source/local/sounds/1-second-of-silence.mp3
          target:
            entity_id: "{{ media_player }}"
        - alias: Delay for silence to start playing
          delay:
            milliseconds: 200

    - alias: Store the current volume level (must be outside of other blocks)
      variables:
        current_volume: >-
          {{ (state_attr(media_player, 'volume_level')
            | default(0.2))
            | round(2) }}

    - alias: Set the desired volume for the announcement
      if:
        - condition: template
          value_template: "{{ volume is number }}"
      then:
        - action: media_player.volume_set
          data:
            volume_level: "{{ volume / 100 }}"
          target:
            entity_id: "{{ media_player }}"

    - alias: Actions for Google devices
      if:
        - condition: template
          value_template: "{{ is_google }}"
      then:
        - alias: Unmute after setting the volume to hide the volume change sound
          action: media_player.volume_mute
          data:
            is_volume_muted: false
          target:
            entity_id: "{{ media_player }}"

    - alias: Play media or TTS message
      choose:
        - conditions:
            - alias: Play the desired media file
              condition: template
              value_template: "{{ media_location is string }}"
          sequence:
            - action: media_player.play_media
              data:
                media_content_type: "{{ media_type | default('music', true) }}"
                media_content_id: "{{ media_location }}"
                enqueue: play
              target:
                entity_id: "{{ media_player }}"
        - conditions:
            - alias: Call the voice script directly
              condition: template
              value_template: "{{ message is string }}"
          sequence:
            - action: "{{ voice_service }}"
              data:
                media_player: "{{ media_player }}"
                message: "{{ message }}"

    - alias: Store the current media length (must be outside of other blocks)
      variables:
        media_duration: >-
          {{ state_attr(media_player, 'media_duration')
            | default(4, true)
            | round(0, 'ceil') }}

    - alias: Restore volume if it was changed
      if:
        - condition: template
          value_template: "{{ volume is number }}"
      then:
        - alias: Delay for the media file length
          delay:
            seconds: "{{ media_duration }}"

        - alias: Actions for Google devices
          if:
            - condition: template
              value_template: "{{ is_google }}"
          then:
            - alias: Mute to hide the volume change sound
              action: media_player.volume_mute
              data:
                is_volume_muted: true
              target:
                entity_id: "{{ media_player }}"

            - alias: Play a 1 second silent track to mask bloop
              action: media_player.play_media
              data:
                media_content_type: music
                media_content_id: media-source://media_source/local/sounds/1-second-of-silence.mp3
              target:
                entity_id: "{{ media_player }}"
            - delay:
                milliseconds: 200

        - alias: Restore volume
          action: media_player.volume_set
          data:
            volume_level: "{{ current_volume }}"
          target:
            entity_id: "{{ media_player }}"

        - alias: Actions for Google devices
          if:
            - condition: template
              value_template: "{{ is_google }}"
          then:
            - alias: Unmute to allow other announcements
              action: media_player.volume_mute
              data:
                is_volume_muted: false
              target:
                entity_id: "{{ media_player }}"

    - alias: Store Last Message
      action: script.store_mqtt_sensor
      data:
        name: last_message
        state: "{{ iif(message is string, message, media_location) }}"

    - alias: Store Last Speaker
      action: script.store_mqtt_sensor
      data:
        name: last_speaker
        state: "{{ media_player }}"
