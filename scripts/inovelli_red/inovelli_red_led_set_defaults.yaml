---
# Incorporates default LED color + dimmer brightness.
# Originally in a script by Kevin Schlichter https://github.com/kschlichter/Home-Assistant-Inovelli-Red-Dimmer-Switch
#
inovelli_red_led_set_defaults:
  alias: 'Inovelli Red LED - Set Defaults'
  description: 'Set the default/initial state of the LED light on Inovelli devices.'
  icon: mdi:led-outline

  fields:
    entity_id:
      name: Entities
      description: Inovelli devices to set defaults.
      example: light.family_room
      required: true
      selector:
        entity:
          domain:
            - light
            - switch
          integration: zwave_js
          multiple: true
    color:
      name: 'LED Color'
      selector:
        select:
          options:
            - "Off"
            - Red
            - Orange
            - Yellow
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Light Pink
            - Pink
            - White
    level_on:
      name: 'Brightness level on'
      description: 'LED brightness when the switch is on. Value from 0 (off) to 10 (100% brightness).'
      selector:
        number:
          min: 1
          max: 10
    level_off:
      name: 'Brightness level off'
      description: 'LED brightness when the switch is off. Value from 0 (off) to 10 (100% brightness).'
      selector:
        number:
          min: 1
          max: 10
    enable_debug:
      name: Enable debug output?
      selector:
        constant:
          value: true
          label: Enabled

  variables:
    # Set to true to create a "persistent_notification" with debugging information.
    debug: '{{ iif(enable_debug is defined, enable_debug, false) }}'

    entity_list: '{{ entity_id }}'
    level_on: '{{ level_on | default("8") | int }}'
    level_off: '{{ level_off | default("1") | int }}'
    colors:
      'Off': 0
      'Red': 1
      'Orange': 21
      'Yellow': 42
      'Green': 85
      'Cyan': 127
      'Teal': 145
      'Blue': 170
      'Purple': 195
      'Light Pink': 220
      'Pink': 234
      'White': 255

    parameters:
      dimmer:
        color: 13
        level_on: 14
        level_off: 15
      combo_light:
        color: 18
        level_on: 19
        level_off: 22
      combo_fan:
        color: 20
        level_on: 21
        level_off: 23
      switch:
        color: 5
        level_on: 6
        level_off: 7

  sequence:
    - variables:
        color: >-
          {% if color | int(default=-1) == -1 %}
            {% set color = color | default("Yellow") | title %}
            {{ colors[color | title] | int(default=0) }}
          {% else %}
            {{ color | int(default=0) }}
          {% endif %}

    # Loop through each entity_id
    - repeat:
        for_each: '{{ entity_list }}'
        sequence:
          - variables:
              # Automatically extract the model name.
              model_name: >-
                {% set model_name = device_attr(repeat.item, "model") %}
                {% if "-" in model_name %}
                  {{ model_name.split("-")[0] }}
                {% else %}
                  {{ model_name }}
                {% endif %}
              # 1st. Use the automatically detected "model_name".
              # 2nd. Assume the model type is "dimmer".
              model_type: >-
                {% if model_name is string %}
                  {% if "LZW31" in model_name %}
                    dimmer
                  {% elif "LZW36" in model_name %}
                    {% set domain = repeat.item.split(".")[0] %}
                    {% if domain == "fan" %}
                      combo_fan
                    {% else %}
                      combo_light
                    {% endif %}
                  {% else %}
                    switch
                  {% endif %}
                {% else %}
                  dimmer
                {% endif %}
              color_parameter: '{{ parameters[model_type]["color"] }}'
              level_on_parameter: '{{ parameters[model_type]["level_on"] }}'
              level_off_parameter: '{{ parameters[model_type]["level_off"] }}'

          # Set enable_debug = true above to provide output troubleshooting information.
          - if:
              - condition: template
                value_template: '{{ debug == true }}'
            then:
              - service: persistent_notification.create
                data:
                  notification_id: 'inovelli_red_led_set_defaults_{{ repeat.item }}'
                  title: 'DEBUG: script.inovelli_red_led_set_defaults'
                  message: |-
                    device: {{ repeat.item }}
                    parameter: {{ color_parameter }}
                    color: {{ color }}
                    level_on: {{ level_on }}
                    level_off: {{ level_off }}

          - service: zwave_js.set_config_parameter
            target:
              entity_id: '{{ repeat.item }}'
            data:
              parameter: '{{ color_parameter }}'
              value: '{{ color }}'

          - service: zwave_js.set_config_parameter
            target:
              entity_id: '{{ repeat.item }}'
            data:
              parameter: '{{ level_on_parameter }}'
              value: '{{ level_on }}'

          - service: zwave_js.set_config_parameter
            target:
              entity_id: '{{ repeat.item }}'
            data:
              parameter: '{{ level_off_parameter }}'
              value: '{{ level_off }}'
