blueprint:
  name: Inovelli LZW30-SN Switch (ZWave-JS)
  description: Create automations for the Inovelli Red Series LZW30-SN Switch using the ZWave-JS integration.
  source_url: https://community.home-assistant.io/t/inovelli-lzw30-red-series-switch-using-the-new-zwave-js-integration/278457
  domain: automation
  input:
    zwave_device:
      name: Inovelli Switch
      description: "List of available inovelli switches."
      selector:
          device:
            integration: zwave_js
            manufacturer: Inovelli
    ## Config Press 1 time
    config_button:
      name: Button C - Config press 1x
      description: "Action to run, when the config button is pressed one time."
      default: []
      selector:
        action: {}
    ## Paddle Press 1 time
    button_a:
      name: Button A - Up/On press 1x
      description: "Action to run, when the button is pressed one time."
      default: []
      selector:
        action: {}
    button_b:
      name: Button B - Down/Off press 1x
      description: "Action to run, when the button is pressed one time."
      default: []
      selector:
        action: {}
    ## Paddle Press 2 times
    button_a2:
      name: Button A - Up/On press 2x
      description: "Action to run, when the button is pressed two times."
      default: []
      selector:
        action: {}
    button_b2:
      name: Button B - Down/Off press 2x
      description: "Action to run, when the button is pressed two times."
      default: []
      selector:
        action: {}
    ## Paddle Press 3 times
    button_a3:
      name: Button A - Up/On press 3x
      description: "Action to run, when the button is pressed three times."
      default: []
      selector:
        action: {}
    button_b3:
      name: Button B - Down/Off press 3x
      description: "Action to run, when the button is pressed three times."
      default: []
      selector:
        action: {}
    ## Paddle Press 4 times
    button_a4:
      name: Button A - Up/On press 4x
      description: "Action to run, when the button is pressed four times."
      default: []
      selector:
        action: {}
    button_b4:
      name: Button B - Down/Off press 4x
      description: "Action to run, when the button is pressed four times."
      default: []
      selector:
        action: {}
    ## Paddle Press 5 times
    button_a5:
      name: Button A - Up/On press 5x
      description: "Action to run, when the button is pressed five times."
      default: []
      selector:
        action: {}
    button_b5:
      name: Button B - Down/Off press 5x
      description: "Action to run, when the button is pressed five times."
      default: []
      selector:
        action: {}
    ## Paddle held
    button_ah:
      name: Button A - Up/On held
      description: "Action to run, when the button is held."
      default: []
      selector:
        action: {}
    button_bh:
      name: Button B - Down/Off held
      description: "Action to run, when the button is held."
      default: []
      selector:
        action: {}
    ## Paddle held
    button_ar:
      name: Button A - Up/On released
      description: "Action to run, when the button is released"
      default: []
      selector:
        action: {}
    button_br:
      name: Button B - Down/Off released
      description: "Action to run, when the button is released."
      default: []
      selector:
        action: {}
mode: single
max_exceeded: silent
variables:
  device_id: !input zwave_device
trigger:
  - platform: event
    event_type: zwave_js_value_notification
condition: "{{ trigger.event.data.device_id == device_id }}"
action:
  - variables:
      button_id: "{{ trigger.event.data.property_key_name }}"
      press_count: "{{ trigger.event.data.value }}"
  - service: logbook.log
    data:
      name: '{{ this.entity_id }}'
      entity_id: '{{ this.entity_id }}'
      message: 'Device {{ device_id }} button ID {{ button_id }} was {{ press_count }}'
      domain: automation
  - choose:
    - conditions: '{{ button_id == "003" and press_count == "KeyPressed" }}'
      sequence: !input config_button
    - conditions: '{{ button_id == "002" and press_count == "KeyPressed" }}'
      sequence: !input button_a
    - conditions: '{{ button_id == "001" and press_count == "KeyPressed" }}'
      sequence: !input button_b
    - conditions: '{{ button_id == "002" and press_count == "KeyPressed2x" }}'
      sequence: !input button_a2
    - conditions: '{{ button_id == "001" and press_count == "KeyPressed2x" }}'
      sequence: !input button_b2
    - conditions: '{{ button_id == "002" and press_count == "KeyPressed3x" }}'
      sequence: !input button_a3
    - conditions: '{{ button_id == "001" and press_count == "KeyPressed3x" }}'
      sequence: !input button_b3
    - conditions: '{{ button_id == "002" and press_count == "KeyPressed4x" }}'
      sequence: !input button_a4
    - conditions: '{{ button_id == "001" and press_count == "KeyPressed4x" }}'
      sequence: !input button_b4
    - conditions: '{{ button_id == "002" and press_count == "KeyPressed5x" }}'
      sequence: !input button_a5
    - conditions: '{{ button_id == "001" and press_count == "KeyPressed5x" }}'
      sequence: !input button_b5
    - conditions: '{{ button_id == "002" and press_count == "KeyHeldDown" }}'
      sequence: !input button_ah
    - conditions: '{{ button_id == "001" and press_count == "KeyHeldDown" }}'
      sequence: !input button_bh
    - conditions: '{{ button_id == "002" and press_count == "KeyReleased" }}'
      sequence: !input button_ar
    - conditions: '{{ button_id == "001" and press_count == "KeyReleased" }}'
      sequence: !input button_br
