blueprint:
  name: Update notifications
  description: Send notifications for new updates and install or skip on action
  homeassistant:
    min_version: '2022.4.0'
  domain: automation
  input:
    update_entities:
      name: Update entities
      description: >-
        List of update entities to watch for updates on and be notified as soon
        as one is available.
      selector:
        entity:
          domain: update
          multiple: true
    mobile_app_device:
      name: Mobile app device
      description: (Optional) Android, iphone, mac. Anything with the companion app
      default: ''
      selector:
        device:
          integration: mobile_app
    mobile_app_device_2:
      name: Mobile app device 2
      description: (Optional) Android, iphone, mac. Anything with the companion app.
      default: ''
      selector:
        device:
          integration: mobile_app
    send_to_ha:
      name: Send to HA
      description: Send to HA as a persistent notification
      default: false
      selector:
        boolean:
    reminder_hours:
      name: Reminder hours
      description: >-
        If provided, will send reminders for pending updates every x hours.
        NOTE: This will remind you about any pending updates every x hours, not just the
        ones listed in `update_entities`. So even if you dont list every update entity
        there you can still get notified pretty soon after an update.
      default: '3'
      selector:
        select:
          options: ['None', '1', '2', '3', '6', '12', '24']
    take_backup:
      name: Take backup
      description: Do a partial backup before updating if able
      default: true
      selector:
        boolean:
    run_config_check:
      name: Run config check
      description: >-
        If true, this automation will start the `check configuration` addon when a core update is available.
        The notification will initially say config check is running and then update when it completes. Clicking
        the notification will open that addon's logs so you can check the status.
        WARNING: You must list your update entity for core in `update_entities` to use this feature.
      default: false
      selector:
        boolean:
    changelog_urls:
      name: Changelog urls
      description: >-
        Some update entities (ex. the ones for addons) don't have a link to the changelog because they can't.
        If this bothers you then you can provide a dictionary here. Each key should be an update entity ID
        and the value the url to its changelog. This will only be used if `release_url` is `null` on the update entity.
        EX. `update.adguard_home_update: https://github.com/hassio-addons/addon-adguard-home/releases/latest` or
        `update.mariadb_update: https://github.com/home-assistant/addons/blob/master/mariadb/CHANGELOG.md`
      default: 'none'
      selector:
        object:
    only_after:
      name: Only after
      description: Only send notifications to mobile devices after this time
      default: '00:00:00'
      selector:
        time:
    only_before:
      name: Only before
      description: Only send notifications to mobile devices before this time
      default: '00:00:00'
      selector:
        time:
    notification_channel:
      name: Channel/Group
      description: >-
        Sets the [channel](https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channels) (android) and
        [group](https://companion.home-assistant.io/docs/notifications/notifications-basic#grouping) (ios) for update notifications
      default: Updates
      selector:
        text:
    status_bar_icon:
      name: Status bar icon
      description: >-
        (Android only) Sets the [status bar icon](https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-icon).
        NOTE: Different then the icon inside the notification, that is always set to the entity picture of the update
        entity (if it has one).
      default: mdi:package-up
      selector:
        icon:
          placeholder: mdi:package-up
mode: parallel
max: 100
trigger_variables:
  _reminder_hours: !input reminder_hours
  reminder_hours: "{{ _reminder_hours | default(0) | int(0) }}"
  run_config_check: !input run_config_check
  update_entities: !input update_entities
trigger:
  - id: new
    platform: state
    entity_id: !input update_entities
    to: 'on'
  - id: started
    platform: state
    entity_id: !input update_entities
    attribute: in_progress
    from: false
    to: true
  - id: done
    platform: state
    entity_id: !input update_entities
    from: 'on'
    to: 'off'
  - id: install
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: install-update
  - id: install_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      actionName: install-update
  - id: skip
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: skip-update
  - id: skip_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      actionName: skip-update
  - id: core_check
    platform: template
    value_template: &core-check-complete >-
      {% set ns = namespace(core=none) %}
      {% for u in integration_entities('hassio') | select('in', update_entities)
              if (device_attr(u, 'identifiers') | first)[1] == 'core' %}
          {% set ns.core = u %}
      {% endfor %}
      {% if run_config_check and ns.core is string and expand(ns.core) | first | attr('state') == 'on' %}
        {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class', 'eq', 'running')
              if (device_attr(e.entity_id, 'identifiers') | first)[1] == 'core_check_config' %}
            {{ e.state == 'off' and e.last_changed > expand(ns.core) | first | attr('last_changed') }}
        {% endfor %}
      {% else %}
        {{ false }}
      {% endif %}
  - id: ha_start
    platform: homeassistant
    event: start
  - platform: template
    value_template: >-
      {{ states.update | selectattr('state', 'eq', 'on') | list | count > 0
        and reminder_hours > 0 and now().hour % reminder_hours == 0
        and now().minute == 0 and now().second == 0 }}
  - id: sticky_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: URI
variables:
  mobile_app_device: !input mobile_app_device
  _mobile_app_device_2: !input mobile_app_device_2
  mobile_app_device_2: "{{ _mobile_app_device_2 if _mobile_app_device_2 != mobile_app_device }}"
  send_to_ha: !input send_to_ha
  _changelog_urls: !input changelog_urls
  changelog_urls: "{{ _changelog_urls if _changelog_urls is mapping else {} }}"
  take_backup: !input take_backup
  core_update_entity: >-
    {% for u in integration_entities('hassio') | select('search', '^update[.]')
            if (device_attr(u, 'identifiers') | first)[1] == 'core' %}
        {{ u }}
    {% endfor %}
  os_update_entity: >-
    {% for u in integration_entities('hassio') | select('search', '^update[.]')
            if (device_attr(u, 'identifiers') | first)[1] == 'OS' %}
        {{ u }}
    {% endfor %}
  skip_action:
    action: skip-update
    title: Skip
    destructive: true
    authenticationRequired: true
  update_action:
    action: install-update
    title: Update
    destructive: true
    authenticationRequired: true
action:
  choose:
    - alias: Install update action
      conditions: "{{ trigger.id in ['install', 'install_ios'] }}"
      sequence:
        - variables:
            entity_id: &tag-to-entity >-
              update.{{ trigger.event.data.tag
                if trigger.event.data.tag is string and trigger.event.data.tag != ''
                else trigger.event.data.action_data.tag }}
        - service: update.install
          data:
            entity_id: "{{ entity_id }}"
            backup: >-
              {% set ids = device_attr(entity_id, 'identifiers') | first %}
              {{ take_backup and ids[0] == 'hassio' and ids[1] not in ['supervisor', 'OS'] }}
    - alias: Skip update action
      conditions: "{{ trigger.id in ['skip', 'skip_ios'] }}"
      sequence:
        service: update.skip
        data:
          entity_id: *tag-to-entity
    - alias: Update completed
      conditions: "{{ trigger.id == 'done' }}"
      sequence:
        - &id-from-state-trigger
          variables:
            entity_id: "{{ trigger.entity_id }}"
        - &dismiss-variables
          variables:
            message: clear_notification
            data:
              tag: &tag-from-entity "{{ entity_id[7:] }}"
        - &send-to-mobile-devices
          choose: []
          default:
            - variables:
                data: "{{ dict(data, action_data={'tag': data.tag}) }}"
            - choose:
                alias: Send to first mobile device if specified
                conditions: "{{ not not mobile_app_device }}"
                sequence:
                  device_id: !input mobile_app_device
                  domain: mobile_app
                  type: notify
                  title: "{{ title | default('') }}"
                  message: >-
                    {{ message if device_attr(mobile_app_device, 'manufacturer') != 'Apple'
                        else message | replace('<br>', '\n') }}
                  data: >-
                    {{ data if
                          device_attr(mobile_app_device, 'manufacturer') != 'Apple' or data.icon_url is not string
                        else dict(data, image=data.icon_url) }}
            - choose:
                alias: Send to second mobile device if specified
                conditions: "{{ not not mobile_app_device_2 }}"
                sequence:
                  device_id: !input mobile_app_device_2
                  domain: mobile_app
                  type: notify
                  title: "{{ title | default('') }}"
                  message: >-
                    {{ message if device_attr(mobile_app_device_2, 'manufacturer') != 'Apple'
                        else message | replace('<br>', '\n') }}
                  data: >-
                    {{ data if
                          device_attr(mobile_app_device_2, 'manufacturer') != 'Apple' or data.icon_url is not string
                        else dict(data, image=data.icon_url) }}
        - &dismiss-from-ha
          alias: Dismiss from HA if replicating there
          choose:
            conditions: "{{ send_to_ha }}"
            sequence:
              service: persistent_notification.dismiss
              data:
                notification_id: *tag-from-entity
    - alias: On startup, dismiss core and os notifications as they occurred while off
      conditions: "{{ trigger.id == 'ha_start' }}"
      sequence:
        - alias: Dismiss core update notification if off
          choose:
            conditions: "{{ core_update_entity != '' and expand(core_update_entity) | first | attr('state') == 'off' }}"
            sequence:
              - variables:
                  entity_id: "{{ core_update_entity }}"
              - *dismiss-variables
              - *send-to-mobile-devices
              - *dismiss-from-ha
        - alias: Dismiss os update notification if off
          choose:
            conditions: "{{ os_update_entity != '' and expand(os_update_entity) | first | attr('state') == 'off' }}"
            sequence:
              - variables:
                  entity_id: "{{ os_update_entity }}"
              - *dismiss-variables
              - *send-to-mobile-devices
              - *dismiss-from-ha
    - alias: New update available
      conditions: "{{ trigger.id == 'new' }}"
      sequence:
        - *id-from-state-trigger
        - &update-variables
          variables:
            ids: "{{ device_attr(entity_id, 'identifiers') | first }}"
            changelog_action:
              action: URI
              title: Changelog
              uri: >-
                {% set version = state_attr(entity_id, 'latest_version') %}
                {{ state_attr(entity_id, 'release_url')
                    | default(changelog_urls[entity_id] | default(''), true)
                    | regex_replace('(/CHANGELOG.md)$', '\\1#' ~ version | regex_replace('[^-\\w]'))
                    | default(None, true) }}
            include_core_check: "{{ run_config_check and ids[0] == 'hassio' and ids[1] == 'core' }}"
            core_check_complete: *core-check-complete
            title: "{{ state_attr(entity_id, 'friendly_name') }}"
            message: >-
              {% set summary = state_attr(entity_id, 'release_summary') %}
              Newest version is {{ state_attr(entity_id, 'latest_version') }}<br>
              Installed version is {{ state_attr(entity_id, 'installed_version') }}
              {% if include_core_check %}
                <br>Config check has {{ 'completed, check addon logs for status.'
                  if core_check_complete else 'started, should be done soon.' }}
              {% endif %}
              {{ '<br>' ~ summary if summary is string }}
            url: >-
                {% set url = device_attr(entity_id, 'configuration_url') %}
                {% set ids = device_attr(entity_id, 'identifiers') | first %}
                {% if url is string %}
                  {{ url | regex_replace('^homeassistant://') }}
                {% elif ids[0] == 'hassio' and ids[1] in ['supervisor', 'OS'] %}
                  /hassio/system
                {% elif run_config_check and ids[0] == 'hassio' and ids[1] == 'core' %}
                  /hassio/addon/core_check_config/logs
                {% else %}
                  /config
                {% endif %}
            data:
              tag: *tag-from-entity
              channel: !input notification_channel
              group: !input notification_channel
              notification_icon: !input status_bar_icon
              icon_url: "{{ state_attr(entity_id, 'entity_picture') | default('', true) }}"
              url: "{{ url }}"
              clickAction: "{{ url }}"
              sticky: 'true'
              actions: >-
                {{ ([changelog_action] if changelog_action.uri is string else []) + [update_action] +
                  ([] if ids[0] == 'hassio' and ids[1] == 'supervisor' else [skip_action]) }}
        - &send-to-mobile-devices-time-check
          choose:
            alias: Only send to mobile devices if within provided time range
            conditions:
              condition: time
              after: !input only_after
              before: !input only_before
            sequence: *send-to-mobile-devices
        - &send-to-ha
          alias: Send to HA if replicating there
          choose:
            conditions: "{{ send_to_ha }}"
            sequence:
              service: persistent_notification.create
              data:
                notification_id: *tag-from-entity
                title: "{{ title }}"
                message: >-
                  {{ '%s\n\n### More info\n- [Open](%s)' % (message | replace('<br>', '\n'), data.url) ~
                    ('\n- [Changelog](%s)' % changelog_action.uri if changelog_action.uri is string else '') }}
        - alias: Stop if this isn't core or we're not running a config check
          condition: "{{ include_core_check }}"
        - alias: Start config check addon
          service: hassio.addon_start
          data:
            addon: core_check_config
    - alias: Emulate sticky on IOS by recreating the notification
      conditions:
        - "{{ trigger.id == 'sticky_ios' }}"
        - "{{ trigger.event.data.action_data is mapping and trigger.event.data.action_data.tag is string }}"
        - "{{ is_state('update.' ~ trigger.event.data.action_data.tag, 'on') }}"
      sequence:
        - variables:
            entity_id: *tag-to-entity
        - *update-variables
        - *send-to-mobile-devices
        - *send-to-ha
    - alias: Core check addon completed
      conditions: "{{ trigger.id == 'core_check' }}"
      sequence:
        - variables:
            entity_id: "{{ core_update_entity }}"
        - *update-variables
        - *send-to-mobile-devices-time-check
        - *send-to-ha
    - alias: Update started
      conditions: "{{ trigger.id == 'started' }}"
      sequence:
        - *id-from-state-trigger
        - *update-variables
        - variables:
            message: Updating...
            data: >-
              {{ dict(data, actions=[changelog_action] if changelog_action.uri is string else []) }}
        - *send-to-mobile-devices-time-check
        - *send-to-ha
    - alias: Send reminders if enabled
      conditions: "{{ reminder_hours > 0 }}"
      sequence:
        - alias: Get all pending, unstarted updates
          variables:
            updates: >-
              {{ states.update
                  | selectattr('state', 'eq', 'on')
                  | rejectattr('attributes.in_progress', 'true')
                  | map(attribute='entity_id') | list }}
        - alias: Loop over updates and send reminder
          repeat:
            count: "{{ updates | count }}"
            sequence:
              - variables:
                  entity_id: "{{ updates[repeat.index - 1] }}"
              - *update-variables
              - *send-to-mobile-devices-time-check
              - *send-to-ha
