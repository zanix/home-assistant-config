inovelli_blue_led:
  alias: Inovelli Blue LED (Zigbee2MQTT)
  description: Set LED effects for Inovelli VZM31-SN Blue Series 2-1 Switches
  use_blueprint:
    path: zanix/inovelli_blue_led_zigbee2mqtt.yaml
    input:
      command_path_map: {}
  icon: mdi:led-on
  mode: parallel
  max: 100
remote_family_room_activate_tv:
  alias: Family Room TV
  sequence:
  - target:
      entity_id: remote.harmony_family_room
    data:
      activity: Shield TV
    action: remote.turn_off
  icon: mdi:motion-play-outline
  mode: single
remote_family_room_activate_computer:
  alias: Gaming PC
  sequence:
  - target:
      entity_id: remote.harmony_family_room
    data:
      activity: Computer
    action: remote.turn_on
  icon: mdi:desktop-tower
  mode: single
remote_family_room_activate_ps3:
  alias: PS3
  sequence:
  - target:
      entity_id: remote.harmony_family_room
    data:
      activity: PS3
    action: remote.turn_on
  icon: mdi:sony-playstation
  mode: single
remote_family_room_activate_ps4:
  alias: PS4
  sequence:
  - target:
      entity_id: remote.harmony_family_room
    data:
      activity: PS4
    action: remote.turn_on
  icon: mdi:sony-playstation
  mode: single
remote_family_room_activate_xbox:
  alias: XBox
  sequence:
  - target:
      entity_id: remote.harmony_family_room
    data:
      activity: XBox
    action: remote.turn_on
  icon: mdi:microsoft-xbox
  mode: single
family_room_game_light_mode:
  alias: Family Room Game Light Mode
  sequence:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: sun
          after: sunset
          after_offset: -01:00:00
        - condition: sun
          before: sunrise
        alias: Night Time
      sequence:
      - parallel:
        - action: light.turn_on
          metadata: {}
          data:
            brightness_pct: 100
          target:
            entity_id: light.family_room_lamp
        - action: light.turn_off
          target:
            entity_id:
            - light.stairway
            - light.basement_hallway
            - light.family_room
          data: {}
    default:
    - parallel:
      - action: light.turn_off
        data: {}
        target:
          entity_id:
          - light.stairway
          - light.basement_hallway
      - data:
          brightness_pct: 50
          transition: 1
        target:
          entity_id: light.family_room
        action: light.turn_on
  description: Adjusts the lights in the Family Room for Games.
  icon: mdi:light-flood-up
  mode: single
joshua_office_lights_on:
  alias: Joshua Office Lights On
  sequence:
  - if:
    - condition: or
      conditions:
      - condition: time
        after: input_datetime.office_night_mode
      - condition: sun
        before: sunrise
        before_offset: -00:20:00
    then:
    - data: {}
      target:
        entity_id:
        - light.joshua_office
        - light.joshua_office_lamp
        - light.wled_joshua_office_desk
      action: light.turn_on
    else:
    - target:
        entity_id:
        - light.joshua_office
      action: light.turn_on
      data: {}
    - target:
        entity_id:
        - light.joshua_office_lamp
        - light.wled_joshua_office_desk
      data: {}
      action: light.turn_on
    - target:
        entity_id:
        - switch.joshua_office_shelf_led
        - switch.joshua_office_workbench
      data: {}
      action: switch.turn_on
  description: Turns on the office lights based on time of day.
  icon: mdi:chair-rolling
  mode: single
generate_readme:
  alias: Generate README
  sequence:
  - data: {}
    action: readme.generate
  - data:
      message: README generation process complete
      duration: 5000
    action: browser_mod.notification
  description: Regernerates the readme file based on templates/README.js.
  icon: mdi:text
  mode: single
ascent_remote_start:
  alias: Ascent Remote Start
  sequence:
  - variables:
      door_closed: '{{ is_state("cover.garage_door", "closed") }}'
      car_in_garage: '{{ is_state("device_tracker.ascent", "home") }}'
  - alias: Check the garage door is closed and the car is in the garage
    if:
    - condition: template
      value_template: '{{ door_closed and car_in_garage }}'
    then:
    - target:
        entity_id: cover.garage_door
      data: {}
      action: cover.open_cover
  - target:
      entity_id: button.ascent_remote_start
    data: {}
    action: button.press
  description: Starts the Ascent and opens the garage door.
  icon: simple-icons:subaru
  mode: single
ascent_remote_stop:
  alias: Ascent Remote Stop
  sequence:
  - data:
      entity_id: button.ascent_remote_stop
    action: button.press
  - if:
    - condition: state
      entity_id: cover.garage_door
      state: open
    - condition: state
      entity_id: timer.kona_remote_start
      state: idle
    then:
    - target:
        entity_id: cover.garage_door
      data: {}
      action: cover.close_cover
  description: Stops the Ascent and closes the garage door.
  icon: simple-icons:subaru
  mode: single
sql_purge:
  alias: Purge Home Assistant Database
  sequence:
  - data:
      keep_days: '{{ states("input_number.db_purge_days") | int }}'
    action: recorder.purge
  icon: mdi:database
  mode: single
media_player_mute:
  alias: Toggle Media Player Mute
  mode: parallel
  icon: mdi:volume-mute
  sequence:
  - if:
    - condition: template
      value_template: '{{ not states(media_player) in [''unknown'', ''unavailable'']
        }}'
    then:
    - target:
        entity_id: '{{ media_player }}'
      data:
        is_volume_muted: '{{ not state_attr(media_player , ''is_volume_muted'') }}'
      action: media_player.volume_mute
  max: 10
  fields:
    media_player:
      name: Media Player
      selector:
        entity:
          filter:
            domain: media_player
      required: true
feeder_start:
  alias: Feeder Start
  icon: mdi:paw
  mode: single
  sequence:
  - data:
      topic: zigbee2mqtt/{{ feeder }}/set
      payload: '{"feed": "START"}'
    action: mqtt.publish
  fields:
    feeder:
      name: Feeder
      description: Feeder to dispense food
      selector:
        select:
          options:
          - Cat Feeder
          - Dog Feeder
joshua_office_lights_day_mode:
  alias: Joshua Office Lights Day Mode
  sequence:
  - parallel:
    - target:
        entity_id:
        - light.joshua_office
        - light.joshua_office_lamp
      data:
        color_temp_kelvin: 5500
        brightness: 255
        transition: '{{ transition | default(1) }}'
      action: light.turn_on
    - target:
        entity_id: light.wled_joshua_office_desk
      data:
        rgb_color:
        - 255
        - 255
        - 255
        brightness: 255
        transition: '{{ transition | default(1) }}'
      action: light.turn_on
    - target:
        entity_id: switch.joshua_office_shelf_led
      data: {}
      action: switch.turn_on
  description: Turns on the office lights and sets them to full-bright and daylight.
  icon: mdi:lightbulb-auto
  fields:
    transition:
      name: Transition
      description: Time to transition the change.
      example: '600'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 36000
joshua_office_lights_night_mode:
  alias: Joshua Office Lights Night Mode
  sequence:
  - parallel:
    - data:
        brightness: 204
        color_temp_kelvin: 2700
        transition: '{{ transition | default(1) }}'
      target:
        entity_id: light.joshua_office_lamp
      action: light.turn_on
    - data:
        brightness: 140
        color_temp_kelvin: 2700
        transition: '{{ transition | default(1) }}'
      target:
        entity_id: light.joshua_office
      action: light.turn_on
    - data:
        brightness: 140
        color_temp_kelvin: 3800
        transition: '{{ transition | default(1) }}'
      target:
        entity_id: light.wled_joshua_office_desk
      action: light.turn_on
    - target:
        entity_id: switch.joshua_office_shelf_led
      data: {}
      action: switch.turn_off
  description: Dims and sets the office lights to soft.
  icon: mdi:lightbulb-night
  fields:
    transition:
      name: Transition
      description: Time to transition the change.
      example: '600'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 36000
kona_remote_start:
  alias: Kona Remote Start
  sequence:
  - variables:
      door_closed: '{{ is_state(''cover.garage_door'', ''closed'') }}'
      car_in_garage: '{{ is_state(''device_tracker.kona_location'', ''home'') }}'
  - alias: Check the garage door is closed and the car is in the garage
    if:
    - condition: template
      value_template: '{{ door_closed and car_in_garage }}'
    then:
    - target:
        entity_id: cover.garage_door
      data: {}
      action: cover.open_cover
  - action: kia_uvo.start_climate
    data:
      device_id: f27d2038fd3fe30bc627505de54ddea8
      duration: '{{ states(''input_number.kona_start_duration'') | int }}'
      climate: '{{ is_state(''input_boolean.kona_hvac'', ''on'') }}'
      temperature: '{{ states(''input_number.kona_temperature_set'') | int }}'
      defrost: '{{ is_state(''input_boolean.kona_defroster'', ''on'') }}'
      heating: '0'
      flseat: '{{ iif(is_state(''input_boolean.kona_seat_heat'', ''on''), ''8'', ''0'')
        }}'
      frseat: '{{ iif(is_state(''input_boolean.kona_seat_heat'', ''on''), ''8'', ''0'')
        }}'
      rlseat: '0'
      rrseat: '0'
  - alias: Wait for engine to turn on
    wait_for_trigger:
    - type: turned_on
      device_id: f27d2038fd3fe30bc627505de54ddea8
      entity_id: binary_sensor.kona_engine
      domain: binary_sensor
      trigger: device
    timeout:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
    continue_on_timeout: true
  - repeat:
      until:
      - condition: or
        conditions:
        - type: is_on
          condition: device
          device_id: f27d2038fd3fe30bc627505de54ddea8
          entity_id: binary_sensor.kona_engine
          domain: binary_sensor
        - condition: template
          value_template: '{{ repeat.index == 6 }}'
      sequence:
      - data:
          device_id: f27d2038fd3fe30bc627505de54ddea8
        action: kia_uvo.update
      - wait_for_trigger:
        - type: turned_on
          device_id: f27d2038fd3fe30bc627505de54ddea8
          entity_id: binary_sensor.kona_engine
          domain: binary_sensor
          trigger: device
        timeout:
          hours: 0
          minutes: 0
          seconds: 30
          milliseconds: 0
    alias: Repeat until engine turns on
  - choose:
    - conditions:
      - type: is_off
        condition: device
        device_id: f27d2038fd3fe30bc627505de54ddea8
        entity_id: binary_sensor.kona_engine
        domain: binary_sensor
      sequence:
      - alias: Fire event for other automations and scripts
        event: hyundai_command_failed
        event_data:
          command: remote_start
    default:
    - alias: Fire event for other automations and scripts
      event: hyundai_command_successful
      event_data:
        command: remote_start
  description: Starts the Kona and opens the garage door when home.
  icon: simple-icons:hyundai
  mode: single
kona_remote_stop:
  alias: Kona Remote Stop
  sequence:
  - action: kia_uvo.stop_climate
    data:
      device_id: f27d2038fd3fe30bc627505de54ddea8
  - alias: Close the garage door if open and Ascent is not running.
    if:
    - condition: state
      entity_id: cover.garage_door
      state: open
    - condition: state
      entity_id: timer.ascent_remote_start
      state: idle
    then:
    - target:
        entity_id: cover.garage_door
      data: {}
      action: cover.close_cover
  - alias: Wait for engine to turn off
    wait_for_trigger:
    - type: turned_off
      device_id: f27d2038fd3fe30bc627505de54ddea8
      entity_id: binary_sensor.kona_engine
      domain: binary_sensor
      trigger: device
    timeout:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
    continue_on_timeout: true
  - repeat:
      until:
      - condition: or
        conditions:
        - type: is_off
          condition: device
          device_id: f27d2038fd3fe30bc627505de54ddea8
          entity_id: binary_sensor.kona_engine
          domain: binary_sensor
        - condition: template
          value_template: '{{ repeat.index == 6 }}'
      sequence:
      - data:
          device_id: f27d2038fd3fe30bc627505de54ddea8
        action: kia_uvo.update
      - wait_for_trigger:
        - type: turned_off
          device_id: f27d2038fd3fe30bc627505de54ddea8
          entity_id: binary_sensor.kona_engine
          domain: binary_sensor
          trigger: device
        timeout:
          hours: 0
          minutes: 0
          seconds: 30
          milliseconds: 0
    alias: Reload data until engine stops
  - choose:
    - conditions:
      - type: is_on
        condition: device
        device_id: f27d2038fd3fe30bc627505de54ddea8
        entity_id: binary_sensor.kona_engine
        domain: binary_sensor
      sequence:
      - alias: Fire event for other automations and scripts
        event: hyundai_command_failed
        event_data:
          command: remote_stop
    default:
    - alias: Fire event for other automations and scripts
      event: hyundai_command_successful
      event_data:
        command: remote_stop
  description: Stops the Kona and closes the garage door.
  icon: simple-icons:hyundai
  mode: single
amy_office_lights_day_mode:
  alias: Amy Office Lights Day Mode
  sequence:
  - parallel:
    - target:
        entity_id:
        - light.amy_office
      data:
        color_temp_kelvin: 5500
        brightness: 255
        transition: '{{ transition | default(1) }}'
      action: light.turn_on
  description: Turns on the office lights and sets them to full-bright and daylight.
  icon: mdi:lightbulb-auto
  fields:
    transition:
      name: Transition
      description: Time to transition the change.
      example: '600'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 36000
amy_office_lights_night_mode:
  alias: Amy Office Lights Night Mode
  sequence:
  - parallel:
    - data:
        brightness: 140
        color_temp_kelvin: 2700
        transition: '{{ transition | default(1) }}'
      target:
        entity_id: light.amy_office
      action: light.turn_on
  description: Dims and sets the office lights to soft.
  icon: mdi:lightbulb-night
  fields:
    transition:
      name: Transition
      description: Time to transition the change.
      example: '600'
      selector:
        number:
          mode: box
          unit_of_measurement: seconds
          min: 1
          max: 36000
amy_office_lights_on:
  alias: Amy Office Lights On
  sequence:
  - if:
    - condition: or
      conditions:
      - condition: time
        after: input_datetime.office_night_mode
      - condition: sun
        before: sunrise
        before_offset: -00:20:00
    then:
    - data: {}
      target:
        entity_id:
        - light.amy_office
      action: light.turn_on
    else:
    - target:
        entity_id:
        - light.amy_office
      action: light.turn_on
      data: {}
  description: Turns on the office lights based on time of day.
  icon: mdi:chair-rolling
  mode: single
find_remote:
  alias: Find Remote
  sequence:
  - action: androidtv.adb_command
    data:
      command: am start -a android.intent.action.VIEW -d -n com.nvidia.remotelocator/.RemoteLocatorActivity
    target:
      entity_id: '{{ media_player }}'
  fields:
    media_player:
      name: Media Player
      required: true
      selector:
        entity:
          filter:
          - integration: androidtv
            domain: media_player
  description: Activates the find remote feature on the Nvidia Shield.
  icon: mdi:remote
family_room_play_mode:
  sequence:
  - parallel:
    - action: script.family_room_game_light_mode
      data: {}
    - action: remote.turn_on
      target:
        entity_id: remote.harmony_family_room
      data:
        activity: '{{ activity | default(''Computer'', true) }}'
  alias: Family Room Play Mode
  description: Turns on a Family Room activity and adjusts the lights.
  icon: mdi:remote-tv
  fields:
    activity:
      name: Activity
      description: Harmony activity to run
      selector:
        select:
          options:
          - Computer
          - PS4
          - PS3
          - XBox
          - Shield TV
send_critical_notifications_test:
  sequence:
  - action: script.notify_mobile
    data:
      notification_type: notify
      send_to: '{{ send_to }}'
      title: Doorbell (Person)
      message: A Person was detected on the Doorbell camera.
      notification_icon: mdi:account-outline
      color: '#e91e63'
      group: Doorbell Notification
      image: api/frigate/notifications/1756418205.084629-w8t68r/snapshot.jpg?format=android
      tag: 1756418205.084629-w8t68r
      interruption_level: critical
      channel: Doorbell Motion
      importance: high
  - action: script.notify_mobile
    data:
      notification_type: notify
      send_to: '{{ send_to }}'
      title: Doorbell
      message: Ring Ring!
      notification_icon: mdi:doorbell-video
      color: '#e91e63'
      icon: local/icons/doorbell-video.png
      camera: camera.doorbell
      group: Doorbell
      interruption_level: critical
      tag: doorbell-ring
      channel: Doorbell Ring
      importance: high
  - action: script.notify_mobile
    data:
      notification_type: notify
      send_to: '{{ send_to }}'
      title: Water Leak Detected
      message: There is a water leak in the bathroom and the water main has been shut
        off.
      notification_icon: mdi:water-alert
      color: '#009688'
      icon: local/icons/water-alert.png
      group: Water Leak
      tag: water-leak
      interruption_level: critical
      channel: Water Leak
      importance: high
  - action: script.notify_mobile
    data:
      notification_type: notify
      send_to: '{{ send_to }}'
      title: Grill Temperature LOW
      message: 'Grill temperature is 293.0°F (Limit: 400.0°F)'
      notification_icon: mdi:gas-burner
      color: '#f44336'
      icon: local/icons/gas-burner.png
      group: BBQ Alerts
      interruption_level: critical
      tag: bbq-grill-alert
      channel: BBQ Alerts
      importance: high
  fields:
    send_to:
      selector:
        select:
          options:
          - joshua
          - amy
          - parents
          - ethan
          - emma
          - kids
      name: Send To
  alias: Send Critical Notifications Test
  description: ''
  icon: mdi:ab-testing
generate_collection_dates:
  sequence:
  - repeat:
      for_each: '{{ collection_dates }}'
      sequence:
      - action: calendar.create_event
        data:
          summary: '{{ repeat.item.summary }}'
          description: '{{ repeat.item.description }}'
          start_date: '{{ repeat.item.start_date }}'
          end_date: '{{ repeat.item.end_date }}'
        target:
          entity_id: '{{ calendar }}'
  alias: Generate Collection Dates
  description: Generate a list of garbage collection dates for a year.
  icon: mdi:trash-can
  fields:
    name:
      name: Name of Collection
      description: Set the name of each event
      required: true
      example: Garbage
      selector:
        text:
    calendar:
      name: Calendar
      description: Calendar to add collection events to
      required: true
      selector:
        entity:
          filter:
            domain: calendar
    frequency:
      name: Frequency
      default: '2'
      required: true
      selector:
        select:
          options:
          - label: Weekly
            value: '2'
          - label: Even Weeks
            value: '0'
          - label: Odd Weeks
            value: '1'
    pickup_day:
      name: Pickup Day
      default: '0'
      required: true
      selector:
        select:
          options:
          - label: Monday
            value: '0'
          - label: Tuesday
            value: '1'
          - label: Wednesday
            value: '2'
          - label: Thursday
            value: '3'
          - label: Friday
            value: '4'
          - label: Saturday
            value: '5'
    holiday_entity:
      name: Holidays
      description: Entity containing the holidays - an instance of Holidays custom
        integration (available through HACS)
      selector:
        entity:
          integration: holidays
          multiple: false
    year:
      name: Year
      description: Set the year to generate dates. Default is the current year.
      example: '2023'
      selector:
        text:
  variables:
    year_value: '{{ iif(year is defined, year | int, now().year) }}'
    skip: '{{ frequency | int }}'
    pickup: '{{ pickup_day | int }}'
    collection_dates: "{# Set up collection namespace to store dates #} {%- set collection
      = namespace(days=[], week=[]) -%}\n{# Find the first day of the first week of
      the year #} {%- set f = (year_value ~ \"-01-01\") | as_datetime | as_local -%}
      {%- set first = f - timedelta(days=f.weekday()) -%} {%- if first.isocalendar().week
      > 1 -%}\n  {%- set first = first + timedelta(days=7) -%}\n{%- endif -%}\n{#
      Find the last week of the year #} {%- set l = f.replace(year=year_value+1) -%}
      {%- if l.isocalendar().week == 1 -%}\n  {%- set l = l - timedelta(days=7) -%}\n{%-
      endif -%} {%- set last_week = l.isocalendar().week -%}\n{# Generate range of
      weeks in a year #} {%- set week_range = (range(0, last_week)) | list -%}\n{#
      Set the pickup day #} {%- set first = first + timedelta(days=pickup - first.weekday())
      -%}\n{# Generate collection dates #} {%- for i in week_range -%}\n  {# Skip
      week if enabled #}\n  {%- if i % 2 == skip -%}\n    {%- continue -%}\n  {%-
      endif -%}\n\n  {%- set date = first + timedelta(days = 7 * (i)) -%}\n  {%- set
      holiday = namespace(found=false, days=[], name=\"\") -%}\n\n  {# Check for a
      holiday on or before the collection day during the week #}\n  {%- if holiday_entity
      is defined -%}\n    {# Get list of holidays from calendar #}\n    {%- set holidays
      = states[holiday_entity].attributes.get(\"holidays\") -%}\n    {%- for i in
      range(date.weekday() + 1) -%}\n      {%- set d = (date - timedelta(days=i))
      | as_timestamp | timestamp_custom(\"%Y-%m-%d\", local=false) -%}\n      {%-
      if d in holidays -%}\n        {%- set holiday.found = true -%}\n        {%-
      set holiday.name = holidays[d] -%}\n        {%- set holiday.days = holiday.days
      + [d] -%}\n      {%- endif -%}\n    {%- endfor -%}\n  {%- endif -%}\n\n  {%-
      if holiday_entity is defined and holiday.found -%}\n    {# Increase offset until
      we find a date that is not public holiday #}\n    {%- set offset = namespace(days=1,
      found=false) -%}\n    {%- for _ in range(7) if not offset.found -%}\n      {%-
      set d = (date + timedelta(days=offset.days)) | as_timestamp | timestamp_custom(\"%Y-%m-%d\",
      local=false) -%}\n      {%- if d in holiday.days -%}\n        {%- set offset.days
      = offset.days + 1 -%}\n      {%- else -%}\n        {%- set offset.found = true
      -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {# Set collection for offset
      #}\n    {%- set collection.days = collection.days + [{\n      \"summary\": name,\n
      \     \"description\": \"Offset due to \" ~ holiday.name,\n      \"start_date\":
      (date + timedelta(days=offset.days)).strftime(\"%Y-%m-%d\"),\n      \"end_date\":
      (date + timedelta(days=offset.days+1)).strftime(\"%Y-%m-%d\")\n    }] -%}\n
      \ {%- else -%}\n    {# Set collection for normal date #}\n    {%- set collection.days
      = collection.days + [{\n      \"summary\": name,\n      \"description\": \"\",\n
      \     \"start_date\": date.strftime(\"%Y-%m-%d\"),\n      \"end_date\": (date
      + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    }] -%}\n  {%- endif -%}\n{%-
      endfor -%} {{ collection.days }}"
collection_at_curb:
  sequence:
  - alias: Set local variables for reuse in this script.
    variables:
      name: '{{ states[entity].name | replace(" Collection", "") }}'
      object_id: '{{ states[entity].object_id }}'
      tag: '{{ object_id }}'
  - alias: Check for valid state
    condition: template
    value_template: '{{ states(entity) | int < 2 and is_state("input_boolean." ~ object_id,
      "off") }}'
  - action: input_boolean.turn_on
    target:
      entity_id: input_boolean.{{ object_id }}
    data: {}
  - parallel:
    - action: script.notify_mobile
      data:
        send_to: parents
        title: '{{ name }} Collection'
        message: The {{ name }} can is at the curb
        notification_icon: '{{ states[entity].attributes.icon }}'
        color: '#4caf50'
        icon: local/icons/{{ states[entity].attributes.icon | replace("mdi:", "")
          }}.png
        group: Collection
        tag: '{{ tag }}'
    - action: script.notify_hass_agent
      data:
        entity:
        - media_player.nasya
        title: '{{ name }} Collection'
        message: The {{ name }} can is at the curb
    - data:
        computer:
        - erebus
        title: '{{ name }} Collection'
        message: The {{ name }} can is at the curb
        icon: local/icons/{{ states[entity].attributes.icon | replace("mdi:", "")
          }}.png
      action: script.notify_lnxlink
  alias: Collection At Curb
  description: Confirm collection can is on the curb
  icon: mdi:trash-can
  mode: single
  fields:
    entity:
      name: Entity
      description: Collection entity to set at curb.
      required: true
      selector:
        entity:
          domain: sensor
store_mqtt_sensor:
  alias: Store MQTT Sensor
  description: Stores data in a MQTT message.
  icon: mdi:message-bookmark
  mode: parallel
  fields:
    name:
      name: MQTT Name
      example: last_message
      required: true
      selector:
        text:
    state:
      name: State
      example: some state
      required: true
      selector:
        text:
    attributes:
      name: Attributes
      example: attributes
      selector:
        text:
          multiline: true
  sequence:
  - parallel:
    - action: mqtt.publish
      data:
        topic: custom/sensor/{{ name }}/state
        payload: '{{ state | striptags | truncate(250) }}'
        retain: true
    - if:
      - condition: template
        value_template: '{{ attributes != "" }}'
      then:
      - action: mqtt.publish
        data:
          topic: custom/sensor/{{ name }}/attributes
          payload: '{{ attributes | default("none") }}'
          retain: true
door_status:
  alias: Door Status
  icon: mdi:door
  fields:
    media_player:
      name: Media Player
      example: media_player.living_room_speaker
      required: true
      selector:
        entity:
          domain: media_player
  sequence:
  - action: script.notify_speech
    data:
      media_player: '{{ media_player | default("media_player.living_room_speaker")
        }}'
      message: "{% set security = expand(\"binary_sensor.all_doors\") | selectattr(\"state\",
        \"==\", \"on\") | map(attribute=\"entity_id\") | list %} {% set security =
        security + expand([\n  \"lock.front_door\",\n  \"lock.garage_entry\",\n  \"cover.garage_door\"\n])
        | selectattr(\"state\", \"in\", [\"open\", \"unlocked\"]) | map(attribute=\"entity_id\")
        | list %}\n{% if security | length > 0 %}\n  {% for entity in security -%}\n
        \   {{ 'T' if loop.first else 't' }}he {{ state_attr(entity, 'friendly_name')
        }} is {{ 'unlocked' if 'lock' in entity else 'open' }}{{ ',' if loop.length
        > 2 and not loop.last else '' }}{{ '.' if loop.last else ' ' }}{{ 'and ' if
        loop.length > 1 and loop.revindex0 == 1 }}\n  {%- endfor %}\n{% endif %}"
  description: This script reads the status of all doors and announces the result
    to a Google Home Mini.
light_status:
  alias: Light Status
  icon: mdi:lightbulb-group-outline
  fields:
    media_player:
      name: Media Player
      example: media_player.living_room_speaker
      required: true
      selector:
        entity:
          domain: media_player
  sequence:
  - action: script.notify_speech
    data:
      media_player: '{{ media_player | default("media_player.living_room_speaker")
        }}'
      message: "{%- from \"util.jinja\" import get_friendly_names -%} {% set lights_on
        = expand(\"light.all_lights\") | selectattr(\"state\", \"==\", \"on\") | map(attribute=\"entity_id\")
        | list %} {% if lights_on | length == 1 %}\n  There is 1 light on right now.
        It's the {{ get_friendly_names(lights_on) }}.\n{% elif lights_on | length
        > 1 %}\n  There are {{ lights_on | length }} lights on right now. The {{ get_friendly_names(lights_on)
        }}.\n{% endif %}"
  description: This script reads the status of all lights and announces the result
    to a Google Home Mini.
say_cloud:
  alias: Say Cloud
  description: Text-to-speech using Nabu Casa.
  icon: mdi:microphone-message
  mode: parallel
  fields:
    media_player:
      name: Media Player
      example: media_player.living_room_speaker
      required: true
      selector:
        entity:
          domain: media_player
    message:
      name: Message
      example: Message text
      required: true
      selector:
        text:
          multiline: true
    voice:
      name: Voice
      example: The voice to use
      selector:
        select:
          options:
          - JennyNeural
          - AIGenerate1Neural
          - AIGenerate2Neural
          - AmberNeural
          - AnaNeural
          - AriaNeural
          - AshleyNeural
          - BrandonNeural
          - ChristopherNeural
          - CoraNeural
          - DavisNeural
          - ElizabethNeural
          - EricNeural
          - GuyNeural
          - JacobNeural
          - JaneNeural
          - JasonNeural
          - JennyMultilingualNeural
          - MichelleNeural
          - MonicaNeural
          - NancyNeural
          - RogerNeural
          - SaraNeural
          - SteffanNeural
          - TonyNeural
  variables:
    voice: '{{ voice | default("SaraNeural", true) }}'
  sequence:
    if:
    - condition: template
      value_template: '{{ message is not undefined }}'
    then:
    - action: tts.speak
      target:
        entity_id:
        - tts.home_assistant_cloud
      data:
        media_player_entity_id: '{{ media_player }}'
        message: '{{ message | striptags }}'
        options:
          voice: '{{ voice }}'
say_google_cloud:
  alias: Say Google Cloud
  description: Text-to-speech using Google Cloud.
  icon: mdi:microphone-message
  mode: parallel
  fields:
    media_player:
      name: Media Player
      example: media_player.living_room_speaker
      required: true
      selector:
        entity:
          domain: media_player
    message:
      name: Message
      example: Message text
      required: true
      selector:
        text:
          multiline: true
    voice:
      name: Voice
      example: The voice to use
      selector:
        select:
          options:
          - label: Studio Male
            value: en-US-Studio-M
          - label: Studio Female
            value: en-US-Studio-O
          - label: Neural2-A Male
            value: en-US-Neural2-A
          - label: Neural2-C Female
            value: en-US-Neural2-C
          - label: Neural2-D Male
            value: en-US-Neural2-D
          - label: Neural2-E Female
            value: en-US-Neural2-E
          - label: Neural2-F Female
            value: en-US-Neural2-F
          - label: Neural2-G Female
            value: en-US-Neural2-G
          - label: Neural2-H Female
            value: en-US-Neural2-H
          - label: Neural2-I Male
            value: en-US-Neural2-I
          - label: Neural2-J Male
            value: en-US-Neural2-J
  variables:
    voice: '{{ voice | default("en-US-Studio-O", true) }}'
    gender: "{%- if voice.split('-')[3] in [\"M\", \"A\", \"D\", \"I\", \"J\"] -%}\n
      \ male\n{%- else -%}\n  female\n{%- endif -%}"
  sequence:
    if:
    - condition: template
      value_template: '{{ message is not undefined }}'
    then:
    - action: tts.speak
      target:
        entity_id: tts.google_cloud
      data:
        media_player_entity_id: '{{ media_player }}'
        message: '{{ message | striptags | truncate(250) }}'
        options:
          gender: '{{ gender }}'
          voice: '{{ voice }}'
