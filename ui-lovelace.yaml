button_card_templates:
  amber_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-amber), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-amber),1)
      img_cell:
      - background-color: rgba(var(--color-amber), 0.2)
      label:
      - color: rgba(var(--color-amber-text),1)
      name:
      - color: rgba(var(--color-amber-text),1)
  amber_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-amber),1)
        img_cell:
        - background-color: rgba(var(--color-amber), 0.2)
        label:
        - color: rgba(var(--color-amber-text),1)
        name:
        - color: rgba(var(--color-amber-text),1)
      value: 'off'
  amber_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-amber), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-amber),1)
        img_cell:
        - background-color: rgba(var(--color-amber), 0.2)
        label:
        - color: rgba(var(--color-amber-text),1)
        name:
        - color: rgba(var(--color-amber-text),1)
      value: 'on'
  battery:
    template: card_battery
    variables:
      ulm_card_battery_attribute: battery
  binary_sensor:
    template: card_binary_sensor
  blue:
    template: blue_on
  blue-grey_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-blue-grey), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-blue-grey),1)
      img_cell:
      - background-color: rgba(var(--color-blue-grey), 0.2)
      label:
      - color: rgba(var(--color-blue-grey-text),1)
      name:
      - color: rgba(var(--color-blue-grey-text),1)
  blue-grey_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-blue-grey),1)
        img_cell:
        - background-color: rgba(var(--color-blue-grey), 0.2)
        label:
        - color: rgba(var(--color-blue-grey-text),1)
        name:
        - color: rgba(var(--color-blue-grey-text),1)
      value: 'off'
  blue-grey_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-blue-grey), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-blue-grey),1)
        img_cell:
        - background-color: rgba(var(--color-blue-grey), 0.2)
        label:
        - color: rgba(var(--color-blue-grey-text),1)
        name:
        - color: rgba(var(--color-blue-grey-text),1)
      value: 'on'
  blue_no_card:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(0,0,0,0)
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: 'on'
  blue_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-blue), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-blue),1)
      img_cell:
      - background-color: rgba(var(--color-blue), 0.2)
      label:
      - color: rgba(var(--color-blue-text),1)
      name:
      - color: rgba(var(--color-blue-text),1)
  blue_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: 'off'
  blue_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-blue), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: 'on'
  brown_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-brown), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-brown),1)
      img_cell:
      - background-color: rgba(var(--color-brown), 0.2)
      label:
      - color: rgba(var(--color-brown-text),1)
      name:
      - color: rgba(var(--color-brown-text),1)
  brown_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-brown),1)
        img_cell:
        - background-color: rgba(var(--color-brown), 0.2)
        label:
        - color: rgba(var(--color-brown-text),1)
        name:
        - color: rgba(var(--color-brown-text),1)
      value: 'off'
  brown_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-brown), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-brown),1)
        img_cell:
        - background-color: rgba(var(--color-brown), 0.2)
        label:
        - color: rgba(var(--color-brown-text),1)
        name:
        - color: rgba(var(--color-brown-text),1)
      value: 'on'
  car_icon:
    custom_fields:
      tracker: "[[[\n  let icon = \"mdi:road-variant\";\n  if (states[variables.tracker].state\
        \ == 'home') {\n    icon = \"mdi:home-variant\";\n  }\n  return '<ha-icon\
        \ icon=\"' + icon + '\" style=\"width: 10px; height: 10px; color: var(--primary-background-color);\"\
        ></ha-icon>';\n]]]\n"
    entity: '[[[ return entity.entity_id ]]]'
    icon: '[[[ return variables.icon ]]]'
    name: '[[[ return variables.name ]]]'
    show_last_changed: true
    show_name: true
    styles:
      custom_fields:
        tracker:
        - border-radius: 50%
        - position: absolute
        - left: 30px
        - top: -2px
        - height: 16px
        - width: 16px
        - border: 2px solid var(--card-background-color)
        - font-size: 12px
        - line-height: 14px
        - background-color: "[[[\n  if (states[variables.tracker].state == 'home')\
            \ {\n    return 'rgba(var(--color-cyan), 1)';\n  } else {\n    return\
            \ 'rgba(var(--color-amber), 1)';\n  }\n]]]\n"
      icon:
      - color: rgba(var(--color-theme),0.9)
      - width: 20px
      - place-self: center
    tap_action:
      action: navigate
      navigation_path: subaru
    template:
    - icon_info
  card_battery:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: "[[[\n  // Get battery level\n  const battery_level = variables.ulm_card_battery_attribute\
                  \ !== null ?\n    states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]\
                  \ :\n    states[entity.entity_id].state;\n  // Generate icon infix\n\
                  \  let infix = \"\";\n  if (variables.ulm_card_battery_charger_type_entity_id\
                  \ == null) {\n    // Check wether the battery state is charging\n\
                  \    infix = variables.ulm_card_battery_battery_state_entity_id\
                  \ !== null &&\n      states[variables.ulm_card_battery_battery_state_entity_id].state.toLowerCase()\
                  \ === \"charging\" ?\n      \"-charging\" : \"\"\n  } else {\n \
                  \   // Select the infix based on the entity charging state\n   \
                  \ switch (states[variables.ulm_card_battery_charger_type_entity_id].state.toLowerCase())\
                  \ {\n      case \"wireless\":\n        infix = \"-charging-wireless\"\
                  ;\n        break;\n      case \"charging\":\n        infix = \"\
                  -charging\";\n        break;\n      case \"ac\":\n        infix\
                  \ = \"-charging\";\n        break;\n      case \"usb\":\n      \
                  \  infix = \"-charging\";\n        break;\n      default:\n    \
                  \    infix = \"\";\n    }\n  }\n  // Generate the icon based on\
                  \ the battery_level\n  let icon = \"mdi:help-circle-outline\";\n\
                  \  if (battery_level == 100) {\n    icon = \"mdi:battery\";\n  }\
                  \ else if (battery_level < 10) {\n    icon = \"mdi:battery\" + infix\
                  \ + \"-outline\";\n  } else if (battery_level == \"unknown\" ||\
                  \ battery_level == \"unavailable\") {\n    icon = \"mdi:battery-off\"\
                  ;\n  } else {\n    icon = \"mdi:battery\" + infix + \"-\" + Math.floor(battery_level\
                  \ / 10) * 10;\n  }\n  return icon;\n]]]\n"
                styles:
                  icon:
                  - color: "[[[\n  const battery_level = variables.ulm_card_battery_attribute\
                      \ !== null ?\n    states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]\
                      \ :\n    states[entity.entity_id].state;\n  // Get the color\
                      \ based on battery_level\n  let color = \"rgba(var(--color-theme),\
                      \ 0.9)\";\n  if (battery_level !== \"unavailable\" && (variables.ulm_card_battery_battery_level_danger\
                      \ !== null || variables.ulm_card_battery_battery_level_warning\
                      \ !== null)) {\n    if (battery_level <= variables.ulm_card_battery_battery_level_danger)\
                      \ {\n      color = variables.ulm_card_battery_color_battery_level_danger;\n\
                      \    } else if (battery_level <= variables.ulm_card_battery_battery_level_warning)\
                      \ {\n      color = variables.ulm_card_battery_color_battery_level_warning;\n\
                      \    } else if (battery_level == \"unknown\" || battery_level\
                      \ == \"unavailable\") {\n      color = variables.ulm_card_battery_color_battery_level_danger;\n\
                      \    } else {\n      color = variables.ulm_card_battery_color_battery_level_ok;\n\
                      \    }\n  }\n  return color;\n]]]\n"
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n  const battery_level = variables.ulm_card_battery_attribute\
                  \ !== null\n    ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]\n\
                  \    : states[entity.entity_id].state;\n  return battery_level +\
                  \ \"%\";\n  if(battery_level == \"unknown\")\n  { return variables.ulm_translation_state;\
                  \ }\n  else\n  { return battery_level + \"%\"; }\n]]]\n"
                name: '[[[ return variables.ulm_card_battery_name ]]]'
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    triggers_update: all
    variables:
      ulm_card_battery_attribute: null
      ulm_card_battery_battery_level_danger: null
      ulm_card_battery_battery_level_warning: null
      ulm_card_battery_battery_state_entity_id: null
      ulm_card_battery_charger_type_entity_id: null
      ulm_card_battery_color_battery_level_danger: var(--google-red)
      ulm_card_battery_color_battery_level_ok: var(--google-green)
      ulm_card_battery_color_battery_level_warning: var(--google-yellow)
      ulm_card_battery_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_binary_sensor:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_binary_sensor_icon; ]]]'
                template:
                - blue
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_translation_state;]]]'
                name: '[[[ return variables.ulm_card_binary_sensor_name; ]]]'
                show_last_changed: '[[[ return variables.ulm_show_last_changed; ]]]'
                template:
                - blue_no_card
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          - blue
          type: custom:button-card
    show_last_changed: false
    template:
    - icon_more_info_new
    - blue
    - ulm_translation_engine
    - ulm_actions_card
    variables:
      ulm_card_binary_sensor_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_binary_sensor_name: '[[[ return entity.attributes.friendly_name ]]]'
      ulm_show_last_changed: false
  card_binary_sensor_alert:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_binary_sensor_alert_icon; ]]]'
                template:
                - blue
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_translation_state;]]]'
                name: '[[[ return variables.ulm_card_binary_sensor_alert_name; ]]]'
                show_last_changed: '[[[ return variables.ulm_show_last_changed; ]]]'
                template:
                - blue_no_card
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          - blue
          type: custom:button-card
    show_last_changed: false
    template:
    - icon_more_info_alert
    - blue
    - ulm_translation_engine
    - ulm_actions_card
    variables:
      ulm_card_binary_sensor_alert_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_binary_sensor_alert_name: '[[[ return entity.attributes.friendly_name
        ]]]'
      ulm_show_last_changed: false
  card_cover:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: "[[[\n    var icon = \"mdi:help-circle\";\n    if (typeof states[entity.entity_id].attributes.current_position\
                  \ === \"undefined\"){\n      if (states[entity.entity_id].state\
                  \ == \"closed\"){\n        if (variables.ulm_card_curtain_display_collapse_expand){\n\
                  \          var icon = \"mdi:curtains-closed\";\n        } else if\
                  \ (variables.ulm_card_cover_garage){\n          var icon = \"mdi:garage-variant\"\
                  ;\n        } else if (variables.ulm_card_cover_gate){\n        \
                  \  var icon = \"mdi:gate\";\n        } else\n          var icon\
                  \ = \"mdi:window-shutter\";\n      } else\n        if (variables.ulm_card_curtain_display_collapse_expand){\n\
                  \          var icon = \"mdi:curtains\";\n        } else if (variables.ulm_card_cover_garage){\n\
                  \          var icon = \"mdi:garage-open-variant\";\n        } else\
                  \ if (variables.ulm_card_cover_gate){\n          var icon = \"mdi:gate-open\"\
                  ;\n        }else\n          var icon = \"mdi:window-shutter-open\"\
                  ;\n    } else {\n      if (states[entity.entity_id].attributes.current_position\
                  \ == 0){\n        if (variables.ulm_card_curtain_display_collapse_expand){\n\
                  \          var icon = \"mdi:curtains-closed\";\n        } else if\
                  \ (variables.ulm_card_cover_garage){\n          var icon = \"mdi:garage-variant\"\
                  ;\n        } else if(variables.ulm_card_cover_gate){\n         \
                  \ var icon = \"mdi:gate\";\n        } else\n          var icon =\
                  \ \"mdi:window-shutter\";\n      } else\n        if (variables.ulm_card_curtain_display_collapse_expand){\n\
                  \          var icon = \"mdi:curtains\";\n        } else if(variables.ulm_card_cover_garage){\n\
                  \          var icon = \"mdi:garage-open-variant\";\n        } else\
                  \ if(variables.ulm_card_cover_gate){\n          var icon = \"mdi:gate-open\"\
                  ;\n        }\n        else\n          var icon = \"mdi:window-shutter-open\"\
                  ;\n    }\n    return icon ;\n]]]\n"
                styles:
                  icon:
                  - color: "[[[\n    if (typeof states[entity.entity_id].attributes.current_position\
                      \ === \"undefined\"){\n      if (states[entity.entity_id].state\
                      \ == \"closed\"){\n        return 'rgba(var(--color-theme),0.2)';\n\
                      \      } else\n        return 'rgba(var(--color-blue),1)'\n\
                      \    } else {\n      if (states[entity.entity_id].attributes.current_position\
                      \ == 0){\n        return 'rgba(var(--color-theme),0.2)';\n \
                      \     } else {\n        return 'rgba(var(--color-blue),1)'\n\
                      \      }\n    }\n]]]\n"
                  img_cell:
                  - background-color: "[[[\n    if (typeof states[entity.entity_id].attributes.current_position\
                      \ === \"undefined\"){\n      if (states[entity.entity_id].state\
                      \ == \"closed\"){\n        return 'rgba(var(--color-theme),0.05)';\n\
                      \      } else\n        return 'rgba(var(--color-blue),0.2)';\n\
                      \    } else {\n      if (states[entity.entity_id].attributes.current_position\
                      \ == 0){\n        return 'rgba(var(--color-theme),0.05)';\n\
                      \      } else {\n        return 'rgba(var(--color-blue),0.2)';\n\
                      \      }\n    }\n]]]\n"
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n    if (entity.state !=\"unavailable\"){\n      if (typeof\
                  \ states[entity.entity_id].attributes.current_position === \"undefined\"\
                  ){\n        if (states[entity.entity_id].state == \"closed\"){\n\
                  \          return variables.ulm_translation_state;\n        } else\n\
                  \          return variables.ulm_translation_state;\n      } else\
                  \ {\n        if (states[entity.entity_id].attributes.current_position\
                  \ == 0){\n          return variables.ulm_translation_state;\n  \
                  \      } else {\n          return variables.ulm_translation_state\
                  \ + \" • \" + (states[entity.entity_id].attributes.current_position)\
                  \ + \"%\" ;\n        }\n      }\n  } else {\n    return variables.ulm_translation_state;\n\
                  \  }\n]]]"
                name: '[[[ return variables.ulm_card_cover_name ]]]'
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
      item2:
        card:
          custom_fields:
            item1:
              card:
                icon: "[[[\n  if (variables.ulm_card_cover_display_left_right){\n\
                  \    return \"mdi:arrow-left\";\n  }\n  if (variables.ulm_card_curtain_display_collapse_expand\
                  \ || variables.ulm_card_cover_gate){\n    return \"mdi:arrow-collapse-horizontal\"\
                  ;\n  }\n  return \"mdi:arrow-down\";\n]]]"
                state:
                - styles:
                    icon:
                    - color: rgba(var(--color-theme),0.4)
                  value: closed
                tap_action:
                  action: call-service
                  service: cover.close_cover
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
            item2:
              card:
                icon: mdi:pause
                tap_action:
                  action: call-service
                  service: cover.stop_cover
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
            item3:
              card:
                icon: "[[[\n  if (variables.ulm_card_cover_display_left_right){\n\
                  \    return \"mdi:arrow-right\";\n  }\n  if (variables.ulm_card_curtain_display_collapse_expand\
                  \ || variables.ulm_card_cover_gate){\n    return \"mdi:arrow-expand-horizontal\"\
                  ;\n  }\n  return \"mdi:arrow-up\";\n]]]"
                state:
                - styles:
                    icon:
                    - color: rgba(var(--color-theme),0.4)
                  value: open
                tap_action:
                  action: call-service
                  service: cover.open_cover
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
          template: list_3_items
          type: custom:button-card
      item3:
        card:
          card_mod: null
          entity: '[[[ return entity.entity_id ]]]'
          height: 42px
          mainSliderColor: "[[[\n    if (entity.state == \"unavailable\"){\n     \
            \ return \"rgba(var(--color-grey),1)\";\n    }\n    else{\n      return\
            \ \"rgba(var(--color-blue),1)\";\n    }\n]]]\n"
          mainSliderColorOff: rgba(var(--color-theme),0.05)
          radius: 14px
          secondarySliderColor: "[[[\n    if (entity.state == \"unavailable\"){\n\
            \      return \"rgba(var(--color-grey),0.2)\";\n    }\n    else{\n   \
            \   return \"rgba(var(--color-blue),0.2)\";\n    }\n]]]\n"
          secondarySliderColorOff: rgba(var(--color-theme),0.05)
          style: "ha-card {\n  border-radius: 14px;\n  box-shadow: none;\n}\n"
          thumbHorizontalPadding: 0px
          thumbVerticalPadding: 0px
          thumbWidth: 0px
          type: custom:my-slider
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      custom_fields:
        item2:
        - display: "[[[\n      if (variables.ulm_card_cover_enable_controls) {\n \
            \         return \"block\";\n      } else {\n          return \"none\"\
            ;\n      }\n]]]\n"
        item3:
        - display: "[[[\n      if (variables.ulm_card_cover_enable_slider) {\n   \
            \       return \"block\";\n      } else {\n          return \"none\";\n\
            \      }\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n      var areas = [];\n      if (variables.ulm_card_cover_enable_horizontal)\
          \ {\n        if ( variables.ulm_card_cover_enable_slider) {\n          \
          \  return \"\\\"item1 item3\\\"\";\n        } else {\n          return \"\
          \\\"item1 item2\\\"\";\n        }\n      } else {\n        areas.push(\"\
          item1 item1\");\n        if ( variables.ulm_card_cover_enable_controls)\
          \ {\n            areas.push(\"item2 item2\");\n        }\n        if ( variables.ulm_card_cover_enable_slider)\
          \ {\n            areas.push(\"item3 item3\");\n        }\n    }\n      return\
          \ \"\\\"\" + areas.join(\"\\\" \\\"\") + \"\\\"\";\n]]]\n"
      - grid-template-columns: 1fr 1fr
      - grid-template-rows: "[[[\n      var rows = [];\n      rows.push(\"min-content\"\
          );\n      if (variables.ulm_card_cover_enable_horizontal) {\n        return\
          \ \"min-content\";\n      } else {\n        if ( variables.ulm_card_cover_enable_controls)\
          \ {\n            rows.push(\"min-content\");\n        }\n        if ( variables.ulm_card_cover_enable_slider)\
          \ {\n            rows.push(\"min-content\");\n        }\n      }\n     \
          \ return rows.join(\" \");\n]]]\n"
      - row-gap: 12px
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    variables:
      ulm_card_cover_display_left_right: false
      ulm_card_cover_enable_controls: false
      ulm_card_cover_enable_horizontal: false
      ulm_card_cover_enable_popup: false
      ulm_card_cover_enable_slider: false
      ulm_card_cover_garage: false
      ulm_card_cover_gate: false
      ulm_card_cover_name: '[[[ return entity.attributes.friendly_name ]]]'
      ulm_card_curtain_display_collapse_expand: false
  card_cover_buttons:
    template: card_cover
    variables:
      ulm_card_cover_enable_controls: true
  card_cover_with_buttons:
    template: card_cover_buttons
    variables:
      ulm_card_cover_buttons_entity: '[[[ return variables.ulm_card_cover_with_buttons_entity
        ]]]'
      ulm_card_cover_buttons_name: '[[[ return variables.ulm_card_cover_with_buttons_name
        ]]]'
  card_generic:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_generic_icon; ]]]'
                styles:
                  icon:
                  - color: rgba(var(--color-theme),0.9)
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_card_generic_name ]]]'
                name: '[[[ return variables.ulm_translation_state_unit ]]]'
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    variables:
      ulm_card_generic_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_generic_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_generic_swap:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_generic_swap_icon; ]]]'
                styles:
                  icon:
                  - color: rgba(var(--color-theme),0.9)
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_translation_state_unit ]]]'
                name: '[[[ return variables.ulm_card_generic_swap_name ]]]'
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    variables:
      ulm_card_generic_swap_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_generic_swap_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_graph:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                custom_fields:
                  item1:
                    card:
                      entity: '[[[ return entity.entity_id ]]]'
                      icon: '[[[ return variables.ulm_card_graph_icon; ]]]'
                      type: custom:button-card
                  item2:
                    card:
                      entity: '[[[ return entity.entity_id ]]]'
                      label: '[[[ return variables.ulm_card_graph_name ]]]'
                      type: custom:button-card
                template:
                - icon_more_info
                type: custom:button-card
          entity: '[[[ return entity.entity_id ]]]'
          styles:
            card:
            - box-shadow: none
            - border-radius: var(--border-radius) var(--border-radius) 0px 0px
            - padding: 12px
          template:
          - card_generic
          type: custom:button-card
      item2:
        card:
          entities: "[[[\n  var ent = [];\n  ent.push(variables.ulm_card_graph_entity);\n\
            \  if(variables.ulm_card_graph_entity2 != \"\")\n    ent.push(variables.ulm_card_graph_entity2);\n\
            \  return ent;\n]]]\n"
          hours_to_show: '[[[ return variables.ulm_card_graph_hours; ]]]'
          line_color: "[[[\n  var col = [];\n  col.push(variables.ulm_card_graph_color);\n\
            \  if(variables.ulm_card_graph_color2 != \"\")\n    col.push(variables.ulm_card_graph_color2);\n\
            \  return col;\n]]]\n"
          points_per_hour: '[[[ return variables.ulm_card_graph_points; ]]]'
          show:
            fill: '[[[ return variables.ulm_card_graph_type==''fill''?true:false;
              ]]]'
            graph: '[[[ return variables.ulm_card_graph_type==''fill''?''line'':variables.ulm_card_graph_type;
              ]]]'
            icon: false
            legend: false
            name: false
            state: false
          style: "ha-card {\n  box-shadow: none;\n  border-radius: var(--border-radius);\n\
            }\n"
          type: custom:mini-graph-card
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 0px
      grid:
      - grid-template-areas: '''item1'' ''item2'''
      - grid-template-columns: 1fr
      - grid-template-rows: min-content  min-content
    triggers_update: all
    variables:
      ulm_card_graph_color: var(--info-color)
      ulm_card_graph_color2: var(--info-color)
      ulm_card_graph_entity2: ''
      ulm_card_graph_hours: 24
      ulm_card_graph_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_graph_name: '[[[ return entity.attributes.friendly_name; ]]]'
      ulm_card_graph_points: '0.5'
      ulm_card_graph_type: fill
  card_input_boolean:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_input_boolean_icon; ]]]'
                template:
                - blue
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_translation_state ]]]'
                name: '[[[ return variables.ulm_card_input_boolean_name; ]]]'
                template:
                - blue_no_card
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          - blue
          type: custom:button-card
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    - blue
    variables:
      ulm_card_input_boolean_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_input_boolean_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_light:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_light_icon ]]]'
                styles:
                  icon:
                  - color: "[[[\n    var color = entity.attributes.rgb_color;\n  \
                      \  if (entity.state != \"on\"){\n      return 'rgba(var(--color-theme),0.2)';\n\
                      \    }\n    else if (color && variables.ulm_card_light_enable_color){\n\
                      \      return 'rgba(' + color + ',1)'\n    }\n    else{\n  \
                      \    return 'rgba(var(--color-yellow),1)'\n    }\n]]]\n"
                  img_cell:
                  - background-color: "[[[\n    var color = entity.attributes.rgb_color;\n\
                      \    if (entity.state != \"on\"){\n      return 'rgba(var(--color-theme),0.05)';\n\
                      \    }\n    else if (color && variables.ulm_card_light_enable_color){\n\
                      \      return 'rgba(' + color + ',0.2)';\n    }\n    else{\n\
                      \      return 'rgba(var(--color-yellow),0.2)';\n    }\n]]]\n"
                type: custom:button-card
                variables:
                  ulm_card_light_enable_popup: '[[[ return variables.ulm_card_light_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n  var label = variables.ulm_translation_state\n    if\
                  \ (entity.attributes.brightness != null && entity.state === 'on'){\n\
                  \      var bri = Math.round(entity.attributes.brightness / 2.55);\n\
                  \      var label = (bri ? bri : \"0\") + \"%\";\n    }\n  return\
                  \ label;\n]]]"
                name: '[[[ return variables.ulm_card_light_name ]]]'
                state:
                - styles:
                    label:
                    - color: "[[[\n    var color = entity.attributes.rgb_color;\n\
                        \    if (variables.ulm_card_light_enable_color == true){\n\
                        \      if(variables.ulm_card_light_force_background_color\
                        \ == true || hass.themes.darkMode){\n        if (color){\n\
                        \          return 'rgba(' + color + ',1)'\n        } else\
                        \ {\n          return 'rgba(var(--color-yellow-text),1)'\n\
                        \        }\n      }\n    }\n    return 'rgba(var(--color-yellow-text),1)'\n\
                        ]]]"
                    name:
                    - color: "[[[\n    var color = entity.attributes.rgb_color;\n\
                        \    if (variables.ulm_card_light_enable_color == true){\n\
                        \      if(variables.ulm_card_light_force_background_color\
                        \ == true || hass.themes.darkMode){\n        if (color){\n\
                        \          return 'rgba(' + color + ',1)'\n        } else\
                        \ {\n          return 'rgba(var(--color-yellow-text),1)'\n\
                        \        }\n      }\n    }\n    return 'rgba(var(--color-yellow-text),1)'\n\
                        ]]]"
                  value: 'on'
                type: custom:button-card
                variables:
                  ulm_card_light_enable_popup: '[[[ return variables.ulm_card_light_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
      item2:
        card:
          card_mod: null
          entity: '[[[ return entity.entity_id ]]]'
          height: 42px
          mainSliderColor: "[[[\n    var color = entity.attributes.rgb_color;\n  \
            \  if (entity.state == \"unavailable\"){\n       return \"rgba(var(--color-grey),1)\"\
            ;\n    }\n    else if (color && variables.ulm_card_light_enable_color){\n\
            \       return \"rgba(\" + color + \",1)\";\n    }\n    else{\n      return\
            \ \"rgba(var(--color-yellow),1)\";\n    }\n]]]\n"
          mainSliderColorOff: rgba(var(--color-theme),0.05)
          maxSet: '[[[ return variables.ulm_card_light_enable_slider_maxSet ]]]'
          minSet: '[[[ return variables.ulm_card_light_enable_slider_minSet ]]]'
          radius: 14px
          secondarySliderColor: "[[[\n    var color = entity.attributes.rgb_color;\n\
            \    if (entity.state == \"unavailable\"){\n       return \"rgba(var(--color-grey),0.2)\"\
            ;\n    }\n    else if (color && variables.ulm_card_light_enable_color){\n\
            \       return \"rgba(\" + color + \",0.2)\";\n    }\n    else{\n    \
            \  return \"rgba(var(--color-yellow),0.2)\";\n    }\n]]]\n"
          secondarySliderColorOff: rgba(var(--color-theme),0.05)
          style: "ha-card {\n  border-radius: 14px;\n  box-shadow: none;\n}\n"
          thumbColor: "[[[\n    var color = entity.attributes.rgb_color;\n    if (entity.state\
            \ == \"unavailable\"){\n       return \"rgba(var(--color-grey),1)\";\n\
            \    }\n    else if (color && variables.ulm_card_light_enable_color){\n\
            \       return \"rgba(\" + color + \",1)\";\n    }\n    else{\n      return\
            \ \"rgba(var(--color-yellow),1)\";\n    }\n]]]\n"
          thumbHorizontalPadding: 0px
          thumbVerticalPadding: 0px
          thumbWidth: 12px
          type: custom:my-slider
    show_icon: false
    show_label: false
    show_name: false
    state:
    - styles:
        card:
        - background-color: "[[[\n    var color = entity.attributes.rgb_color;\n \
            \   if (variables.ulm_card_light_enable_color == true){\n      if(variables.ulm_card_light_force_background_color\
            \ == true || hass.themes.darkMode){\n        if (color){\n          return\
            \ 'rgba(' + color + ',0.1)'\n        } else {\n          return 'rgba(var(--color-yellow-text),0.1)'\n\
            \        }\n      }\n    }\n    return 'rgba(var(--color-background-yellow),var(--opacity-bg))';\n\
            ]]]"
      value: 'on'
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      custom_fields:
        item2:
        - display: "[[[\n      if (variables.ulm_card_light_enable_collapse && entity.state\
            \ != \"on\") {\n          return \"none\";\n      } else if (variables.ulm_card_light_enable_slider)\
            \ {\n          return \"block\";\n      } else {\n          return \"\
            none\";\n      }\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n      if (variables.ulm_card_light_enable_collapse\
          \ && entity.state != \"on\") {\n          return \"\\\"item1\\\"\";\n  \
          \    } else if (variables.ulm_card_light_enable_horizontal) {\n        \
          \  return \"\\\"item1 item2\\\"\";\n      } else if (variables.ulm_card_light_enable_slider)\
          \ {\n          return \"\\\"item1\\\" \\\"item2\\\"\";\n      } else {\n\
          \          return \"\\\"item1\\\"\";\n      }\n]]]\n"
      - grid-template-columns: "[[[\n      if (variables.ulm_card_light_enable_collapse\
          \ && entity.state != \"on\") {\n          return \"1fr\";\n      } else\
          \ if (variables.ulm_card_light_enable_horizontal) {\n        if(variables.ulm_card_light_enable_horizontal_wide){\n\
          \          return \"1fr 2fr\";\n          } else {\n            return \"\
          1fr 1fr\";\n          }\n      } else {\n          return \"1fr\";\n   \
          \   }\n]]]\n"
      - grid-template-rows: "[[[\n      if (variables.ulm_card_light_enable_collapse\
          \ && entity.state != \"on\") {\n          return \"1fr\";\n      } else\
          \ if (variables.ulm_card_light_enable_slider && !variables.ulm_card_light_enable_horizontal)\
          \ {\n          return \"min-content min-content\";\n      } else {\n   \
          \       return \"1fr\";\n      }\n]]]\n"
      - row-gap: 12px
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    variables:
      ulm_card_light_enable_collapse: false
      ulm_card_light_enable_color: false
      ulm_card_light_enable_horizontal: false
      ulm_card_light_enable_horizontal_wide: false
      ulm_card_light_enable_popup: false
      ulm_card_light_enable_popup_tap: false
      ulm_card_light_enable_slider: false
      ulm_card_light_enable_slider_maxSet: 100
      ulm_card_light_enable_slider_minSet: 0
      ulm_card_light_force_background_color: false
      ulm_card_light_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_light_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_light_color:
    template: card_light
    variables:
      ulm_card_light_enable_color: false
  card_light_horizontal_color:
    template: card_light
    variables:
      ulm_card_light_enable_color: false
      ulm_card_light_enable_horizontal: true
  card_light_slider:
    template: card_light
    variables:
      ulm_card_light_enable_slider: true
  card_light_slider_collapse:
    template: card_light
    variables:
      ulm_card_light_enable_collapse: true
      ulm_card_light_enable_slider: true
  card_light_slider_collapse_color:
    template: card_light
    variables:
      ulm_card_light_enable_collapse: true
      ulm_card_light_enable_color: false
      ulm_card_light_enable_slider: true
  card_light_slider_color:
    template: card_light
    variables:
      ulm_card_light_enable_color: false
      ulm_card_light_enable_slider: true
  card_light_slider_horizontal:
    template: card_light
    variables:
      ulm_card_light_enable_horizontal: true
      ulm_card_light_enable_slider: true
  card_media_player:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: "[[[\n  var icon =  entity.attributes.icon || \"mdi:speaker\"\
                  ;\n  if(entity.attributes.app_name){\n    var app = entity.attributes.app_name.toLowerCase();\n\
                  \    var icon = {\n      \"spotify\": \"mdi:spotify\",\n      \"\
                  google podcasts\": \"mdi:google-podcast\",\n      \"plex\": \"mdi:plex\"\
                  ,\n      \"soundcloud\": \"mdi:soundcloud\",\n      \"youtube music\"\
                  : \"mdi:youtube\",\n      \"oto music\": \"mdi:music-circle\",\n\
                  \      \"pandora\": \"mdi:pandora\",\n      \"netflix\": \"mdi:netflix\"\
                  ,\n      \"bluetooth audio\": \"mdi:bluetooth\"\n    }\n  }\n  return\
                  \ variables.ulm_card_media_player_icon || icon[app];\n]]]\n"
                styles:
                  card:
                  - background: none
                  icon:
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), 0.2)'\n]]]\n"
                  img_cell:
                  - background-color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'rgba(0, 0, 0, 0.2)'\n  : 'rgba(var(--color-theme), 0.05)'\n\
                      ]]]\n"
                type: custom:button-card
                variables:
                  ulm_card_media_player_enable_popup: '[[[ return variables.ulm_card_media_player_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: '[[[ return variables.ulm_translation_state ]]]'
                state:
                - name: "[[[\n  let name = variables.ulm_card_media_player_name ||\
                    \ states[entity.entity_id].attributes.friendly_name;\n  return\
                    \ name;\n]]]\n"
                  operator: template
                  value: '[[[ return entity.state == ''off'' ]]]'
                - label: "[[[\n  let label = variables.ulm_translation_on;\n  if (variables.ulm_card_media_player_more_info\
                    \ && states[entity.entity_id].attributes.media_artist\n      &&\
                    \ states[entity.entity_id].attributes.media_album_name) {\n  \
                    \    label = states[entity.entity_id].attributes.media_artist\
                    \ + \" • \" + states[entity.entity_id].attributes.media_album_name;\n\
                    \  } else if(states[entity.entity_id].attributes.media_album_name)\
                    \ {\n      label = states[entity.entity_id].attributes.media_album_name;\n\
                    \  } else if (states[entity.entity_id].attributes.media_artist)\
                    \ {\n      label = states[entity.entity_id].attributes.media_artist\n\
                    \  }\n  return label;\n]]]\n"
                  name: "[[[\n  let name = variables.ulm_card_media_player_name ||\
                    \ states[entity.entity_id].attributes.friendly_name;\n  if(states[entity.entity_id].attributes.media_title){\n\
                    \      name = states[entity.entity_id].attributes.media_title;\n\
                    \  }\n  return name;\n]]]\n"
                  operator: template
                  value: '[[[ return entity.state != ''off'' ]]]'
                styles:
                  card:
                  - padding: 0px
                  - background: none
                  - border-radius: '0'
                  - box-shadow: none
                  label:
                  - opacity: '1'
                  - filter: opacity(100%)
                  - text-shadow: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? '0 0 black'\n  : 'none'\n]]]\n"
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), .5)'\n]]]\n"
                  name:
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), 1)'\n]]]\n"
                  - text-shadow: 0 0 black
                type: custom:button-card
                variables:
                  ulm_card_media_player_enable_popup: '[[[ return variables.ulm_card_media_player_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
      item2:
        card:
          custom_fields:
            item1:
              card:
                hold_action:
                  action: "[[[\n    return variables.ulm_card_media_player_enable_popup\
                    \ ? \"fire-dom-event\" : \"more-info\";\n]]]\n"
                  browser_mod:
                    card:
                      template: popup_media_player_infos
                      type: custom:button-card
                      variables:
                        ulm_popup_media_player_entity: '[[[ return entity.entity_id
                          ]]]'
                    command: popup
                    hide_header: true
                    large: true
                icon: mdi:skip-previous
                styles:
                  card:
                  - background-color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'rgba(0, 0, 0, 0.2)'\n  : 'rgba(var(--color-theme),0.05)'\n\
                      ]]]\n"
                  icon:
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), 0.9)'\n]]]\n"
                tap_action:
                  action: call-service
                  service: media_player.media_previous_track
                  service_data:
                    entity_id: '[[[ return variables.ulm_card_media_player_player_controls_entity
                      ]]]'
                template: widget_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.ulm_card_media_player_player_controls_entity
                  ]]]'
                hold_action:
                  action: "[[[\n    return variables.ulm_card_media_player_enable_popup\
                    \ ? \"fire-dom-event\" : \"more-info\";\n]]]\n"
                  browser_mod:
                    card:
                      template: popup_media_player_infos
                      type: custom:button-card
                      variables:
                        ulm_popup_media_player_entity: '[[[ return entity.entity_id
                          ]]]'
                    command: popup
                    hide_header: true
                    large: true
                icon: mdi:pause
                state:
                - icon: mdi:play
                  value: paused
                - icon: mdi:play
                  value: 'off'
                styles:
                  card:
                  - background-color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'rgba(0, 0, 0, 0.2)'\n  : 'rgba(var(--color-theme),0.05)'\n\
                      ]]]\n"
                  icon:
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), 0.9)'\n]]]\n"
                tap_action:
                  action: call-service
                  service: media_player.media_play_pause
                  service_data:
                    entity_id: '[[[ return variables.ulm_card_media_player_player_controls_entity
                      ]]]'
                template: widget_icon
                type: custom:button-card
            item3:
              card:
                hold_action:
                  action: "[[[\n    return variables.ulm_card_media_player_enable_popup\
                    \ ? \"fire-dom-event\" : \"more-info\";\n]]]\n"
                  browser_mod:
                    card:
                      template: popup_media_player_infos
                      type: custom:button-card
                      variables:
                        ulm_popup_media_player_entity: '[[[ return entity.entity_id
                          ]]]'
                    command: popup
                    hide_header: true
                    large: true
                icon: mdi:skip-next
                styles:
                  card:
                  - background-color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'rgba(0, 0, 0, 0.2)'\n  : 'rgba(var(--color-theme),0.05)'\n\
                      ]]]\n"
                  icon:
                  - color: "[[[\n  return variables.ulm_card_media_player_enable_art\
                      \ && states[entity.entity_id].attributes.entity_picture != null\n\
                      \  ? 'white'\n  : 'rgba(var(--color-theme), 0.9)'\n]]]\n"
                tap_action:
                  action: call-service
                  service: media_player.media_next_track
                  service_data:
                    entity_id: '[[[ return variables.ulm_card_media_player_player_controls_entity
                      ]]]'
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - padding: 0px
            - background: none
            - border-radius: '0'
            - box-shadow: none
          template: list_3_items
          type: custom:button-card
      item3:
        card:
          card_mod: null
          entity: '[[[ return entity.entity_id ]]]'
          height: 42px
          mainSliderColor: "[[[\n  return variables.ulm_card_media_player_enable_art\
            \ && states[entity.entity_id].attributes.entity_picture != null\n  ? 'rgba(0,\
            \ 0, 0, 0.2)'\n  : 'rgba(var(--color-blue),1)'\n]]]\n"
          mainSliderColorOff: rgba(var(--color-theme),0.05)
          radius: 14px
          secondarySliderColor: "[[[\n  return variables.ulm_card_media_player_enable_art\
            \ && states[entity.entity_id].attributes.entity_picture != null\n  ? 'rgba(0,\
            \ 0, 0, 0.1)'\n  : 'rgba(var(--color-blue),0.2)'\n]]]\n"
          secondarySliderColorOff: rgba(var(--color-theme),0.05)
          style: "ha-card {\n  border-radius: 14px;\n  background-color: transparent;\n\
            \  box-shadow: none;\n}\n"
          thumbHorizontalPadding: 0px
          thumbVerticalPadding: 0px
          thumbWidth: 0px
          type: custom:my-slider
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      - background-blend-mode: multiply
      - background: "[[[\n  return variables.ulm_card_media_player_enable_art && states[entity.entity_id].attributes.entity_picture\
          \ != null\n  ? 'center / cover url(' + states[entity.entity_id].attributes.entity_picture\
          \ + ') rgba(0, 0, 0, 0.15)'\n  : ''\n]]]\n"
      custom_fields:
        item2:
        - display: "[[[\n  if(variables.ulm_card_media_player_enable_controls) {\n\
            \    if(variables.ulm_card_media_player_collapsible){\n      return entity.state\
            \ === \"off\" ? \"none\" : \"block\";\n    }\n    return \"block\";\n\
            \  }\n  return \"none\";\n]]]\n"
        item3:
        - display: "[[[\n  if(variables.ulm_card_media_player_enable_volume_slider)\
            \ {\n    if(variables.ulm_card_media_player_collapsible){\n      return\
            \ entity.state === \"off\" ? \"none\" : \"block\";\n    }\n    return\
            \ \"block\";\n  }\n  return \"none\";\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n  var areas = \"'item1'\";\n  if (variables.ulm_card_media_player_enable_controls){\n\
          \    areas = areas + \" 'item2'\";\n  }\n  if (variables.ulm_card_media_player_enable_volume_slider){\n\
          \    areas = areas + \" 'item3'\";\n  }\n  return areas;\n]]]\n"
      - grid-template-columns: 1fr
      - grid-template-rows: "[[[\n  var rows = \"min-content\";\n  if (variables.ulm_card_media_player_enable_controls){\n\
          \    rows = rows + \" min-content\";\n  }\n  if (variables.ulm_card_media_player_enable_volume_slider){\n\
          \    rows = rows + \" min-content\";\n  }\n  return rows;\n]]]\n"
      - row-gap: "[[[\n  if (!variables.ulm_card_media_player_collapsible) {\n   \
          \   return \"12px\";\n    } else {\n      return entity.state !== \"off\"\
          \ ? \"12px\" : \"0px\";\n    }\n]]]"
    template:
    - icon_more_info_new
    - ulm_actions_card
    - ulm_translation_engine
    triggers_update: all
    variables:
      ulm_card_media_player_collapsible: false
      ulm_card_media_player_enable_art: false
      ulm_card_media_player_enable_controls: false
      ulm_card_media_player_enable_popup: false
      ulm_card_media_player_enable_volume_slider: false
      ulm_card_media_player_icon: false
      ulm_card_media_player_more_info: false
      ulm_card_media_player_name: '[[[ return entity.attributes.friendly_name ]]]'
      ulm_card_media_player_player_controls_entity: '[[[ return entity.entity_id ]]]'
  card_media_player_art:
    template:
    - card_media_player
    variables:
      ulm_card_media_enable_art: true
  card_media_player_controls:
    template:
    - card_media_player
    variables:
      ulm_card_media_enable_controls: true
  card_media_player_with_control:
    entity: '[[[ return entity.entity_id ]]]'
    name: '[[[ return entity.attributes.friendly_name ]]]'
    template: card_media_player_art
  card_media_player_with_controls:
    template: card_media_player_controls
    variables:
      ulm_card_media_player_controls_entity: '[[[ return variables.ulm_card_media_player_with_controls_name
        ]]]'
      ulm_card_media_player_controls_name: '[[[ return variables.ulm_card_media_player_with_controls_entity
        ]]]'
  card_navigate:
    icon: '[[[ return variables.ulm_card_navigate_icon; ]]]'
    label: '[[[ return variables.ulm_card_navigate_title; ]]]'
    styles:
      grid:
      - grid-template-columns: min-content min-content
      icon:
      - color: rgba(var(--color-blue),0.7)
      label:
      - align-self: center
      - font-size: 14px
      - filter: opacity(100%)
    tap_action:
      action: navigate
      navigation_path: '[[[ return variables.ulm_card_navigate_path; ]]]'
    template:
    - icon_only
    - blue_no_state
  card_person:
    custom_fields:
      notification: "[[[\n  if (states[variables.ulm_card_person_entity].state !==\
        \ 'home') {\n    if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone1]?.attributes?.friendly_name)\
        \ {\n      var icon = states[variables.ulm_card_person_zone1].attributes.icon\
        \ !== null ? states[variables.ulm_card_person_zone1].attributes.icon : 'mdi:help-circle'\n\
        \      return '<ha-icon icon=\"' + icon + '\" style=\"width: 10px; height:\
        \ 10px; color: var(--primary-background-color);\"></ha-icon>';\n    } else\
        \ if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone2]?.attributes?.friendly_name)\
        \ {\n      var icon = states[variables.ulm_card_person_zone2].attributes.icon\
        \ !== null ? states[variables.ulm_card_person_zone2].attributes.icon : 'mdi:help-circle'\n\
        \      return '<ha-icon icon=\"' + icon + '\" style=\"width: 10px; height:\
        \ 10px; color: var(--primary-background-color);\"></ha-icon>';\n    } else\
        \ {\n      return '<ha-icon icon=\"mdi:home-minus\" style=\"width: 10px; height:\
        \ 10px; color: var(--primary-background-color);\"></ha-icon>';\n    }\n  }\
        \ else {\n    return '<ha-icon icon=\"mdi:home-variant\" style=\"width: 10px;\
        \ height: 10px; color: var(--primary-background-color);\"></ha-icon>';\n \
        \ }\n]]]\n"
    entity: '[[[ return variables.ulm_card_person_entity; ]]]'
    entity_picture: '[[[ return variables.ulm_card_person_use_entity_picture ? states[variables.ulm_card_person_entity].attributes.entity_picture
      : null ]]]'
    icon: mdi:face-man
    label: "[[[\n  if (variables.ulm_address){\n    return states[variables.ulm_address].state\n\
      \  } else {\n    let state = states[variables.ulm_card_person_entity].state;\n\
      \    let option = [\"home\", \"not_home\", \"unavailable\", \"unknown\"]\n \
      \   return (option.includes(state)) ? variables.ulm_translation_state : state\n\
      \  }\n]]]\n"
    name: '[[[ return states[variables.ulm_card_person_entity].attributes.friendly_name
      ]]]'
    show_entity_picture: '[[[ return variables.ulm_card_person_use_entity_picture
      ]]]'
    show_label: true
    show_name: true
    styles:
      custom_fields:
        notification:
        - border-radius: 50%
        - position: absolute
        - left: 38px
        - top: 8px
        - height: 16px
        - width: 16px
        - border: 2px solid var(--card-background-color)
        - font-size: 12px
        - line-height: 14px
        - background-color: "[[[\n  return (states[variables.ulm_card_person_entity].state\
            \ !== 'home') ? \"rgba(var(--color-green),1)\" : \"rgba(var(--color-blue),1)\"\
            ;\n]]]\n"
      icon:
      - color: rgba(var(--color-theme),0.9)
      - width: "[[[\n  return !variables.ulm_card_person_use_entity_picture ? \"20px\"\
          \ : \"42px\";\n]]]\n"
      - place-self: "[[[\n  return !variables.ulm_card_person_use_entity_picture ?\
          \ \"center\" : \"stretch stretch\";\n]]]\n"
    tap_action:
      action: more-info
      entity: '[[[ return variables.ulm_card_person_entity; ]]]'
    template:
    - icon_info_bg
    - ulm_translation_engine
    triggers_update: all
    variables:
      ulm_address: ''
      ulm_card_person_use_entity_picture: false
      ulm_card_person_zone1: ''
      ulm_card_person_zone2: ''
  card_power_outlet:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_power_outlet_icon ]]]'
                template:
                - yellow
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n  if (entity.state === \"on\" && variables.ulm_card_power_outlet_consumption_sensor\
                  \ !== null) {\n    return variables.ulm_translation_state + \" •\
                  \ \" + states[variables.ulm_card_power_outlet_consumption_sensor].state\
                  \ + \"W\";\n  } else {\n    return variables.ulm_translation_state;\n\
                  \  }\n]]]"
                name: '[[[ return variables.ulm_card_power_outlet_name ]]]'
                template:
                - yellow_no_card
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          - yellow
          type: custom:button-card
    template:
    - icon_more_info_new
    - yellow
    - ulm_translation_engine
    - ulm_actions_card
    triggers_update: all
    variables:
      ulm_card_power_outlet_consumption_sensor: null
      ulm_card_power_outlet_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_power_outlet_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_room:
    aspect_ratio: 1/1
    color: var(--google-grey-500)
    custom_fields:
      i1:
        card:
          entity: "[[[\n  if (variables.entity_1.entity_id) {\n    return variables.entity_1.entity_id;\n\
            \  }\n]]]\n"
          state:
          - operator: template
            styles:
              card:
              - display: none
            value: '[[[ return !variables.entity_1; ]]]'
          template: "[[[\n  var templates = ['widget_icon_room'];\n  if (variables?.entity_1?.templates?.length)\
            \ {\n    return ['widget_icon_room'].concat(variables.entity_1.templates);\n\
            \  }\n  return templates;\n]]]\n"
          type: custom:button-card
          variables: '[[[ return variables.entity_1; ]]]'
      i2:
        card:
          entity: "[[[\n  if (variables?.entity_2?.entity_id) {\n    return variables.entity_2.entity_id;\n\
            \  }\n]]]\n"
          state:
          - operator: template
            styles:
              card:
              - display: none
            value: '[[[ return !variables.entity_2; ]]]'
          template: "[[[\n  var templates = ['widget_icon_room'];\n  if (variables?.entity_2?.templates?.length)\
            \ {\n    return ['widget_icon_room'].concat(variables.entity_2.templates);\n\
            \  }\n  return templates;\n]]]\n"
          type: custom:button-card
          variables: '[[[ return variables.entity_2; ]]]'
      i3:
        card:
          entity: "[[[\n  if (variables?.entity_3?.entity_id) {\n    return variables.entity_3.entity_id;\n\
            \  }\n]]]\n"
          state:
          - operator: template
            styles:
              card:
              - display: none
            value: '[[[ return !variables.entity_3; ]]]'
          template: "[[[\n  var templates = ['widget_icon_room'];\n  if (variables?.entity_3?.templates?.length)\
            \ {\n    return ['widget_icon_room'].concat(variables.entity_3.templates);\n\
            \  }\n  return templates;\n]]]\n"
          type: custom:button-card
          variables: '[[[ return variables.entity_3; ]]]'
      i4:
        card:
          entity: "[[[\n  if (variables?.entity_4?.entity_id) {\n    return variables.entity_4.entity_id;\n\
            \  }\n]]]\n"
          state:
          - operator: template
            styles:
              card:
              - display: none
            value: '[[[ return !variables.entity_4; ]]]'
          template: "[[[\n  var templates = ['widget_icon_room'];\n  if (variables?.entity_4?.templates?.length)\
            \ {\n    return ['widget_icon_room'].concat(variables.entity_4.templates);\n\
            \  }\n  return templates;\n]]]\n"
          type: custom:button-card
          variables: '[[[ return variables.entity_4; ]]]'
      notification: "[[[\n  if (entity.state =='unavailable'){\n    return `<ha-icon\
        \ icon=\"mdi:exclamation\" style=\"width: 50%; height: 50%; color: var(--primary-background-color);\"\
        ></ha-icon>`\n  }\n]]]\n"
    double_tap_action:
      action: call-service
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    label: "[[[\n  if (variables.label_use_temperature) {\n    return (entity.attributes.current_temperature\
      \ || entity.attributes.temperature || entity.state || '-') + (entity.attributes.unit_of_measurement\
      \ || '°C');\n  } else if (variables.label_use_brightness) {\n    if (entity.state){\n\
      \      if (entity.state == \"off\"){\n        return variables.ulm_translation_state;\n\
      \      } else if (entity.state == \"on\"){\n        if (entity.attributes.brightness\
      \ != null){\n          var bri = Math.round(entity.attributes.brightness / 2.55);\n\
      \          return (bri ? bri : \"0\") + \"%\";\n        } else {\n         \
      \ return variables.ulm_translation_state;\n        }\n      }\n    } else {\n\
      \      return variables.ulm_translation_state;\n    }\n  } else {\n      return\
      \ variables.ulm_translation_state;\n  }\n]]]"
    show_icon: true
    show_label: true
    show_name: true
    size: 45%
    state:
    - styles:
        custom_fields:
          notification:
          - border-radius: 50%
          - border: 2px solid var(--card-background-color)
          - width: 24.5px
          - height: 24.5px
          - position: absolute
          - left: 50%
          - top: 50%
          - transform: translate(-50%,-50%)
          - margin-top: 35%
          - margin-left: -35%
          - line-height: 0
          - display: grid
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
      value: unavailable
    styles:
      card:
      - border-radius: 20px
      - box-shadow: var(--box-shadow)
      - padding: 5px
      custom_fields:
        i1:
        - border-radius: 50%
        - width: 80%
        - height: 80%
        - line-height: 0
        - display: grid
        i2:
        - border-radius: 50%
        - width: 80%
        - height: 80%
        - line-height: 0
        - display: grid
        i3:
        - border-radius: 50%
        - width: 80%
        - height: 80%
        - line-height: 0
        - display: grid
        i4:
        - border-radius: 50%
        - width: 80%
        - height: 80%
        - line-height: 0
        - display: grid
      grid:
      - grid-template-areas: '''n n n i1'' ''l l l i2'' ''i i . i3'' ''i i . i4'''
      - grid-template-columns: 1fr 1fr 1fr 1fr
      - grid-template-rows: 1fr 1fr 1fr 1fr
      - justify-items: center
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - width: 75%
      - height: 75%
      - max-width: none
      - max-height: none
      - position: absolute
      - left: 50%
      - top: 50%
      - transform: translate(-50%,-50%)
      - margin-top: 25%
      - margin-left: -25%
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
      - margin-top: -10%
      name:
      - justify-self: start
      - align-self: end
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      - margin-bottom: 10%
      state:
      - justify-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 6px
    template:
    - ulm_translation_engine
    variables:
      label_use_brightness: false
      label_use_temperature: true
  card_scenes_pill_welcome:
    color: var(--google-grey)
    custom_fields:
      item1:
        card:
          show_icon: true
          show_label: false
          show_name: false
          state:
          - operator: template
            styles:
              card:
              - overflow: visible
              - box-shadow: "[[[\n  if (hass.themes.darkMode){\n    return \"0px 2px\
                  \ 4px 0px rgba(0,0,0,0.80)\";\n  } else {\n    return \"var(--box-shadow)\"\
                  ;\n  }\n]]]\n"
            value: "[[[\n  return (entity.state !== 'on' && entity.state !== 'playing'\
              \ && entity.state != variables?.state)\n]]]\n"
          styles:
            card:
            - box-shadow: none
            - border-radius: 50px
            - padding: 5px
            grid:
            - grid-template-areas: i
            icon:
            - color: "[[[\n  var color = variables?.color\n  if(hass.themes.darkMode){var\
                \ color = \"#FAFAFA\";}\n  return `rgba(var(--color-${color}), 1)`;\n\
                ]]]\n"
            - width: 20px
            img_cell:
            - background-color: "[[[\n  var color = variables?.color\n  var opacity\
                \ = '0.20'\n  if(hass.themes.darkMode){var opacity = '1'}\n  return\
                \ `rgba(var(--color-${color}), ${opacity})`;\n]]]\n"
            - border-radius: 50%
            - width: 42px
            - height: 42px
          tap_action:
            action: "[[[\n  if(variables?.nav_path){\n    return \"navigate\"\n  }\
              \ else {\n    return \"call-service\"\n  }\n]]]\n"
            navigation_path: '[[[ return variables?.nav_path; ]]]'
            service: "[[[\n  if(entity.entity_id.startsWith(\"scene.\")){\n    return\
              \ \"scene.turn_on\"\n  }\n  else if(entity.entity_id.startsWith(\"media_player.\"\
              )){\n    return \"media_player.media_play_pause\"\n  }\n  else if(entity.entity_id.startsWith(\"\
              input_select.\")){\n    return \"input_select.select_option\"\n  } else\
              \ {\n    return \"homeassistant.toggle\"\n  }\n]]]\n"
            service_data: "[[[\n  var obj;\n  if( entity.entity_id.startsWith(\"input_select.\"\
              ) )\n    obj = { entity_id: entity.entity_id, option: variables.state\
              \ };\n  else\n    obj = { entity_id: entity.entity_id };\n  return obj;\n\
              ]]]\n"
          type: custom:button-card
      item2:
        card:
          show_icon: false
          show_label: false
          styles:
            card:
            - box-shadow: none
            - padding: 0px 5px 5px 5px
            - margin-top: -5px
            - border-radius: 50px
            grid:
            - grid-template-areas: n
            name:
            - font-weight: bold
            - font-size: 9.5px
            - width: 33px
            - padding-bottom: 7px
          tap_action:
            action: "[[[\n  if(variables?.nav_path){\n    return \"navigate\"\n  }\
              \ else {\n    return \"call-service\"\n  }\n]]]\n"
            navigation_path: '[[[ return variables?.nav_path; ]]]'
            service: "[[[\n  if(entity.entity_id.startsWith(\"scene.\")){\n    return\
              \ \"scene.turn_on\"\n  }\n  else if(entity.entity_id.startsWith(\"media_player.\"\
              )){\n    return \"media_player.media_play_pause\"\n  }\n  else if(entity.entity_id.startsWith(\"\
              input_select.\")){\n    return \"input_select.select_option\"\n  } else\
              \ {\n    return \"homeassistant.toggle\"\n  }\n]]]\n"
            service_data: "[[[\n  var obj;\n  if( entity.entity_id.startsWith(\"input_select.\"\
              ) )\n    obj = { entity_id: entity.entity_id, option: variables.state\
              \ };\n  else\n    obj = { entity_id: entity.entity_id };\n  return obj;\n\
              ]]]\n"
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    state:
    - operator: template
      styles:
        card:
        - overflow: visible
        - box-shadow: none
      value: "[[[\n  return (entity.state !== 'on' && entity.state !== 'playing' &&\
        \ entity.state != variables?.state)\n]]]\n"
    styles:
      card:
      - border-radius: 50px
      - place-self: center
      - width: 52px
      - height: 84px
      - box-shadow: "[[[\n  if (hass.themes.darkMode){\n    return \"0px 2px 4px 0px\
          \ rgba(0,0,0,0.80)\";\n  } else {\n    return \"var(--box-shadow)\";\n \
          \ }\n]]]\n"
      grid:
      - grid-template-areas: '''item1'' ''item2'''
      - grid-template-columns: min-content
      - grid-template-rows: 1fr 1fr
      - row-gap: 12px
      - justify-items: center
      - column-gap: auto
  card_scenes_welcome:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_1.entity_id ]]]'
                icon: '[[[ return variables.entity_1.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_1.entity_id ]]]'
                name: '[[[ return variables.entity_1.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_1.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_1; ]]]'
      item2:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_2.entity_id ]]]'
                icon: '[[[ return variables.entity_2.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_2.entity_id ]]]'
                name: '[[[ return variables.entity_2.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_2.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_2; ]]]'
      item3:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_3.entity_id ]]]'
                icon: '[[[ return variables.entity_3.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_3.entity_id ]]]'
                name: '[[[ return variables.entity_3.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_3.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_3; ]]]'
      item4:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_4.entity_id ]]]'
                icon: '[[[ return variables.entity_4.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_4.entity_id ]]]'
                name: '[[[ return variables.entity_4.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_4.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_4; ]]]'
      item5:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_5.entity_id ]]]'
                icon: '[[[ return variables.entity_5.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_5.entity_id ]]]'
                name: '[[[ return variables.entity_5.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_5.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_5; ]]]'
      item6:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_6.entity_id ]]]'
                icon: '[[[ return variables.entity_6.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_6.entity_id ]]]'
                name: '[[[ return variables.entity_6.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_6.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_6; ]]]'
      item7:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.entity_7.entity_id ]]]'
                icon: '[[[ return variables.entity_7.icon ]]]'
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.entity_7.entity_id ]]]'
                name: '[[[ return variables.entity_7.name ]]]'
                type: custom:button-card
          entity: '[[[ return variables.entity_7.entity_id ]]]'
          template: card_scenes_pill_welcome
          type: custom:button-card
          variables: '[[[ return variables.entity_7; ]]]'
    show_icon: false
    show_label: false
    show_name: true
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      - overflow: visible
      custom_fields:
        item1:
        - display: '[[[ return (variables.entity_1.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item2:
        - display: '[[[ return (variables.entity_2.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item3:
        - display: '[[[ return (variables.entity_3.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item4:
        - display: '[[[ return (variables.entity_4.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item5:
        - display: '[[[ return (variables.entity_5.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item6:
        - display: '[[[ return (variables.entity_6.entity_id != '''') ? ''block''
            : ''none'' ]]]'
        item7:
        - display: '[[[ return (variables.entity_7.entity_id != '''') ? ''block''
            : ''none'' ]]]'
      grid:
      - grid-template-areas: "[[[\n  var pills = []\n  const entities = [variables.entity_1.entity_id,\
          \ variables.entity_2.entity_id, variables.entity_3.entity_id, variables.entity_4.entity_id,\
          \ variables.entity_5.entity_id, variables.entity_6.entity_id, variables.entity_7.entity_id]\n\
          \  function entity_check(item) {\n      if (item != \"\") {\n          pills.push(\"\
          item\" + (pills.length+1))\n      }\n  }\n  entities.forEach(entity_check)\n\
          \  return pills.join(\" \")\n]]]\n"
      - display: flex
      - grid-template-rows: min-content
      - justify-content: space-evenly
    variables:
      entity_1:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_2:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_3:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_4:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_5:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_6:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_7:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
  card_scenes_welcome_auto:
    custom_fields:
      item1:
        card:
          card:
            columns: 5
            square: false
            type: grid
          card_param: cards
          filter:
            include:
            - domain: light
              options:
                custom_fields:
                  item1:
                    card:
                      entity: this.entity_id
                      styles:
                        icon:
                        - color: "[[[\n  var color = variables.colors\n  if(hass.themes.darkMode){var\
                            \ color = \"#FAFAFA\";}\n  return `rgba(var(--color-${color}),\
                            \ 1)`;\n]]]\n"
                        - width: 20px
                        img_cell:
                        - background-color: "[[[\n  var color = variables.colors\n\
                            \  var opacity = '0.20'\n  if(hass.themes.darkMode){var\
                            \ opacity = '1'}\n  return `rgba(var(--color-${color}),\
                            \ ${opacity})`;\n]]]\n"
                      type: custom:button-card
                  item2:
                    card:
                      entity: this.entity_id
                      type: custom:button-card
                template: card_scenes_pill_welcome
                type: custom:button-card
          sort:
            count: 5
          type: custom:auto-entities
    show_icon: false
    show_label: false
    show_name: true
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: item1
      - display: flex
      - justify-content: center
    variables:
      colors: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
        \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
        \ color;\n]]]\n"
  card_script:
    icon: '[[[ return variables.ulm_card_script_icon; ]]]'
    label: '[[[ return variables.ulm_card_script_title; ]]]'
    styles:
      grid:
      - grid-template-columns: min-content min-content
      icon:
      - color: rgba(var(--color-blue),0.7)
      img_cell:
      - background-color: rgba(var(--color-blue), 0.2)
      label:
      - align-self: center
      - font-size: 14px
      - filter: opacity(100%)
    template:
    - icon_only
  card_thermostat:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_thermostat_icon ]]]'
                state:
                - operator: template
                  styles:
                    icon:
                    - color: rgba(var(--color-red),1)
                    img_cell:
                    - background-color: rgba(var(--color-red),0.2)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'heating')\n\
                    ]]]\n"
                - operator: template
                  styles:
                    icon:
                    - color: rgba(var(--color-blue),1)
                    img_cell:
                    - background-color: rgba(var(--color-blue),0.2)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling')\n\
                    ]]]\n"
                type: custom:button-card
                variables:
                  ulm_card_thermostat_enable_popup: '[[[ return variables.ulm_card_thermostat_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n    var label = variables.ulm_translation_state;\n  \
                  \  if((entity.attributes.temperature || entity.attributes.target_temp_high\
                  \ != null) && !variables.ulm_card_thermostat_enable_display_temperature){\n\
                  \      return variables.ulm_translation_hvac;\n    }\n    return\
                  \ label;\n]]]"
                name: '[[[ return variables.ulm_card_thermostat_name ]]]'
                type: custom:button-card
                variables:
                  ulm_card_thermostat_enable_popup: '[[[ return variables.ulm_card_thermostat_enable_popup;
                    ]]]'
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
      item2:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:minus
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_temperature
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    target_temp_high: "[[[\n  if (entity.attributes.target_temp_low\
                      \ == null) {\n    return 0;\n  } else {\n    const unit = hass.config.unit_system.temperature\n\
                      \    const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n    return (parseFloat(entity.attributes.target_temp_high)\
                      \ - step)\n  }\n]]]\n"
                    target_temp_low: "[[[\n  if (entity.attributes.target_temp_low\
                      \ == null) {\n    return 0;\n  } else {\n    const unit = hass.config.unit_system.temperature\n\
                      \    const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n    const new_temp =  (parseFloat(entity.attributes.target_temp_high)\
                      \ - step)\n    return (new_temp - variables.ulm_card_thermostat_minimum_temp_spread\
                      \ < entity.attributes.target_temp_low ? new_temp - variables.ulm_card_thermostat_minimum_temp_spread\
                      \ : entity.attributes.target_temp_low);\n  }\n]]]\n"
                    temperature: "[[[\n  if (entity.attributes.temperature == null)\
                      \ {\n    return 0;\n  } else {\n    const unit = hass.config.unit_system.temperature\n\
                      \    const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n    return (parseFloat(states[entity.entity_id].attributes.temperature)\
                      \ - step)\n  }\n]]]\n"
                template: widget_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n    var temperature = entity.attributes.temperature ||\
                  \ entity.attributes.target_temp_high;\n    if (temperature == null)\
                  \ {\n      var temperature = '-';\n    }\n    return temperature\
                  \ + hass.config.unit_system.temperature;\n]]]"
                show_icon: false
                show_label: true
                show_name: false
                styles:
                  card:
                  - background: none
                  - box-shadow: none
                type: custom:button-card
            item3:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:plus
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_temperature
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    target_temp_high: "[[[\n  if (entity.attributes.target_temp_high\
                      \ == null) {\n    return 0;\n  } else {\n    const unit = hass.config.unit_system.temperature\n\
                      \    const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n    return (parseFloat(entity.attributes.target_temp_high)\
                      \ + step)\n  }\n]]]\n"
                    target_temp_low: "[[[\n  if (entity.attributes.target_temp_low\
                      \ == null) {\n    return 0;\n  } else {\n    return entity.attributes.target_temp_low;\n\
                      \  }\n]]]\n"
                    temperature: "[[[\n  if (entity.attributes.temperature == null)\
                      \ {\n    return 0;\n  } else {\n    const unit = hass.config.unit_system.temperature\n\
                      \    const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n    return (parseFloat(states[entity.entity_id].attributes.temperature)\
                      \ + step)\n  }\n]]]\n"
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_3_items
          type: custom:button-card
      item3:
        card:
          custom_fields:
            auto:
              card:
                icon: mdi:autorenew
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-green),0.5)
                    icon:
                    - color: rgba(var(--color-green),1)
                  value: "[[[\n  return entity.state == \"auto\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: auto
                template: widget_icon
                type: custom:button-card
            cool:
              card:
                icon: mdi:snowflake
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-blue),0.5)
                    icon:
                    - color: rgba(var(--color-blue),1)
                  value: "[[[\n  return entity.state == \"cool\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: cool
                template: widget_icon
                type: custom:button-card
            dry:
              card:
                icon: mdi:water
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-yellow),0.5)
                    icon:
                    - color: rgba(var(--color-yellow),1)
                  value: "[[[\n  return entity.state == \"dry\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: dry
                template: widget_icon
                type: custom:button-card
            fan_entity_only:
              card:
                icon: mdi:fan
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.5)
                    icon:
                    - color: rgba(var(--color-green),1)
                  value: "[[[\n  return ((variables.ulm_card_thermostat_fan_entity\
                    \ !== null) && states[variables.ulm_card_thermostat_fan_entity].state\
                    \ == 'on')\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: fan.toggle
                  service_data:
                    entity_id: '[[[ return variables.ulm_card_thermostat_fan_entity
                      !== null ? states[variables.ulm_card_thermostat_fan_entity].entity_id
                      : null ]]]'
                template: widget_icon
                type: custom:button-card
            fan_only:
              card:
                icon: mdi:fan
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.5)
                    icon:
                    - color: rgba(var(--color-green),1)
                  value: "[[[\n  return entity.state == \"fan_only\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: fan_only
                template: widget_icon
                type: custom:button-card
            heat:
              card:
                icon: mdi:fire
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-red),0.5)
                    icon:
                    - color: rgba(var(--color-red),1)
                  value: "[[[\n  return entity.state == \"heat\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: heat
                template: widget_icon
                type: custom:button-card
            heat_cool:
              card:
                icon: mdi:sun-snowflake
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-purple),0.5)
                    icon:
                    - color: rgba(var(--color-purple),1)
                  value: "[[[\n  return entity.state == \"heat_cool\"\n]]]\n"
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    hvac_mode: heat_cool
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - box-shadow: none
            - padding: 0px
            - background: none
            custom_fields:
              auto:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  auto\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              cool:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  cool\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              dry:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  dry\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              fan_entity_only:
              - display: "[[[\n  if (!states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  fan_only\") && (variables.ulm_card_thermostat_fan_entity !== null))\
                  \ {\n      return \"block\";\n  } else {\n      return \"none\"\
                  ;\n  }\n]]]\n"
              fan_only:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  fan_only\")) {\n      return \"block\";\n  } else {\n      return\
                  \ \"none\";\n  }\n]]]\n"
              heat:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  heat\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              heat_cool:
              - display: "[[[\n  if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                  heat_cool\")) {\n      return \"block\";\n  } else {\n      return\
                  \ \"none\";\n  }\n]]]\n"
            grid:
            - grid-template-areas: "[[[\n      var areas = [];\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                auto\")) {\n          areas.push(\"auto\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                heat\")) {\n          areas.push(\"heat\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                cool\")) {\n          areas.push(\"cool\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                dry\")) {\n          areas.push(\"dry\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                heat_cool\")) {\n          areas.push(\"heat_cool\");\n      }\n \
                \     if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                fan_only\")) {\n          areas.push(\"fan_only\");\n      }\n   \
                \   if (!states[entity.entity_id].attributes.hvac_modes.includes(\"\
                fan_only\") && (variables.ulm_card_thermostat_fan_entity !== null))\
                \ {\n          areas.push(\"fan_entity_only\");\n      }\n      return\
                \ \"\\\"\" + areas.join(\" \") + \"\\\"\";\n]]]\n"
            - grid-template-columns: "[[[\n      var columns = [];\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                auto\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                heat\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                cool\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                dry\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[entity.entity_id].attributes.hvac_modes.includes(\"\
                heat_cool\")) {\n          columns.push(\"1fr\");\n      }\n     \
                \ if (states[entity.entity_id].attributes.hvac_modes.includes(\"fan_only\"\
                )) {\n          columns.push(\"1fr\");\n      }\n      if (!states[entity.entity_id].attributes.hvac_modes.includes(\"\
                fan_only\") && (variables.ulm_card_thermostat_fan_entity !== null))\
                \ {\n          columns.push(\"1fr\");\n      }\n      return columns.join(\"\
                \ \");\n]]]\n"
            - grid-template-rows: min-content
            - column-gap: 7px
          type: custom:button-card
      item4:
        card:
          entity: '[[[ return entity.entity_id ]]]'
          label: "[[[\n    var temperature = entity.attributes.current_temperature;\n\
            \    if (temperature == null) {\n      var temperature = '-';\n    }\n\
            \    return temperature + hass.config.unit_system.temperature;\n]]]"
          show_icon: false
          show_label: true
          show_name: false
          styles:
            card:
            - background: none
            - box-shadow: none
          type: custom:button-card
      low_temp_adjustment:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:minus
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_temperature
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    target_temp_high: '[[[ return entity.attributes.target_temp_high
                      ]]]'
                    target_temp_low: "[[[\n  const unit = hass.config.unit_system.temperature\n\
                      \  const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n  return (parseFloat(entity.attributes.target_temp_low)\
                      \ - step)\n]]]\n"
                template: widget_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n    var temperature = entity.attributes.target_temp_low;\n\
                  \    if (temperature == null) {\n      var temperature = '-';\n\
                  \    }\n    return temperature + hass.config.unit_system.temperature;\n\
                  ]]]"
                show_icon: false
                show_label: true
                show_name: false
                styles:
                  card:
                  - background: none
                  - box-shadow: none
                type: custom:button-card
            item3:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:plus
                state:
                - operator: template
                  styles:
                    card:
                    - background-color: rgba(var(--color-theme),0.15)
                  value: "[[[\n  return (entity.attributes.hvac_action == 'cooling'\
                    \ || entity.attributes.hvac_action == 'heating') && variables.ulm_card_thermostat_enable_background_color\n\
                    ]]]\n"
                tap_action:
                  action: call-service
                  service: climate.set_temperature
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                    target_temp_high: "[[[\n  const unit = hass.config.unit_system.temperature\n\
                      \  const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n  const new_temp = (parseFloat(entity.attributes.target_temp_low)\
                      \ + step)\n  return (new_temp + variables.ulm_card_thermostat_minimum_temp_spread\
                      \ > entity.attributes.target_temp_high ? new_temp + variables.ulm_card_thermostat_minimum_temp_spread\
                      \ : entity.attributes.target_temp_high)\n]]]\n"
                    target_temp_low: "[[[\n  const unit = hass.config.unit_system.temperature\n\
                      \  const step = entity.attributes.target_temp_step || (unit\
                      \ == '°F' ? 1.0 : 0.5)\n  return (parseFloat(entity.attributes.target_temp_low)\
                      \ + step)\n]]]\n"
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_3_items
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    state:
    - operator: template
      styles:
        card:
        - background-color: rgba(255,165,0,0.75)
      value: "[[[\n  return (entity.attributes.hvac_action == 'heating' && variables.ulm_card_thermostat_enable_background_color)\n\
        ]]]\n"
    - operator: template
      styles:
        card:
        - background-color: rgba(0,191,255,0.75)
      value: "[[[\n  return (entity.attributes.hvac_action == 'cooling' && variables.ulm_card_thermostat_enable_background_color)\n\
        ]]]\n"
    - operator: template
      styles:
        card:
        - background-color: rgba(var(--color-background-yellow),var(--opacity-bg))
      value: "[[[\n  return entity.state != 'off'\n]]]\n"
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      custom_fields:
        item2:
        - display: "[[[\n    if ( !(variables.ulm_card_thermostat_enable_collapse\
            \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls)\
            \ {\n          return \"block\";\n      } else {\n          return \"\
            none\";\n      }\n]]]\n"
        item3:
        - display: "[[[\n    if (variables.ulm_card_thermostat_enable_horizontal)\
            \ {\n      return \"none\";\n    }\n    if ( !(variables.ulm_card_thermostat_enable_collapse\
            \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_hvac_modes)\
            \ {\n      return \"block\";\n    } else {\n      return \"none\";\n \
            \   }\n]]]\n"
        item4:
        - display: "[[[\n    if (variables.ulm_card_thermostat_enable_horizontal)\
            \ {\n      return \"none\";\n    }\n    if (variables.ulm_card_thermostat_enable_display_temperature)\
            \ {\n      return \"block\";\n    } else {\n      return \"none\";\n \
            \   }\n]]]\n"
        low_temp_adjustment:
        - display: "[[[\n    if ( !(variables.ulm_card_thermostat_enable_collapse\
            \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls\
            \ && entity.attributes.target_temp_high != null) {\n          return \"\
            block\";\n      } else {\n          return \"none\";\n      }\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n      var areas = [];\n      if (variables.ulm_card_thermostat_enable_horizontal)\
          \ {\n        return \"\\\"item1 item2\\\"\";\n      }\n      if (variables.ulm_card_thermostat_enable_display_temperature)\
          \ {\n          areas.push(\"item1 item4\");\n      } else {\n        areas.push(\"\
          item1 item1\");\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls)\
          \ {\n          areas.push(\"item2 item2\");\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls\
          \ && entity.attributes.target_temp_high != null) {\n          areas.push(\"\
          low_temp_adjustment low_temp_adjustment\");\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_hvac_modes)\
          \ {\n          areas.push(\"item3 item3\");\n      }\n      return \"\\\"\
          \" + areas.join(\"\\\" \\\"\") + \"\\\"\";\n]]]\n"
      - grid-template-columns: "[[[\n        return variables.ulm_card_thermostat_enable_horizontal\
          \ ? \"1fr 1fr\" : \"2fr 1fr\";\n]]]\n"
      - grid-template-rows: "[[[\n      var rows = [];\n      rows.push(\"min-content\"\
          );\n      if (variables.ulm_card_thermostat_enable_horizontal) {\n     \
          \   return \"min-content\";\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls)\
          \ {\n          rows.push(\"min-content\");\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_controls\
          \ && entity.attributes.target_temp_high != null) {\n          rows.push(\"\
          min-content\");\n      }\n      if ( !(variables.ulm_card_thermostat_enable_collapse\
          \ && entity.state == \"off\") && variables.ulm_card_thermostat_enable_hvac_modes)\
          \ {\n          rows.push(\"min-content\");\n      }\n      return rows.join(\"\
          \ \");\n]]]\n"
      - row-gap: 12px
    template:
    - ulm_translation_engine
    - icon_more_info_new
    - ulm_actions_card
    variables:
      ulm_card_thermostat_enable_background_color: false
      ulm_card_thermostat_enable_collapse: false
      ulm_card_thermostat_enable_controls: false
      ulm_card_thermostat_enable_display_temperature: false
      ulm_card_thermostat_enable_horizontal: false
      ulm_card_thermostat_enable_hvac_modes: false
      ulm_card_thermostat_enable_popup: false
      ulm_card_thermostat_fan_entity: null
      ulm_card_thermostat_icon: '[[[ return ''mdi:thermometer'' ]]]'
      ulm_card_thermostat_minimum_temp_spread: 1
      ulm_card_thermostat_name: '[[[ return entity.attributes.friendly_name ]]]'
  card_title:
    show_icon: false
    show_label: true
    show_name: true
    styles:
      card:
      - background-color: rgba(0,0,0,0)
      - box-shadow: none
      - height: auto
      - width: auto
      - margin-top: 6px
      - margin-left: 18px
      - margin-bottom: 0px
      - padding: 6px
      grid:
      - grid-template-areas: '''n'' ''l'''
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
      label:
      - justify-self: start
      - font-weight: bold
      - font-size: 1rem
      - opacity: '0.4'
      name:
      - justify-self: start
      - font-weight: bold
      - font-size: 1.5rem
    tap_action:
      action: none
  card_title_welcome:
    show_icon: false
    show_label: true
    show_name: true
    styles:
      card:
      - background-color: rgba(0,0,0,0)
      - box-shadow: none
      - height: auto
      - width: auto
      - margin-top: -10px
      - margin-left: 16px
      - margin-bottom: -15px
      grid:
      - grid-template-areas: '''n'' ''l'''
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
      label:
      - justify-self: start
      - font-weight: bold
      - font-size: 1rem
      - opacity: '0.4'
      name:
      - justify-self: start
      - font-weight: bold
      - font-size: 20px
    tap_action:
      action: none
  card_topbar_welcome:
    custom_fields:
      item1:
        card:
          entity: '[[[ return variables.ulm_card_welcome_scenes_collapse ]]]'
          icon: mdi:chevron-up
          show_icon: true
          state:
          - icon: mdi:chevron-down
            styles:
              icon:
              - color: rgb(var(--color-theme))
            value: 'on'
          styles:
            card:
            - box-shadow: "[[[\n  if (hass.themes.darkMode){\n    return \"0px 2px\
                \ 4px 0px rgba(0,0,0,0.80)\";\n  } else {\n    return \"var(--box-shadow)\"\
                ;\n  }\n]]]\n"
            grid:
            - grid-template-areas: '''i'''
          tap_action:
            action: call-service
            service: input_boolean.toggle
            service_data:
              entity_id: '[[[ return variables.ulm_card_welcome_scenes_collapse ]]]'
          template: chips
          type: custom:button-card
      item2:
        card:
          entity: '[[[ return variables.ulm_weather]]]'
          styles:
            card:
            - width: 100px
            - box-shadow: "[[[\n  if (hass.themes.darkMode){\n    return \"0px 2px\
                \ 4px 0px rgba(0,0,0,0.80)\";\n  } else {\n    return \"var(--box-shadow)\"\
                ;\n  }\n]]]\n"
          template: chip_weather_date
          type: custom:button-card
          variables:
            ulm_language: '[[[ return variables.ulm_language ]]]'
            ulm_weather: '[[[ return variables.ulm_weather ]]]'
      item3:
        card:
          styles:
            card:
            - align-self: end
            - box-shadow: "[[[\n  if (hass.themes.darkMode){\n    return \"0px 2px\
                \ 4px 0px rgba(0,0,0,0.80)\";\n  } else {\n    return \"var(--box-shadow)\"\
                ;\n  }\n]]]\n"
          tap_action:
            action: navigate
            navigation_path: /config/dashboard
          template: chip_mdi_icon_only
          type: custom:button-card
          variables:
            ulm_chip_mdi_icon_only_icon: mdi:cog-outline
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: none
      - box-shadow: none
      - padding: 12px
      - background: none
      grid:
      - grid-template-areas: item1 item2 item3
      - justify-content: space-between
      - display: flex
  card_vacuum:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: '[[[ return variables.ulm_card_vacuum_icon ]]]'
                styles:
                  icon:
                  - color: "[[[\n  return variables.ulm_card_vacuum_light_color +\
                      \ \", 1)\";\n]]]\n"
                  img_cell:
                  - background-color: "[[[\n  return variables.ulm_card_vacuum_light_color\
                      \ + \", 0.05)\";\n]]]\n"
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                label: "[[[\n  let label = entity.attributes.friendly_name\n  if(variables.ulm_card_vacuum_label){\n\
                  \    label = variables.ulm_card_vacuum_label;\n  } else {\n    label\
                  \ = variables.ulm_translation_state;\n  }\n  return label;\n]]]\n"
                name: '[[[ return variables.ulm_card_vacuum_name ]]]'
                type: custom:button-card
                variables:
                  ulm_input_select: '[[[ return variables.ulm_input_select; ]]]'
                  ulm_input_select_option: '[[[ return variables.ulm_input_select_option;
                    ]]]'
          template:
          - icon_more_info
          type: custom:button-card
      item2:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:play
                state:
                - icon: mdi:stop
                  operator: template
                  tap_action:
                    action: call-service
                    service: vacuum.stop
                    service_data:
                      entity_id: '[[[ return entity.entity_id ]]]'
                  value: '[[[ return entity.state.toLowerCase() === ''cleaning'' ]]]'
                tap_action:
                  action: call-service
                  service: "[[[\n  return entity.state.toLowerCase() === 'cleaning'\
                    \ ? \"vacuum.stop\" : \"vacuum.start\";\n]]]\n"
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:home-map-marker
                tap_action:
                  action: call-service
                  service: vacuum.return_to_base
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
            item3:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                icon: mdi:map-marker
                state: null
                tap_action:
                  action: call-service
                  service: vacuum.locate
                  service_data:
                    entity_id: '[[[ return entity.entity_id ]]]'
                template: widget_icon
                type: custom:button-card
            item4:
              card:
                entity: '[[[ return variables.ulm_card_vacuum_room ]]]'
                icon: '[[[ return variables.ulm_card_vacuum_room_icon ]]]'
                tap_action:
                  action: call-service
                  service: script.turn_on
                  service_data:
                    entity_id: '[[[ return variables.ulm_card_vacuum_room ]]]'
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - background: none
            - border-radius: '0'
            custom_fields:
              item4:
              - display: '[[[ return variables.ulm_card_vacuum_room ? "block" : "none";
                  ]]]

                  '
          template: '[[[ return variables.ulm_card_vacuum_room ? "list_4_items" :
            "list_3_items"; ]]]

            '
          type: custom:button-card
      item3:
        card:
          camera_view: live
          entity: '[[[ return variables.ulm_card_vacuum_camera ]]]'
          show_name: false
          show_state: false
          type: picture-entity
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      - background-color: "[[[\n  if(hass.themes.darkMode){\n    return \"variables.ulm_card_vacuum_light_color\"\
          \ + \", 0.1)\";\n    }\n]]]\n"
      custom_fields:
        item3:
        - display: "[[[\n  return variables.ulm_card_vacuum_camera_display ? \"block\"\
            \ : \"none\";\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n  return variables.ulm_card_vacuum_camera_display\
          \ ? \"'item1' 'item3' 'item2'\" : \"'item1' 'item2'\";\n]]]\n"
      - grid-template-columns: 1fr
      - grid-template-rows: "[[[\n  return variables.ulm_card_vacuum_camera_display\
          \ ? \"repeat(3, min-content)\" : \"repeat(2, min-content)\";\n]]]\n"
      - row-gap: 12px
    template:
    - icon_more_info_new
    - ulm_translation_engine
    - ulm_actions_card
    triggers_update: all
    variables:
      ulm_card_vacuum_camera: null
      ulm_card_vacuum_camera_display: "[[[\n  if (variables?.ulm_card_vacuum_camera){\n\
        \    if (variables?.ulm_card_vacuum_camera_toggle) {\n      if (entity.state.toLowerCase()\
        \ === 'cleaning'){\n        return \"true\";\n      }\n    } else {\n    \
        \  return \"true\";\n    }\n  }\n]]]\n"
      ulm_card_vacuum_camera_toggle: null
      ulm_card_vacuum_icon: '[[[ return entity.attributes.icon ]]]'
      ulm_card_vacuum_light_color: "[[[\n  var state = entity.state.toLowerCase();\n\
        \  var colors = {\n    \"cleaning\": \"rgba(var(--color-blue)\",\n    \"paused\"\
        : \"rgba(var(--color-green)\",\n    \"mopping\": \"rgba(var(--color-yellow)\"\
        ,\n    \"returning\": \"rgba(var(--color-purple)\",\n    \"error\": \"rgba(var(--color-red)\"\
        ,\n    \"default\": \"rgba(var(--color-theme)\"\n  }\n  return (colors[state]\
        \ || colors[\"default\"]);\n]]]\n"
      ulm_card_vacuum_name: '[[[ return entity.attributes.friendly_name ]]]'
      ulm_card_vacuum_room: null
      ulm_card_vacuum_room_icon: '[[[ return entity.attributes.icon ]]]'
  card_vertical_button:
    label: ''
    name: "[[[\n  if( entity.entity_id.startsWith(\"input_select.\") )\n    return\
      \ variables.ulm_card_vertical_button_state;\n  else if( entity.entity_id.startsWith(\"\
      input_boolean.\") )\n    return \"\";\n  return entity.state;\n]]]\n"
    show_label: true
    size: 20px
    state:
    - operator: template
      styles:
        card:
        - background-color: '[[[ return `rgba(var(--color-background-${variables.ulm_card_vertical_button_color}),
            var(--opacity-bg))`; ]]]'
        icon:
        - color: '[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}),
            1)`; ]]]'
        img_cell:
        - background-color: '[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}),
            0.2)`; ]]]'
        label:
        - color: '[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}-text),
            1)`; ]]]'
        name:
        - color: '[[[ return `rgba(var(--color-${variables.ulm_card_vertical_button_color}-text),
            1)`; ]]]'
      value: "[[[\n  return entity.state == variables.ulm_card_vertical_button_state;\n\
        ]]]\n"
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 10px 0px 8px 0px
      grid:
      - grid-template-areas: '''i'' ''n'' ''l'''
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: center
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      name:
      - margin-top: 10px
      - justify-self: center
      - font-weight: bold
      - font-size: 14px
    tap_action:
      action: call-service
      service: "[[[\n  if( entity.entity_id.startsWith(\"input_select.\") )\n    return\
        \ \"input_select.select_option\";\n  if( entity.entity_id.startsWith(\"input_boolean.\"\
        ) )\n    return \"input_boolean.toggle\";\n  if( entity.entity_id.startsWith(\"\
        switch.\") )\n    return \"switch.toggle\";\n  if( entity.entity_id.startsWith(\"\
        light.\") )\n    return \"light.toggle\";\n  if( entity.entity_id.startsWith(\"\
        automation.\") )\n    return \"automation.toggle\";\n  if( entity.entity_id.startsWith(\"\
        input_button.\") )\n    return \"input_button.press\";\n  // If we need to\
        \ support other entities we can add these options here.\n  return \"\";\n\
        ]]]\n"
      service_data: "[[[\n  var obj;\n  if( entity.entity_id.startsWith(\"input_select.\"\
        ) )\n    obj = { entity_id: entity.entity_id, option: variables.ulm_card_vertical_button_state\
        \ };\n  else\n    obj = { entity_id: entity.entity_id };\n  return obj;\n\
        ]]]\n"
    variables:
      ulm_card_vertical_button_color: blue
      ulm_card_vertical_button_state: 'on'
  card_weather:
    custom_fields:
      item1:
        card:
          backdrop: '[[[ return variables.ulm_card_weather_backdrop ]]]'
          entity: '[[[ return entity.entity_id; ]]]'
          name: '[[[ return variables.ulm_card_weather_name || entity.attributes.friendly_name
            ]]]'
          primary_info: '[[[ return variables.ulm_card_weather_primary_info ]]]'
          secondary_info: '[[[ return variables.ulm_card_weather_secondary_info ]]]'
          style: "ha-card {\n  border-radius: 14px;\n  box-shadow: none;\n}\nha-card.type-custom-simple-weather-card\
            \ {\n  padding: 24px;\n}\nha-card[bg].type-custom-simple-weather-card{\n\
            \  color: white;\n}\nha-card.type-custom-simple-weather-card .weather__info\
            \ {\n  text-align: left\n}\n"
          type: custom:simple-weather-card
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 0px
      grid:
      - grid-template-areas: '''item1'''
      - grid-template-columns: 1fr
      - grid-template-rows: min-content
      - row-gap: 12px
    variables:
      ulm_card_weather_backdrop: false
      ulm_card_weather_primary_info: extrema
      ulm_card_weather_secondary_info: precipitation
  card_welcome_scenes:
    custom_fields:
      item1:
        card:
          styles:
            card:
            - border-radius: none
            - box-shadow: none
            - padding: 4px
          template: card_topbar_welcome
          type: custom:button-card
          variables:
            ulm_card_welcome_scenes_collapse: '[[[ return variables.ulm_card_welcome_scenes_collapse
              ]]]'
            ulm_language: '[[[ return variables.ulm_language ]]]'
            ulm_weather: '[[[ return variables.ulm_weather]]]'
      item2:
        card:
          name: "[[[\n  var today = new Date();\n  var time = today.getHours()\n \
            \ let welcome = '';\n  if (time >= '18'){\n    welcome = variables.ulm_evening;\n\
            \  } else if (time >= '12'){\n    welcome = variables.ulm_afternoon;\n\
            \  } else if (time >= '5'){\n    welcome = variables.ulm_morning;\n  }\
            \ else {\n    welcome = variables.ulm_hello;\n  }\n  return welcome +\
            \ ', ' + '   <br>' + user.name + '!';\n]]]\n"
          show_entity_picture: false
          show_icon: false
          show_label: false
          show_name: true
          styles:
            card:
            - box-shadow: none
            - padding-bottom: 8px
            grid:
            - grid-template-areas: '''i n'' ''i l'''
            - grid-template-columns: min-content auto
            - grid-template-rows: min-content min-content
            - text-align: start
            name:
            - align-self: start
            - justify-self: start
            - font-weight: bold
            - font-size: 24px
            - margin-left: 16px
          type: custom:button-card
      item3:
        card:
          icon: mdi:dots-vertical
          name: '[[[ return variables.ulm_translation_scenes ]]]'
          show_entity_picture: false
          show_icon: true
          show_label: true
          show_name: true
          styles:
            card:
            - box-shadow: none
            - padding-bottom: 0px
            - bottom: 10px
            grid:
            - grid-template-areas: '''n i'''
            - grid-template-columns: 6fr 1fr
            - grid-template-rows: min-content min-content
            - text-align: start
            icon:
            - height: 20px
            - filter: opacity(50%)
            name:
            - align-self: start
            - justify-self: start
            - font-weight: bold
            - font-size: 18px
            - margin-left: 16px
          type: custom:button-card
      item4:
        card:
          styles:
            card:
            - border-radius: none
            - box-shadow: none
            - padding: 4px
          template: "[[[\n  if(variables?.entity_1?.entity_id != \"\"){\n    return\
            \ 'card_scenes_welcome'\n  } else {\n    return 'card_scenes_welcome_auto'\n\
            \  }\n]]]\n"
          type: custom:button-card
          variables:
            entity_1: '[[[ return variables.entity_1]]]'
            entity_2: '[[[ return variables.entity_2]]]'
            entity_3: '[[[ return variables.entity_3]]]'
            entity_4: '[[[ return variables.entity_4]]]'
            entity_5: '[[[ return variables.entity_5]]]'
            entity_6: '[[[ return variables.entity_6]]]'
            entity_7: '[[[ return variables.entity_7]]]'
    show_icon: false
    show_label: true
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 10px
      custom_fields:
        item3:
        - display: "[[[\n  if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state\
            \ == 'on'){\n    return \"none\";\n  } else {\n    return \"block\";\n\
            \  }\n]]]\n"
        item4:
        - display: "[[[\n  if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state\
            \ == 'on'){\n    return \"none\";\n  } else {\n    return \"block\";\n\
            \  }\n]]]\n"
      grid:
      - grid-template-areas: "[[[\n  if(variables.ulm_card_welcome_scenes_collapse\
          \ && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){\n\
          \    return \"\\'item1\\' \\'item2\\' \";\n  } else {\n    return \"\\'item1\\\
          ' \\'item2\\' \\'item3\\' \\'item4\\'\";\n  }\n]]]\n"
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
      - row-gap: 0px
    template:
    - ulm_language_variables
    - ulm_translation_engine
    variables:
      entity_1:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_2:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_3:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_4:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_5:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_6:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      entity_7:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];\n\
          \  var color = colors[Math.floor(Math.random() * colors.length)];\n  return\
          \ color;\n]]]\n"
        entity_id: ''
      ulm_language: '[[[ return hass[''language'']; ]]]'
      ulm_weather: '[[[ return variables.ulm_weather]]]'
  chip_alarm:
    icon: "[[[\n  var state = entity.state.toLowerCase();\n  var alarm_icon = {\n\
      \    \"default\": \"mdi:shield-outline\",\n    \"armed_home\": \"mdi:shield-home\"\
      ,\n    \"armed_away\": \"mdi:shield-lock\",\n    \"armed_night\": \"mdi:shield-moon\"\
      ,\n    \"disarmed\": \"mdi:shield-off\",\n    \"arming\": \"mdi:shield\",\n\
      \    \"triggered\": \"mdi:shield-alert\"\n  }\n  return (alarm_icon[state] ||\
      \ alarm_icon[\"default\"]);\n]]]\n"
    label: '[[[ return variables.ulm_translation_state ]]]'
    styles:
      icon:
      - color: "[[[\n  var state = entity.state.toLowerCase();\n  var alarm_color\
          \ = {\n    \"default\": \"var(--google-yellow)\",\n    \"armed_home\": \"\
          var(--google-red)\",\n    \"armed_away\": \"var(--google-red)\",\n    \"\
          armed_night\": \"var(--google-red)\",\n    \"disarmed\": \"var(--google-green)\"\
          ,\n    \"arming\": \"var(--google-yellow)\",\n    \"triggered\": \"var(--google-red)\"\
          \n  }\n  return (alarm_color[state] || alarm_color[\"default\"]);\n]]]\n"
    template:
    - chip_icon_label
    - ulm_translation_engine
  chip_back:
    icon: mdi:arrow-left
    show_icon: true
    styles:
      grid:
      - grid-template-areas: '''i'''
    tap_action:
      action: navigate
      navigation_path: '[[[ return variables.ulm_chip_back_path; ]]]'
    template: chips
    variables:
      ulm_chip_back_path: "[[[\n  return hass[\"panelUrl\"];\n]]]\n"
  chip_icon_double_state:
    label: "[[[\n  var icon = \"❔\";\n  if (variables.ulm_chip_icon_double_state_icon){\n\
      \    var icon = variables.ulm_chip_icon_double_state_icon;\n  }\n  var state1\
      \ = \"\";\n  if (states[variables.ulm_chip_icon_double_state_entity_1].state){\n\
      \    var state1 = states[variables.ulm_chip_icon_double_state_entity_1].state;\n\
      \    if (states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement){\n\
      \      state1 += states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement;\n\
      \    }\n  }\n  var state2 = \"\";\n  if (states[variables.ulm_chip_icon_double_state_entity_2].state){\n\
      \    var state2 = states[variables.ulm_chip_icon_double_state_entity_2].state;\n\
      \    if (states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement){\n\
      \      state2 += states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement;\n\
      \    }\n  }\n  return icon + \" \" + state1 + \" • \" + state2;\n]]]\n"
    tap_action:
      action: navigate
      navigation_path: '[[[ return variables.ulm_chip_navigate_path; ]]]'
    template: chips
    triggers_update: all
  chip_icon_label:
    show_icon: true
    size: 100%
    styles:
      card:
      - padding-top: 6px
      - padding-button: 6px
      - padding-left: 12px
      grid:
      - grid-template-areas: '''i l'''
      - grid-template-columns: max_content auto
      - grid-template-rows: min-content
      img_cell:
      - place-self: center
      - width: 14px
      - height: 24px
      label:
      - font-size: 12px
      - margin-left: 0px
    template: chips
  chip_icon_only:
    label: "[[[\n  var icon = \"❔\";\n  if (variables.ulm_chip_icon_only){\n    var\
      \ icon = variables.ulm_chip_icon_only;\n  }\n  return icon;\n]]]\n"
    template: chips
  chip_icon_state:
    label: "[[[\n  var icon = \"❔\";\n  if (variables.ulm_chip_icon_state_icon){\n\
      \    var icon = variables.ulm_chip_icon_state_icon;\n  }\n  var state = \"\"\
      ;\n  if (states[variables.ulm_chip_icon_state_entity].state){\n    var state\
      \ = states[variables.ulm_chip_icon_state_entity].state;\n    if (states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement){\n\
      \      state += states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement;\n\
      \    }\n  }\n  return icon + \" \" + state;\n]]]\n"
    template: chips
    triggers_update: all
  chip_mdi_icon_only:
    icon: '[[[ return variables.ulm_chip_mdi_icon_only_icon ]]]'
    show_icon: true
    styles:
      grid:
      - grid-template-areas: '''i'''
      icon:
      - color: '[[[ return variables.ulm_chip_mdi_icon_only_icon_color; ]]]'
    tap_action:
      action: more-info
      entity: '[[[ return variables.ulm_chip_mdi_icon_only_entity ]]]'
    template: chips
  chip_mdi_icon_state:
    icon: '[[[ return variables.ulm_chip_mdi_icon_state_icon ]]]'
    label: '[[[ return states[variables.ulm_chip_mdi_icon_state_entity].state ]]]'
    show_icon: true
    styles:
      grid:
      - grid-template-areas: '''i l'''
      icon:
      - color: '[[[ return variables.ulm_chip_mdi_icon_state_icon_color; ]]]'
      label:
      - color: '[[[ return variables.ulm_chip_mdi_icon_state_label_color; ]]]'
    tap_action:
      action: more-info
      entity: '[[[ return variables.ulm_chip_mdi_icon_state_entity ]]]'
    template: chips
    triggers_update: all
  chip_navigate:
    icon: '[[[ return variables.ulm_chip_navigate_icon; ]]]'
    show_icon: true
    styles:
      grid:
      - grid-template-areas: '''i l'''
      icon:
      - color: '[[[ return variables.ulm_chip_navigate_icon_color; ]]]'
      label:
      - color: '[[[ return variables.ulm_chip_navigate_label_color; ]]]'
    tap_action:
      action: navigate
      navigation_path: '[[[ return variables.ulm_chip_navigate_path; ]]]'
    template: chips
  chip_power_consumption:
    label: "[[[\n  var amount = variables.ulm_chip_electric_price != \"\" ? true :\
      \ false\n  if (amount){\n    return \"⚡ \" +  states[variables.ulm_chip_electric_price].state\
      \ + variables.ulm_translation_currency;\n  } else {\n    return \"⚡ \" +  states[variables.ulm_chip_electric_consumption].state\
      \ + states[variables.ulm_chip_electric_consumption].attributes.unit_of_measurement;\n\
      \  }\n]]]\n"
    template:
    - chips
    - ulm_translation_engine
    triggers_update: all
  chip_presence_detection:
    label: "[[[\n  if (!!variables.ulm_chip_presence_counter_guests) {\n    return\
      \ \"\U0001F3E0 \" +  states[variables.ulm_chip_presence_counter_residents].state\
      \ + \" / \" + states[variables.ulm_chip_presence_counter_guests].state;\n  }\
      \ else {\n    return \"\U0001F3E0 \" +  states[variables.ulm_chip_presence_counter_residents].state;\n\
      \  }\n]]]\n"
    template: chips
    triggers_update: all
  chip_temperature:
    label: "[[[\n  var state = states[variables.ulm_chip_temperature_weather].state;\n\
      \  var icon = {\n    \"clear-night\": \"\U0001F319\",\n    \"cloudy\": \"☁️\"\
      ,\n    \"exceptional\": \"\U0001F31E\",\n    \"fog\": \"\U0001F32B️\",\n   \
      \ \"hail\": \"⛈️\",\n    \"lightning\": \"⚡\",\n    \"lightning-rainy\": \"\
      ⛈️\",\n    \"partlycloudy\": \"⛅\",\n    \"pouring\": \"\U0001F327️\",\n   \
      \ \"rainy\": \"\U0001F4A7\",\n    \"snowy\": \"❄️\",\n    \"snowy-rainy\": \"\
      \U0001F328️\",\n    \"sunny\": \"☀️\",\n    \"windy\": \"\U0001F32A️\",\n  \
      \  \"default\": \"\U0001F321️\"\n    }\n  function convertTemperature(temp)\
      \ {\n    if (parseFloat(temp) == temp && Math.floor(temp) != temp) {\n     \
      \   return parseFloat(temp).toFixed(1);\n    }\n    return temp;\n  }\n  var\
      \ outside_temp = states[variables.ulm_chip_temperature_outside].state;\n  var\
      \ inside_temp = states[variables.ulm_chip_temperature_inside].state;\n  return\
      \ (icon[state] || icon[\"default\"]) + \" \" + convertTemperature(outside_temp)\
      \ + \"° / \" + convertTemperature(inside_temp) + \"°\" ;\n]]]\n"
    template: chips
    triggers_update: all
  chip_weather_date:
    entity: '[[[ return variables.ulm_weather]]]'
    label: "[[[\n  const event = new Date();\n  const options = {month: 'short', day:\
      \ 'numeric' };\n  var locale = variables.ulm_language;\n  let formatted_date\
      \ = event.toLocaleDateString(locale, options);\n  var state = states[variables.ulm_weather].state;\n\
      \  var icon = {\n    \"clear-night\": \"\U0001F319\",\n    \"cloudy\": \"☁️\"\
      ,\n    \"exceptional\": \"\U0001F31E\",\n    \"fog\": \"\U0001F32B️\",\n   \
      \ \"hail\": \"⛈️\",\n    \"lightning\": \"⚡\",\n    \"lightning-rainy\": \"\
      ⛈️\",\n    \"partlycloudy\": \"⛅\",\n    \"pouring\": \"\U0001F327️\",\n   \
      \ \"rainy\": \"\U0001F4A7\",\n    \"snowy\": \"❄️\",\n    \"snowy-rainy\": \"\
      \U0001F328️\",\n    \"sunny\": \"☀️\",\n    \"windy\": \"\U0001F32A️\",\n  \
      \  \"default\": \"\U0001F321️\"\n    }\n  return (icon[state] || icon[\"default\"\
      ]) + ' ' + formatted_date\n]]]\n"
    tap_action:
      action: more-info
    template: chips
    triggers_update: all
    variables:
      ulm_language: "[[[\n  return hass[\"language\"];\n]]]\n"
  chips:
    show_icon: false
    show_label: true
    show_name: false
    show_state: false
    size: 80%
    styles:
      card:
      - border-radius: 18px
      - box-shadow: var(--box-shadow)
      - height: 36px
      - width: auto
      - padding-left: 6px
      - padding-right: 6px
      grid:
      - grid-template-areas: '''l'''
      img_cell:
      - width: 24px
      label:
      - justify-self: center
      - padding: 0px 6px
      - font-weight: bold
      - font-size: 14px
    tap_action:
      action: more-info
  chips_icon:
    template: chip_icon_state
    variables:
      ulm_chip_icon_state_entity: '[[[ return entity.entity_id ]]]'
      ulm_chip_icon_state_icon: '[[[ return variables.icon ]]]'
  chips_localisation_present:
    template: chip_presence_detection
  chips_return:
    template: chip_back
    variables:
      ulm_chip_back_path: /ui-lovelace-minimalist/home
  cool_on:
    state:
    - id: cool
      styles:
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: cool
  cover:
    icon: "[[[\n    var icon = \"mdi:help-circle\";\n    if (typeof states[entity.entity_id].attributes.current_position\
      \ === \"undefined\"){\n      if (states[entity.entity_id].state == \"closed\"\
      ){\n        var icon = \"mdi:window-shutter\";\n      } else\n        var icon\
      \ = \"mdi:window-shutter-open\";\n    } else {\n      if (states[entity.entity_id].attributes.current_position\
      \ == 0){\n        var icon = \"mdi:window-shutter\";\n      } else\n       \
      \ var icon = \"mdi:window-shutter-open\";\n    }\n    return icon ;\n]]]\n"
    label: "[[[\n    var icon = \"mdi:help-circle\";\n    if (typeof states[entity.entity_id].attributes.current_position\
      \ === \"undefined\"){\n      if (states[entity.entity_id].state == \"closed\"\
      ){\n        return variables.ulm_translation_state;\n      } else\n        return\
      \ variables.ulm_translation_state;\n    } else {\n      if (states[entity.entity_id].attributes.current_position\
      \ == 0){\n        return variables.ulm_translation_state;\n      } else {\n\
      \        return variables.ulm_translation_state + \" • \" + (states[entity.entity_id].attributes.current_position)\
      \ + \"%\" ;\n      }\n    }\n    return icon ;\n]]]"
    state:
    - operator: template
      styles:
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue),0.2)
      value: '[[[ return states[entity.entity_id].attributes.current_position != 0;
        ]]]'
    tap_action:
      action: more-info
  cover_buttons:
    template: card_cover_buttons
    variables:
      ulm_card_cover_buttons_entity: null
      ulm_card_cover_buttons_name: null
  custom_card_apexcharts:
    aspect_ratio: 2/1
    color: auto
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                custom_fields:
                  item1:
                    card:
                      styles:
                        icon:
                        - color: '[[[ return `rgba(${variables.entity_1.color}, 1)`;]]]'
                        img_cell:
                        - background-color: '[[[ return `rgba(${variables.entity_1.color},
                            0.20)`;]]]'
                      type: custom:button-card
                type: custom:button-card
          entity: '[[[ return variables.entity_1.entity_id ]]]'
          styles:
            card:
            - box-shadow: none
            - border-radius: none
            - padding-top: 1px
            - padding-bottom: 1px
          template:
          - card_generic_swap
          type: custom:button-card
          variables:
            ulm_card_generic_swap_icon: '[[[ return variables.entity_1.icon ]]]'
            ulm_card_generic_swap_name: '[[[ return variables.entity_1.name ]]]'
      item2:
        card:
          custom_fields:
            item1:
              card:
                custom_fields:
                  item1:
                    card:
                      styles:
                        icon:
                        - color: '[[[ return `rgba(${variables.entity_2.color}, 1)`;]]]'
                        img_cell:
                        - background-color: '[[[ return `rgba(${variables.entity_2.color},
                            0.20)`;]]]'
                      type: custom:button-card
                type: custom:button-card
          entity: '[[[ return variables.entity_2.entity_id ]]]'
          styles:
            card:
            - box-shadow: none
            - border-radius: none
            - padding-top: 1px
            - padding-bottom: 1px
          template:
          - card_generic_swap
          type: custom:button-card
          variables:
            ulm_card_generic_swap_icon: '[[[ return variables.entity_2.icon ]]]'
            ulm_card_generic_swap_name: '[[[ return variables.entity_2.name ]]]'
      item3:
        card:
          custom_fields:
            item1:
              card:
                custom_fields:
                  item1:
                    card:
                      styles:
                        icon:
                        - color: '[[[ return `rgba(${variables.entity_3.color}, 1)`;]]]'
                        img_cell:
                        - background-color: '[[[ return `rgba(${variables.entity_3.color},
                            0.20)`;]]]'
                      type: custom:button-card
                type: custom:button-card
          entity: '[[[ return variables.entity_3.entity_id ]]]'
          styles:
            card:
            - box-shadow: none
            - border-radius: none
            - padding-top: 1px
            - padding-bottom: 1px
          template:
          - card_generic_swap
          type: custom:button-card
          variables:
            ulm_card_generic_swap_icon: '[[[ return variables.entity_3.icon ]]]'
            ulm_card_generic_swap_name: '[[[ return variables.entity_3.name ]]]'
      radial:
        card:
          apex_config:
            chart:
              foreColor: rgb(148,148,148)
              offsetY: 5
            legend:
              show: false
            title:
              align: top
              floating: false
              style:
                fontSize: 2px
                fontWeight: bold
          chart_type: '[[[ return variables.chart_type ]]]'
          graph_span: '[[[ return variables.graph_span ]]]'
          header:
            show: false
          series:
          - color: '[[[ return `rgba(${variables.entity_1.color}, 1)`;]]]'
            entity: '[[[ return variables.entity_1.entity_id ]]]'
            max: '[[[ return variables.entity_1.max_value ]]]'
            name: '[[[ return variables.entity_1_name ]]]'
          - color: '[[[ return `rgba(${variables.entity_2.color}, 1)`;]]]'
            entity: '[[[ return variables.entity_2.entity_id ]]]'
            max: '[[[ return variables.entity_2.max_value ]]]'
            name: '[[[ return variables.entity_2_name ]]]'
          - color: '[[[ return `rgba(${variables.entity_3.color}, 1)`;]]]'
            entity: '[[[ return variables.entity_3.entity_id ]]]'
            max: '[[[ return variables.entity_3.max_value ]]]'
            name: '[[[ return variables.entity_3_name ]]]'
          style: "ha-card {\n  border-radius: \"var(--border-radius)\";\n  box-shadow:\
            \ none;\n  padding-left: 10px;\n  padding-bottom: 0px;\n}\n"
          type: custom:apexcharts-card
    show_entity_picture: false
    show_icon: false
    show_label: false
    show_last_changed: false
    show_name: false
    show_state: false
    spin: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 radial'' ''item2 radial'' ''item3 radial'''
      - grid-template-columns: 35% 65%
      - grid-template-rows: 1fr 1fr 1fr
    tap_action:
      action: none
    variable: spin
    variables:
      entity_1:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'green'];\n  var color\
          \ = colors[Math.floor(Math.random() * colors.length)];\n  return color;\n\
          ]]]\n"
        entity_id: null
        icon: '[[[ return entity.attributes.icon ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
      entity_2:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red', 'green'];\n  var color\
          \ = colors[Math.floor(Math.random() * colors.length)];\n  return color;\n\
          ]]]\n"
        entity_id: null
        icon: '[[[ return entity.attributes.icon  ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
      entity_3:
        color: "[[[\n  var colors = ['yellow', 'blue', 'red','green'];\n  var color\
          \ = colors[Math.floor(Math.random() * colors.length)];\n  return color;\n\
          ]]]\n"
        entity_id: null
        icon: '[[[ return entity.attributes.icon  ]]]'
        name: '[[[ return entity.attributes.friendly_name ]]]'
  custom_card_car:
    custom_fields:
      item1:
        card:
          entity: '[[[ return variables.tracker ]]]'
          template: car_icon
          type: custom:button-card
          variables:
            icon: '[[[ return variables.icon ]]]'
            name: '[[[ return variables.name ]]]'
            tracker: '[[[ return variables.tracker ]]]'
      item2:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return variables.item_1.entity ]]]'
                name: "[[[\n  if (variables?.item_1?.name) {\n    return variables.item_1.name;\n\
                  \  }\n  return states[variables.item_1.entity].friendly_name\n]]]"
                state_display: "[[[\n  return parseFloat(states[variables.item_1.entity].state).toFixed(1);\n\
                  ]]]\n"
                template: widget_icon_state
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.item_2.entity ]]]'
                name: "[[[\n  if (variables?.item_2?.name) {\n    return variables.item_2.name;\n\
                  \  }\n  return states[variables.item_2.entity].friendly_name\n]]]"
                state_display: "[[[\n  return parseFloat(states[variables.item_2.entity].state).toFixed(1);\n\
                  ]]]\n"
                template: widget_icon_state
                type: custom:button-card
          template: list_2_items
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '"item1" "item2"'
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
      - row-gap: 12px
    tap_action:
      action: '[[[ if (variables?.tap_action?.action) return variables.tap_action.action;
        else return ''none''; ]]]

        '
      entity: '[[[ return variables.tap_action.entity; ]]]'
      navigation_path: '[[[ return variables.tap_action.navigation_path; ]]]'
      service: '[[[ return variables.tap_action.service; ]]]'
      service_data: '[[[ return variables.tap_action.service_data; ]]]'
      url_path: '[[[ return variables.tap_action.url_path; ]]]'
    variables:
      hold_action:
        action: none
      name: ''
      tap_action:
        action: more-info
  custom_card_heat_pump:
    template: card_thermostat
    variables:
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_hvac_modes: true
  custom_card_httpedo13_thermostat:
    template: card_thermostat
    variables:
      ulm_card_thermostat_enable_background_color: true
      ulm_card_thermostat_enable_display_temperature: true
  custom_card_httpedo13_thermostat_with_buttons:
    template: card_thermostat
    variables:
      ulm_card_thermostat_enable_background_color: true
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_display_temperature: true
  custom_card_httpedo13_thermostat_with_buttons_collapse:
    template: card_thermostat
    variables:
      ulm_card_thermostat_enable_background_color: true
      ulm_card_thermostat_enable_collapse: true
      ulm_card_thermostat_enable_controls: true
      ulm_card_thermostat_enable_display_temperature: true
  custom_card_mpse_thermostat:
    template: card_thermostat
    variables:
      ulm_card_thermostat_enable_controls: true
  custom_card_sisimomo_printer:
    custom_fields:
      cartridges: "[[[\n  // Source: https://stackoverflow.com/a/56266358\n  const\
        \ isColor = (strColor) => {\n    const s = new Option().style;\n    s.color\
        \ = strColor;\n    return s.color !== '';\n  }\n\n  if (variables.cartridges\
        \ !== undefined ? Array.isArray(variables.cartridges) && variables.cartridges.length\
        \ > 0 : false) {\n    let errorArray = [];\n    variables.cartridges.forEach(cartridge\
        \ => {\n      let index = variables.cartridges.indexOf(cartridge);\n     \
        \ // Confirm that the label is provided.\n      if (cartridge.label === undefined)\
        \ {\n        errorArray.push(`cartridges.[${index}].label: You must provide\
        \ a value.`);\n      }\n      // Confirm that the color is provided and is\
        \ a valid color css.\n      if (cartridge.color === undefined) {\n       \
        \ errorArray.push(`cartridges.[${index}].color: You must provide a value.`);\n\
        \      } else if (!isColor(cartridge.color)) {\n        errorArray.push(`cartridges.[${index}].color:\
        \ You must provide a valid css color value.`);\n      }\n      // Confirm\
        \ that the entity_id is provided, is a valid entity_id, a integer and a value\
        \ between 0 and 100 inclusively.\n      if (cartridge.entity_id === undefined)\
        \ {\n        errorArray.push(`cartridges.[${index}].entity_id: You must provide\
        \ a value.`);\n      } else if (states[cartridge.entity_id] === undefined)\
        \ {\n        errorArray.push(`cartridges.[${index}].entity_id: You must provide\
        \ a existing entity_id.`);\n      } else if (isNaN(states[cartridge.entity_id].state)\
        \ || typeof states[cartridge.entity_id].state === \"boolean\") {\n       \
        \ errorArray.push(`cartridges.[${index}].entity_id: You must provide a entity\
        \ representing an integer.`);\n      } else if (states[cartridge.entity_id].state\
        \ < 0 || states[cartridge.entity_id].state > 100) {\n        errorArray.push(`cartridges.[${index}].entity_id:\
        \ You must provide a entity representing an integer between 0 and 100 inclusively.`);\n\
        \      }\n    });\n    if (errorArray.length > 0) {\n      return `<div style=\"\
        padding: 1em;background-color: rgba(219, 68, 55, 0.75);white-space: normal;\"\
        >\n        ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n        <ul style=\"list-style: none;padding-left:\
        \ 0;\">\n          ${errorArray.map(error => `<li style=\"margin-top: 0.5em;\"\
        >${error}</li>`).join(\"\")}\n        </ul>\n        ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n\
        \      </div>`;\n    }\n\n    return '<div class=\"wrapper\">' +\n      variables.cartridges.map(cartridge\
        \ => {\n        return `<div class=\"label\">${cartridge.label}</div>\n  \
        \        <div class=\"container-bar\">\n            <div class=\"bar\" style=\"\
        background-color: ${cartridge.color};width: ${states[cartridge.entity_id].state}%;\"\
        ></div>\n          </div>\n        <div class=\"state\">${states[cartridge.entity_id].state}%</div>`;\n\
        \      }).join(\"\") +\n    '</div>';\n  } else {\n\n  }\n]]]\n"
      printer_state:
        card:
          entity: '[[[ return entity.entity_id; ]]]'
          label: '[[[ return entity.state; ]]]'
          name: '[[[ return variables.printer_name !== undefined ? variables.printer_name
            : entity.attributes.friendly_name; ]]]'
          styles:
            card:
            - padding: '0'
            - --mdc-ripple-press-opacity: 0.12
            - cursor: pointer
          tap_action:
            action: more-info
          template: "[[[\n  return entity.state.toLowerCase() != variables.ulm_idle\
            \ && entity.state.toLowerCase() != variables.ulm_unavailable ? [ \"icon_info\"\
            , \"blue_no_state\" ] : [ \"icon_info\" ];\n]]]\n"
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    style: "div#cartridges .wrapper {\n  display: grid;\n  grid-template-columns:\
      \ auto 1fr auto;\n  grid-gap: 1rem;\n  padding: 12px 8px 8px 8px;\n}\ndiv#cartridges\
      \ .wrapper > *:nth-child(3n-2), .wrapper > *:nth-child(3n) {\n  place-self:\
      \ center start;\n}\ndiv#cartridges .wrapper > .label {\n  filter: opacity(70%);\n\
      \  font-size: medium;\n}\ndiv#cartridges .wrapper > .container-bar {\n  position:\
      \ relative;\n  border-radius: 4px;\n  border: 0.01rem solid rgba(var(--color-theme),.35);\n\
      }\ndiv#cartridges .wrapper > .container-bar .bar {\n  height: 20px;\n  border-radius:\
      \ 4px;\n}\ndiv#cartridges .wrapper > .state {\n  filter: opacity(40%);\n  font-size:\
      \ medium;\n}\n"
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      - --mdc-ripple-press-opacity: 0
      - cursor: default
      grid:
      - grid-template-areas: '''printer_state'' ''cartridges'''
      - grid-template-columns: 1fr
      - grid-template-rows: min-content
    tap_action:
      action: ''
    template: ulm_language_variables
    triggers_update: all
  cyan_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-cyan), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-cyan),1)
      img_cell:
      - background-color: rgba(var(--color-cyan), 0.2)
      label:
      - color: rgba(var(--color-cyan-text),1)
      name:
      - color: rgba(var(--color-cyan-text),1)
  cyan_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-cyan),1)
        img_cell:
        - background-color: rgba(var(--color-cyan), 0.2)
        label:
        - color: rgba(var(--color-cyan-text),1)
        name:
        - color: rgba(var(--color-cyan-text),1)
      value: 'off'
  cyan_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-cyan), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-cyan),1)
        img_cell:
        - background-color: rgba(var(--color-cyan), 0.2)
        label:
        - color: rgba(var(--color-cyan-text),1)
        name:
        - color: rgba(var(--color-cyan-text),1)
      value: 'on'
  deep-orange_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-deep-orange), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-deep-orange),1)
      img_cell:
      - background-color: rgba(var(--color-deep-orange), 0.2)
      label:
      - color: rgba(var(--color-deep-orange-text),1)
      name:
      - color: rgba(var(--color-deep-orange-text),1)
  deep-orange_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-deep-orange),1)
        img_cell:
        - background-color: rgba(var(--color-deep-orange), 0.2)
        label:
        - color: rgba(var(--color-deep-orange-text),1)
        name:
        - color: rgba(var(--color-deep-orange-text),1)
      value: 'off'
  deep-orange_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-deep-orange), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-deep-orange),1)
        img_cell:
        - background-color: rgba(var(--color-deep-orange), 0.2)
        label:
        - color: rgba(var(--color-deep-orange-text),1)
        name:
        - color: rgba(var(--color-deep-orange-text),1)
      value: 'on'
  deep-purple_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-deep-purple), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-deep-purple),1)
      img_cell:
      - background-color: rgba(var(--color-deep-purple), 0.2)
      label:
      - color: rgba(var(--color-deep-purple-text),1)
      name:
      - color: rgba(var(--color-deep-purple-text),1)
  deep-purple_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-deep-purple),1)
        img_cell:
        - background-color: rgba(var(--color-deep-purple), 0.2)
        label:
        - color: rgba(var(--color-deep-purple-text),1)
        name:
        - color: rgba(var(--color-deep-purple-text),1)
      value: 'off'
  deep-purple_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-deep-purple), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-deep-purple),1)
        img_cell:
        - background-color: rgba(var(--color-deep-purple), 0.2)
        label:
        - color: rgba(var(--color-deep-purple-text),1)
        name:
        - color: rgba(var(--color-deep-purple-text),1)
      value: 'on'
  edge:
    styles:
      card:
      - width: 0px
  generic:
    template: card_generic
  graph:
    template: card_graph
    variables:
      ulm_card_graph_color: var(--google-blue)
      ulm_card_graph_entity: '[[[ return entity.entity_id ]]]'
      ulm_card_graph_name: Default name
  green:
    template: green_on
  green_no_state:
    styles:
      icon:
      - color: rgba(var(--color-green),1)
      img_cell:
      - background-color: rgba(var(--color-green), 0.2)
      label:
      - color: rgba(var(--color-green-text),1)
      name:
      - color: rgba(var(--color-green-text),1)
  green_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-green),1)
        img_cell:
        - background-color: rgba(var(--color-green), 0.2)
        label:
        - color: rgba(var(--color-green-text),1)
        name:
        - color: rgba(var(--color-green-text),1)
      value: 'off'
  green_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-green), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-green),1)
        img_cell:
        - background-color: rgba(var(--color-green), 0.2)
        label:
        - color: rgba(var(--color-green-text),1)
        name:
        - color: rgba(var(--color-green-text),1)
      value: 'on'
  grey_no_state:
    styles:
      icon:
      - color: rgba(var(--color-grey),1)
      img_cell:
      - background-color: rgba(var(--color-grey), 0.2)
      label:
      - color: rgba(var(--color-grey-text),1)
      name:
      - color: rgba(var(--color-grey-text),1)
  grey_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-grey),1)
        img_cell:
        - background-color: rgba(var(--color-grey), 0.2)
        label:
        - color: rgba(var(--color-grey-text),1)
        name:
        - color: rgba(var(--color-grey-text),1)
      value: 'off'
  grey_on:
    state:
    - id: 'on'
      styles:
        icon:
        - color: rgba(var(--color-grey),1)
        img_cell:
        - background-color: rgba(var(--color-grey), 0.2)
        label:
        - color: rgba(var(--color-grey-text),1)
        name:
        - color: rgba(var(--color-grey-text),1)
      value: 'on'
  heat_on:
    state:
    - id: heat
      styles:
        icon:
        - color: rgba(var(--color-red),1)
        img_cell:
        - background-color: rgba(var(--color-red), 0.2)
        label:
        - color: rgba(var(--color-red-text),1)
        name:
        - color: rgba(var(--color-red-text),1)
      value: heat
  icon:
    color: var(--google-grey)
    custom_fields:
      notification: "[[[\n  if (entity.state ==\"unavailable\"){\n    return `<ha-icon\
        \ icon=\"mdi:exclamation\" style=\"width: 12px; height: 12px; color: var(--primary-background-color);\"\
        ></ha-icon>`\n  }\n]]]\n"
    show_icon: true
    show_label: false
    show_name: false
    size: 20px
    state:
    - styles:
        custom_fields:
          notification:
          - border-radius: 50%
          - position: absolute
          - left: 24px
          - top: -2px
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
      value: unavailable
    styles:
      card:
      - border-radius: 21px
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''i'''
      - grid-template-columns: min-content
      - grid-template-rows: min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
  icon_alert:
    color: var(--google-grey)
    custom_fields:
      notification: "[[[\n  if (entity.state ==\"unavailable\" || entity.state ==\
        \ \"on\"){\n    return `<ha-icon icon=\"mdi:exclamation\" style=\"width: 12px;\
        \ height: 12px; color: var(--primary-background-color);\"></ha-icon>`\n  }\n\
        ]]]\n"
    show_icon: true
    show_label: false
    show_name: false
    size: 20px
    state:
    - operator: template
      styles:
        card:
        - background-color: rgba(var(--color-background-blue), var(--opacity-bg))
        custom_fields:
          notification:
          - border-radius: 50%
          - position: absolute
          - left: 24px
          - top: -2px
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: '[[[ if (entity.state == ''unavailable'' || entity.state == ''on''){
        return true; } ]]]'
    styles:
      card:
      - border-radius: 21px
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''i'''
      - grid-template-columns: min-content
      - grid-template-rows: min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
  icon_controls:
    show_icon: true
    show_label: false
    show_name: false
    show_state: false
    size: 80%
    styles:
      card:
      - background: none
      - box-shadow: none
      - height: 42px
      grid:
      - grid-template-areas: '''i'''
      img_cell:
      - width: 30px
  icon_info:
    color: var(--google-grey)
    custom_fields:
      notification: "[[[\n  if (entity.state ==\"unavailable\"){\n    return `<ha-icon\
        \ icon=\"mdi:exclamation\" style=\"width: 12px; height: 12px; color: var(--primary-background-color);\"\
        ></ha-icon>`\n  }\n]]]\n"
    show_icon: true
    show_label: true
    show_name: true
    size: 20px
    state:
    - styles:
        custom_fields:
          notification:
          - border-radius: 50%
          - position: absolute
          - left: 24px
          - top: -2px
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
      value: unavailable
    styles:
      card:
      - border-radius: 21px 8px 8px 21px
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''i n'' ''i l'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
      name:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      state:
      - justify-self: start
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
  icon_info_alert:
    color: var(--google-grey)
    custom_fields:
      notification: "[[[\n  if (entity.state ==\"unavailable\" || entity.state ==\
        \ \"on\"){\n    return `<ha-icon icon=\"mdi:exclamation\" style=\"width: 12px;\
        \ height: 12px; color: var(--primary-background-color);\"></ha-icon>`\n  }\n\
        ]]]\n"
    double_tap_action:
      action: '[[[ return variables.ulm_card_double_tap_action ]]]'
    hold_action:
      action: '[[[ return variables.ulm_card_hold_action ]]]'
    show_icon: true
    show_label: true
    show_name: true
    size: 20px
    state:
    - operator: template
      styles:
        card:
        - background-color: rgba(var(--color-background-blue), var(--opacity-bg))
        custom_fields:
          notification:
          - border-radius: 50%
          - position: absolute
          - left: 38px
          - top: 8px
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
        icon:
        - color: rgba(var(--color-blue),1)
        img_cell:
        - background-color: rgba(var(--color-blue), 0.2)
        label:
        - color: rgba(var(--color-blue-text),1)
        name:
        - color: rgba(var(--color-blue-text),1)
      value: '[[[ if (entity.state == ''unavailable'' || entity.state == ''on''){
        return true; } ]]]'
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '''i n'' ''i l'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
      name:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      state:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
    tap_action:
      action: '[[[ return variables.ulm_card_tap_action ]]]'
    template: ulm_custom_actions
  icon_info_bg:
    color: var(--google-grey)
    custom_fields:
      notification: "[[[\n  if (entity.state ==\"unavailable\"){\n    return `<ha-icon\
        \ icon=\"mdi:exclamation\" style=\"width: 12px; height: 12px; color: var(--primary-background-color);\"\
        ></ha-icon>`\n  }\n]]]\n"
    show_icon: true
    show_label: true
    show_name: true
    size: 20px
    state:
    - styles:
        custom_fields:
          notification:
          - border-radius: 50%
          - position: absolute
          - left: 38px
          - top: 8px
          - height: 16px
          - width: 16px
          - border: 2px solid var(--card-background-color)
          - font-size: 12px
          - line-height: 14px
          - background-color: "[[[\n  return \"rgba(var(--color-red),1)\";\n]]]\n"
      value: unavailable
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '''i n'' ''i l'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
      name:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      state:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
  icon_info_line:
    show_icon: true
    show_label: true
    show_name: false
    size: 100%
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''i l'''
      - grid-template-columns: max_content auto
      - grid-template-rows: min-content
      icon:
      - filter: opacity(40%)
      img_cell:
      - place-self: center
      - width: 14px
      - height: 24px
      label:
      - padding: 2px
      - justify-self: start
      - align-self: center
      - font-weight: bolder
      - font-size: 12px
      - margin-left: 0px
      - filter: opacity(40%)
  icon_more_info:
    custom_fields:
      item1:
        card:
          entity: '[[[ return entity.entity_id ]]]'
          styles:
            card:
            - overflow: visible
          tap_action:
            action: more-info
          template:
          - icon
          type: custom:button-card
      item2:
        card:
          custom_fields: null
          entity: '[[[ return entity.entity_id ]]]'
          show_icon: false
          styles:
            card:
            - padding: 6px
            - margin-left: -6px
            - background-color: rgba(0,0,0,0)
          template:
          - icon_info
          type: custom:button-card
    hold_action:
      action: more-info
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - background-color: rgba(0,0,0,0)
      grid:
      - grid-template-columns: min-content auto
      - column-gap: 0px
    template:
    - list_2_items
  icon_more_info_alert:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                styles:
                  card:
                  - overflow: visible
                template:
                - icon_alert
                - ulm_actions_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                show_icon: false
                styles:
                  card:
                  - padding: 6px
                  - margin-left: -6px
                  - background-color: rgba(0,0,0,0)
                template:
                - icon_info
                - ulm_actions_name
                type: custom:button-card
          show_icon: false
          show_label: false
          show_name: false
          styles:
            card:
            - background-color: rgba(0,0,0,0)
            grid:
            - grid-template-columns: min-content auto
            - column-gap: 0px
          template:
          - list_2_items
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '''item1'''
      - grid-template-columns: 1fr
      - grid-template-rows: 1fr
      - column-gap: 0px
  icon_more_info_new:
    custom_fields:
      item1:
        card:
          custom_fields:
            item1:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                styles:
                  card:
                  - overflow: visible
                template:
                - icon
                - ulm_actions_icon
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return entity.entity_id ]]]'
                show_icon: false
                styles:
                  card:
                  - padding: 6px
                  - margin-left: -6px
                  - background-color: rgba(0,0,0,0)
                template:
                - icon_info
                - ulm_actions_name
                type: custom:button-card
          show_icon: false
          show_label: false
          show_name: false
          styles:
            card:
            - background-color: rgba(0,0,0,0)
            grid:
            - grid-template-columns: min-content auto
            - column-gap: 0px
          template:
          - list_2_items
          type: custom:button-card
    show_icon: false
    show_label: false
    show_name: false
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '''item1'''
      - grid-template-columns: 1fr
      - grid-template-rows: 1fr
      - column-gap: 0px
  icon_only:
    color: var(--google-grey)
    show_icon: true
    show_label: true
    show_name: false
    size: 20px
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      grid:
      - grid-template-areas: '''i l'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
  indigo_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-indigo), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-indigo),1)
      img_cell:
      - background-color: rgba(var(--color-indigo), 0.2)
      label:
      - color: rgba(var(--color-indigo-text),1)
      name:
      - color: rgba(var(--color-indigo-text),1)
  indigo_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-indigo),1)
        img_cell:
        - background-color: rgba(var(--color-indigo), 0.2)
        label:
        - color: rgba(var(--color-indigo-text),1)
        name:
        - color: rgba(var(--color-indigo-text),1)
      value: 'off'
  indigo_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-indigo), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-indigo),1)
        img_cell:
        - background-color: rgba(var(--color-indigo), 0.2)
        label:
        - color: rgba(var(--color-indigo-text),1)
        name:
        - color: rgba(var(--color-indigo-text),1)
      value: 'on'
  light:
    template: card_light
  light-blue_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-light-blue), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-light-blue),1)
      img_cell:
      - background-color: rgba(var(--color-light-blue), 0.2)
      label:
      - color: rgba(var(--color-light-blue-text),1)
      name:
      - color: rgba(var(--color-light-blue-text),1)
  light-blue_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-light-blue),1)
        img_cell:
        - background-color: rgba(var(--color-light-blue), 0.2)
        label:
        - color: rgba(var(--color-light-blue-text),1)
        name:
        - color: rgba(var(--color-light-blue-text),1)
      value: 'off'
  light-blue_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-light-blue), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-light-blue),1)
        img_cell:
        - background-color: rgba(var(--color-light-blue), 0.2)
        label:
        - color: rgba(var(--color-light-blue-text),1)
        name:
        - color: rgba(var(--color-light-blue-text),1)
      value: 'on'
  light-green_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-light-green), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-light-green),1)
      img_cell:
      - background-color: rgba(var(--color-light-green), 0.2)
      label:
      - color: rgba(var(--color-light-green-text),1)
      name:
      - color: rgba(var(--color-light-green-text),1)
  light-green_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-light-green),1)
        img_cell:
        - background-color: rgba(var(--color-light-green), 0.2)
        label:
        - color: rgba(var(--color-light-green-text),1)
        name:
        - color: rgba(var(--color-light-green-text),1)
      value: 'off'
  light-green_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-light-green), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-light-green),1)
        img_cell:
        - background-color: rgba(var(--color-light-green), 0.2)
        label:
        - color: rgba(var(--color-light-green-text),1)
        name:
        - color: rgba(var(--color-light-green-text),1)
      value: 'on'
  light_slider:
    template: card_light_slider
    variables:
      ulm_card_light_slider_name: '[[[ return variables.name ]]]'
  lime_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-lime), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-lime),1)
      img_cell:
      - background-color: rgba(var(--color-lime), 0.2)
      label:
      - color: rgba(var(--color-lime-text),1)
      name:
      - color: rgba(var(--color-lime-text),1)
  lime_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-lime),1)
        img_cell:
        - background-color: rgba(var(--color-lime), 0.2)
        label:
        - color: rgba(var(--color-lime-text),1)
        name:
        - color: rgba(var(--color-lime-text),1)
      value: 'off'
  lime_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-lime), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-lime),1)
        img_cell:
        - background-color: rgba(var(--color-lime), 0.2)
        label:
        - color: rgba(var(--color-lime-text),1)
        name:
        - color: rgba(var(--color-lime-text),1)
      value: 'on'
  list_2_items:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2'''
      - grid-template-columns: 1fr 1fr
      - grid-template-rows: min-content
      - column-gap: 7px
  list_3_items:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2 item3'''
      - grid-template-columns: 1fr 1fr 1fr
      - grid-template-rows: min-content
      - column-gap: 7px
  list_4_items:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2 item3 item4'''
      - grid-template-columns: 1fr 1fr 1fr 1fr
      - grid-template-rows: min-content
      - column-gap: 7px
  list_items:
    template: list_3_items
  list_items_line:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2 item3'''
      - grid-template-columns: max-content max-content max-content
      - grid-template-rows: min-content
      - column-gap: 8px
  list_one_third_items:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2'''
      - grid-template-columns: 2fr 1fr
      - grid-template-rows: min-content
      - column-gap: 7px
  list_two_third_items:
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      grid:
      - grid-template-areas: '''item1 item2'''
      - grid-template-columns: 1fr 2fr
      - grid-template-rows: min-content
      - column-gap: 7px
  media:
    template: card_media_player
  media_buttons:
    template: card_media_player_controls
    variables:
      ulm_card_media_player_controls_entity: '[[[ return variables.entity ]]]'
      ulm_card_media_player_controls_name: '[[[ return variables.name ]]]'
  media_mini_album:
    template: card_media_player_with_cover
  media_on:
    state:
    - id: playing
      styles:
        icon:
        - color: rgba(var(--color-pink),1)
        img_cell:
        - background-color: rgba(var(--color-pink), 0.2)
        label:
        - color: rgba(var(--color-pink-text),1)
        name:
        - color: rgba(var(--color-pink-text),1)
      value: playing
    - id: paused
      styles:
        icon:
        - color: rgba(var(--color-cyan),1)
        img_cell:
        - background-color: rgba(var(--color-cyan), 0.2)
        label:
        - color: rgba(var(--color-cyan-text),1)
        name:
        - color: rgba(var(--color-cyan-text),1)
      value: paused
    - id: standby
      styles:
        icon:
        - color: rgba(var(--color-blue-grey),1)
        img_cell:
        - background-color: rgba(var(--color-blue-grey), 0.2)
        label:
        - color: rgba(var(--color-blue-grey-text),1)
        name:
        - color: rgba(var(--color-blue-grey-text),1)
      value: standby
    - id: 'on'
      styles:
        icon:
        - color: rgba(var(--color-blue-grey),1)
        img_cell:
        - background-color: rgba(var(--color-blue-grey), 0.2)
        label:
        - color: rgba(var(--color-blue-grey-text),1)
        name:
        - color: rgba(var(--color-blue-grey-text),1)
      value: 'on'
  orange_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-orange), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-orange),1)
      img_cell:
      - background-color: rgba(var(--color-orange), 0.2)
      label:
      - color: rgba(var(--color-orange-text),1)
      name:
      - color: rgba(var(--color-orange-text),1)
  orange_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-orange),1)
        img_cell:
        - background-color: rgba(var(--color-orange), 0.2)
        label:
        - color: rgba(var(--color-orange-text),1)
        name:
        - color: rgba(var(--color-orange-text),1)
      value: 'off'
  orange_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-orange), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-orange),1)
        img_cell:
        - background-color: rgba(var(--color-orange), 0.2)
        label:
        - color: rgba(var(--color-orange-text),1)
        name:
        - color: rgba(var(--color-orange-text),1)
      value: 'on'
  outlet:
    template: card_power_outlet
  pink_no_state:
    styles:
      icon:
      - color: rgba(var(--color-pink),1)
      img_cell:
      - background-color: rgba(var(--color-pink), 0.2)
      label:
      - color: rgba(var(--color-pink-text),1)
      name:
      - color: rgba(var(--color-pink-text),1)
  pink_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-pink),1)
        img_cell:
        - background-color: rgba(var(--color-pink), 0.2)
        label:
        - color: rgba(var(--color-pink-text),1)
        name:
        - color: rgba(var(--color-pink-text),1)
      value: 'off'
  pink_on:
    state:
    - id: 'on'
      styles:
        icon:
        - color: rgba(var(--color-pink),1)
        img_cell:
        - background-color: rgba(var(--color-pink), 0.2)
        label:
        - color: rgba(var(--color-pink-text),1)
        name:
        - color: rgba(var(--color-pink-text),1)
      value: 'on'
  popup_4_items:
    styles:
      card:
      - background: var(--primary-background-color)
      - box-shadow: none
      - padding: 4%
      custom_fields:
        item1:
        - align-self: start
        item2:
        - align-self: start
        item3:
        - align-self: start
        item4:
        - align-self: end
        - margin-top: 25px
      grid:
      - grid-template-areas: '''item1'' ''item2'' ''item3'' ''item4'''
      - grid-template-columns: 1fr
  popup_button:
    color: var(--primary-color)
    show_icon: true
    show_name: true
    styles:
      card:
      - background: none
      - box-shadow: none
      - border-radius: none
      - padding: 12px
      grid:
      - grid-template-areas: '''i'' ''n'''
      - grid-template-columns: auto
      - grid-template-rows: min-content min-content
      icon:
      - color: var(--primary-color)
      img_cell:
      - background-color: var(--card-background-color)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      - box-shadow: var(--ha-card-box-shadow)
      name:
      - justify-self: center
      - font-weight: bold
      - font-size: 14px
      - margin-top: 12px
  popup_button_airconditionner:
    state:
    - styles:
        card:
        - background-color: var(--card-background-color)
        - box-shadow: var( --ha-card-box-shadow)
        - transform: scale(0.95)
      value: '[[[ return variables.ulm_popup_button_airconditionner_state ]]]'
    styles:
      card:
      - background-color: transparent
      - width: 42px
      - border-radius: 50%
    tap_action:
      action: call-service
      service: climate.set_hvac_mode
      service_data:
        entity_id: climate.hvac
        hvac_mode: '[[[ return variables.ulm_popup_button_airconditionner_state ]]]'
    template: widget_icon
    variables:
      ulm_popup_button_airconditionner_state: 'off'
  popup_button_app:
    icon: "[[[\n  var icon =  entity.attributes.icon || \"mdi:speaker\";\n  if(entity?.attributes?.app_name){\n\
      \    var app = entity.attributes.app_name.toLowerCase();\n    if(app == \"spotify\"\
      ){\n      var icon = \"mdi:spotify\";\n    } else if(app == \"google podcasts\"\
      ){\n      var icon = \"mdi:google-podcast\";\n    } else if(app == \"plex\"\
      ){\n      var icon = \"mdi:plex\";\n    } else if(app == \"soundcloud\"){\n\
      \      var icon = \"mdi:soundcloud\";\n    } else if(app == \"youtube music\"\
      ){\n      var icon = \"mdi:youtube\";\n    } else if (app == \"oto music\"){\n\
      \      var icon = \"mdi:music-circle\";\n    } else if(app == \"pandora\"){\n\
      \      var icon = \"mdi:pandora\";\n    } else if(app == \"netflix\"){\n   \
      \   var icon = \"mdi:netflix\";\n    } else if(app == \"bluetooth audio\"){\n\
      \      var icon = \"mdi:bluetooth\";\n    }\n  } else if(entity?.attributes?.media_content_id?.toLowerCase().includes(\"\
      spotify\")){\n      var icon = \"mdi:spotify\";\n  }\n  return icon;\n]]]\n"
    label: "[[[\n  var label = entity.attributes.media_title || entity.attributes.friendly_name;\n\
      \  return label;\n]]]\n"
    name: "[[[\n  var name =  entity.attributes.friendly_name;\n  if(entity?.attributes?.app_name){\n\
      \    var app = entity?.attributes?.app_name?.toLowerCase();\n    if(app == \"\
      spotify\"){\n      var name = \"Spotify\";\n    } else if(app == \"google podcasts\"\
      ){\n      var name = \"Google-Podcast\";\n    } else if(app == \"plex\"){\n\
      \      var name = \"Plex\";\n    } else if(app == \"soundcloud\"){\n      var\
      \ name = \"Soundcloud\";\n    } else if(app == \"youtube music\"){\n      var\
      \ name = \"Youtube\";\n    } else if (app == \"oto music\"){\n      var name\
      \ = \"Oto Music\";\n    } else if(app == \"pandora\"){\n      var name = \"\
      Pandora\";\n    } else if(app == \"netflix\"){\n      var name = \"Netflix\"\
      ;\n    } else if(app == \"bluetooth audio\"){\n      var name = \"Bluetooth\"\
      ;\n    }\n  } else if(entity?.attributes?.media_content_id?.toLowerCase().includes(\"\
      spotify\")){\n      var name = \"Spotify\";\n  }\n  return name;\n]]]\n"
    show_label: true
    show_name: true
    styles:
      grid:
      - grid-template-areas: '''i n'' ''i l'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
      icon:
      - color: "[[[\n  var color = \"var(--color-theme)\";\n  if(entity?.attributes?.app_name){\n\
          \    var app = entity.attributes?.app_name.toLowerCase();\n    if(app =\
          \ \"spotify\"){\n      var color = \"#1DB954\";\n    }\n  } else if(entity?.attributes?.media_content_id?.toLowerCase().includes(\"\
          spotify\")){\n    var color = \"#1DB954\";\n  }\n  return color;\n]]]\n"
      img_cell:
      - border: 1px solid var(--color-theme)
      - border-shadow: none
      - background-color: "[[[\n  var color = \"var(--color-theme)\";\n  if(entity?.attributes?.app_name){\n\
          \    var app = entity?.attributes?.app_name?.toLowerCase();\n    if(app\
          \ = \"spotify\"){\n      var color = \"#434343\";\n    }\n  } else if(entity?.attributes?.media_content_id?.toLowerCase().includes(\"\
          spotify\")){\n    var color = \"#434343\";\n  }\n  return color;\n]]]\n"
      label:
      - justify-self: start
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
      name:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      - margin-top: 0px
    template:
    - popup_button
  popup_button_back:
    icon: mdi:arrow-left
    name: '[[[ return variables.ulm_translation_back; ]]]'
    styles:
      img_cell:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.25)
      name:
      - text-transform: uppercase
      - color: rgba(var(--color-theme),0.5)
    tap_action:
      action: fire-dom-event
      browser_mod:
        command: close_popup
    template:
    - popup_button
    - ulm_translation_engine
  popup_button_brightness:
    name: '[[[ return variables.ulm_translation_brightness; ]]]'
    template: ulm_translation_engine
  popup_button_color:
    name: '[[[ return variables.ulm_popups_color; ]]]'
    template: ulm_language_variables
  popup_button_color_temp:
    name: '[[[ return variables.ulm_translation_color_temperature; ]]]'
    template: ulm_translation_engine
  popup_button_history:
    name: '[[[ return variables.ulm_translation_history; ]]]'
    template: ulm_translation_engine
  popup_button_playing:
    icon: mdi:play-circle
    name: Playback
  popup_button_power:
    icon: mdi:power
    name: '[[[ return variables.ulm_translation_state; ]]]'
    styles:
      icon:
      - color: var(--card-background-color)
      img_cell:
      - background-color: var(--primary-color)
      - box-shadow: none
      name:
      - text-transform: uppercase
      - color: rgba(var(--color-theme),0.5)
    tap_action:
      action: toggle
    template:
    - popup_button
    - ulm_translation_engine
  popup_button_selected:
    styles:
      icon:
      - color: rgba(var(--color-blue),1)
      img_cell:
      - background-color: rgba(var(--color-blue), 0.2)
    tap_action:
      action: none
  popup_button_source:
    icon: mdi:playlist-music
    name: '[[[ return variables.ulm_translation_source ]]]'
    styles:
      img_cell:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.25)
      name:
      - text-transform: uppercase
      - color: rgba(var(--color-theme),0.5)
    template:
    - popup_button
    - ulm_translation_engine
  popup_button_stats:
    name: '[[[ return variables.ulm_translation_statistics ]]]'
    template: ulm_translation_engine
  popup_button_volume:
    icon: mdi:volume-high
    name: '[[[ return variables.ulm_volume; ]]]'
    styles:
      img_cell:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.25)
      name:
      - text-transform: uppercase
      - color: rgba(var(--color-theme),0.5)
    tap_action:
      action: more_info
    template:
    - popup_button
    - ulm_language_variables
  popup_card_volume:
    icon: mdi:volume-high
    label: 80%
    show_icon: true
    styles:
      card:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.25)
      grid:
      - grid-template-areas: i l
      - justify-content: space-between
      - display: flex
    template: chips
  popup_chip_controls:
    custom_fields:
      item1:
        card:
          entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
          icon: mdi:skip-previous
          styles:
            icon:
            - color: rgba(var(--color-theme),0.5)
          tap_action:
            action: call-service
            service: media_player.media_previous_track
            service_data:
              entity_id: '[[[ return variables.ulm_popup_media_player_entity]]]'
          template: icon_controls
          type: custom:button-card
      item2:
        card:
          entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
          icon: mdi:play
          state:
          - icon: mdi:pause
            value: playing
          tap_action:
            action: call-service
            service: media_player.media_play_pause
            service_data:
              entity_id: '[[[ return variables.ulm_popup_media_player_entity]]]'
          template: icon_controls
          type: custom:button-card
      item3:
        card:
          entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
          icon: mdi:skip-next
          styles:
            icon:
            - color: rgba(var(--color-theme),0.5)
          tap_action:
            action: call-service
            service: media_player.media_next_track
            service_data:
              entity_id: '[[[ return variables.ulm_popup_media_player_entity]]]'
          template: icon_controls
          type: custom:button-card
    styles:
      card:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.5)
      - height: 42px
      - border-radius: 21px
      grid:
      - grid-template-areas: item1 item2 item3
      - justify-content: space-evenly
      - display: flex
      - grid-template-columns: min-content min-content min-content
    template: chips
    variables:
      ulm_popup_media_player_entity: '[[[ return variables.ulm_popup_media_player_entity
        ]]]'
  popup_chip_volume:
    icon: mdi:volume-high
    label: "[[[\n  let level = entity.attributes.volume_level\n  return level * 100\
      \ + '%'\n]]]\n"
    show_icon: true
    styles:
      card:
      - background: none
      - box-shadow: none
      - border: 1px solid rgba(var(--color-theme),0.25)
      - height: 42px
      - border-radius: 21px
      grid:
      - grid-template-areas: i l
      - justify-content: space-between
      - display: flex
      img_cell:
      - width: 30px
    template: chips
  popup_default:
    hold_action:
      action: more-info
  popup_header:
    label: '[[[ return variables.ulm_translation_state; ]]]'
    show_label: true
    show_name: true
    styles:
      grid:
      - grid-template-areas: '''i'' ''n'' ''l'''
      - grid-template-columns: auto
      - grid-template-rows: min-content min-content min-content
      icon:
      - color: var(--color-theme)
      label:
      - justify-self: center
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
      name:
      - margin-top: 6px
    template:
    - popup_button
    - ulm_translation_engine
  popup_item4_back_toggle:
    custom_fields:
      item1:
        card:
          template: popup_button_back
          type: custom:button-card
      item2:
        card:
          entity: '[[[ return variables.popup_item4_back_toggle_entity ]]]'
          template: popup_button_power
          type: custom:button-card
    template: popup_list_items
  popup_light:
    hold_action:
      action: fire-dom-event
      browser_mod:
        card:
          template: popup_light_brightness
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
  popup_light_brightness:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                icon: mdi:lightbulb-on
                template:
                - popup_button
                - popup_button_selected
                - popup_button_brightness
                type: custom:button-card
            item2:
              card:
                icon: mdi:sun-thermometer-outline
                styles:
                  card:
                  - display: "[[[\n      var color_temp_modes = [\"color_temp\"];\n\
                      \      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                      \ => color_temp_modes.includes(r))) {\n          return \"block\"\
                      ;\n      }\n      return \"none\";\n]]]\n"
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_color_temp
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_color_temp
                type: custom:button-card
            item3:
              card:
                icon: mdi:palette
                styles:
                  card:
                  - display: "[[[\n      var color_modes = [\"hs\", \"rgb\", \"rgbw\"\
                      , \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                      \ => color_modes.includes(r))) {\n          return \"block\"\
                      ;\n      }\n      return \"none\";\n]]]\n"
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_color
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_color
                type: custom:button-card
          styles:
            card:
            - background: none
            grid:
            - grid-template-areas: "[[[\n      var areas = [];\n      var brightness_modes\
                \ = [\"brightness\", \"hs\", \"color_temp\", \"rgb\", \"rgbw\", \"\
                xy\"];\n      var color_temp_modes = [\"color_temp\"];\n      var\
                \ color_modes = [\"hs\", \"rgb\", \"rgbw\", \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => brightness_modes.includes(r))) {\n          areas.push(\"item1\"\
                );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => color_temp_modes.includes(r))) {\n          areas.push(\"item2\"\
                );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => color_modes.includes(r))) {\n          areas.push(\"item3\");\n\
                \      }\n      return \"\\\"\" + areas.join(\" \") + \"\\\"\";\n\
                ]]]\n"
            - grid-template-columns: "[[[\n      var columns = [];\n      var brightness_modes\
                \ = [\"brightness\", \"hs\", \"color_temp\", \"rgb\", \"rgbw\", \"\
                xy\"];\n      var color_temp_modes = [\"color_temp\"];\n      var\
                \ color_modes = [\"hs\", \"rgb\", \"rgbw\", \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => brightness_modes.includes(r))) {\n          columns.push(\"1fr\"\
                );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => color_temp_modes.includes(r))) {\n          columns.push(\"1fr\"\
                );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
                \ => color_modes.includes(r))) {\n          columns.push(\"1fr\");\n\
                \      }\n      return columns.join(\" \");\n]]]\n"
          template: list_3_items
          type: custom:button-card
      content1:
        card:
          card_mod:
            style: "ha-card {\n  background: none !important;\n  box-shadow: none\
              \ !important;\n}\n.slider-container input[type=\"range\"] {\n  position:\
              \ revert !important;\n  border: 1px solid rgba(var(--color-theme),0.3)\
              \ !important;\n}\n.slider-container {\n  display: flex;\n  justify-content:\
              \ center;\n  align-items: center;\n}\n"
          containerHeight: 320px
          entity: '[[[ return variables.ulm_popup_light_entity ]]]'
          height: 100px
          left: 17%
          mainSliderColor: "[[[\n    var color = states[variables.ulm_popup_light_entity].attributes.rgb_color;\n\
            \    if (states[variables.ulm_popup_light_entity].state == \"unavailable\"\
            ){\n       return \"rgba(var(--color-grey),1)\";\n    }\n    else if (color){\n\
            \       return \"rgba(\" + color + \",1)\";\n    }\n    else{\n      return\
            \ \"rgba(var(--color-yellow),1)\";\n    }\n]]]\n"
          mainSliderColorOff: rgba(var(--color-theme),0.1)
          radius: 20px
          rotate: 270
          secondarySliderColor: "[[[\n    var color = states[variables.ulm_popup_light_entity].attributes.rgb_color;\n\
            \    if (states[variables.ulm_popup_light_entity].state == \"unavailable\"\
            ){\n       return \"rgba(var(--color-grey),0.2)\";\n    }\n    else if\
            \ (color){\n       return \"rgba(\" + color + \",0.2)\";\n    }\n    else{\n\
            \      return \"rgba(var(--color-yellow),0.2)\";\n    }\n    ]]]\n"
          secondarySliderColorOff: var(--color-theme)
          thumbHorizontalPadding: 0px
          thumbWidth: 0px
          top: 100px
          type: custom:my-slider
          width: 250px
      content2:
        card:
          card_mod:
            style: "ha-card {\n  background: none !important;\n  box-shadow: none\
              \ !important;\n}\n.slider-container input[type=\"range\"] {\n  position:\
              \ revert !important;\n  border: 1px solid rgba(208, 208, 208, 1) !important;\n\
              \  background: linear-gradient(90deg, #c9f2fc, #fff, #f3db6d);\n  --thumb-top:\
              \ 1px !important;\n}\n.slider-container input[type=\"range\"]::-webkit-slider-thumb\
              \ {\n  margin-top: 7px;\n  background-color: rgba(1, 1, 1, 0);\n}\n\
              .slider-container input[type=\"range\"]::-moz-range-thumb {\n  background-color:\
              \ rgba(1, 1, 1, 0);\n}\n.slider-container {\n  display: flex;\n  justify-content:\
              \ center;\n  align-items: center;\n}\n"
          containerHeight: 320px
          entity: '[[[ return variables.ulm_popup_light_entity ]]]'
          function: Warmth
          height: 100px
          mainSliderColor: rgba(255, 255, 255, 0)
          mainSliderColorOff: rgba(255, 255, 255, 0)
          maxBar: '[[[ return states[variables.ulm_popup_light_entity].attributes.max_mireds
            ]]]'
          maxSet: '[[[ return states[variables.ulm_popup_light_entity].attributes.max_mireds
            ]]]'
          minBar: '[[[ return states[variables.ulm_popup_light_entity].attributes.min_mireds
            ]]]'
          minSet: '[[[ return states[variables.ulm_popup_light_entity].attributes.min_mireds
            ]]]'
          radius: 20px
          rotate: 270
          thumbColor: '#000'
          thumbHeight: 85px
          thumbHorizontalPadding: 0px
          thumbWidth: 2%
          type: custom:my-slider
          width: 250px
      content3:
        card:
          brightness: false
          card_mod:
            style: "ha-card {\n  background: none !important;\n  box-shadow: none\
              \ !important;\n  padding: 10px 0 10px 0 !important;\n}\n"
          child_card: true
          color_temp: false
          consolidate_entities: true
          effects_list: false
          entity: '[[[ return variables.ulm_popup_light_entity ]]]'
          hide_header: true
          persist_features: true
          smooth_color_wheel: true
          type: custom:light-entity-card
          white_value: false
      footer:
        card:
          custom_fields:
            item1:
              card:
                template: popup_button_back
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.ulm_popup_light_entity ]]]'
                template: popup_button_power
                type: custom:button-card
          template: popup_list_items
          type: custom:button-card
      header:
        card:
          entity: '[[[ return variables.ulm_popup_light_entity ]]]'
          template: popup_header
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content1\" \"buttons\" \"footer\" !important;\n    grid-template-rows:\
      \ 16vh 52vh 14vh 14vh !important;\n    grid-template-columns: 1fr !important;\n\
      \  }\n  #buttons {\n    display: block !important;\n    align-self: start !important;\n\
      \  }\n  #content2 {\n    display: none !important;\n  }\n  #content3 {\n   \
      \ display: none !important;\n  }\n  #card {\n    height: 100vh;\n    overflow:\
      \ hidden;\n    position: fixed;\n  }\n}\n"
    styles:
      card:
      - background: var(--primary-background-color)
      - box-shadow: none
      - padding: 4%
      custom_fields:
        buttons:
        - display: none
        content1:
        - align-self: center
        - display: "[[[\n      var brightness_modes = [\"brightness\", \"hs\", \"\
            color_temp\", \"rgb\", \"rgbw\", \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
            \ => brightness_modes.includes(r))) {\n          return \"block\";\n \
            \     }\n      return \"none\";\n]]]\n"
        content2:
        - align-self: center
        - display: "[[[\n      var color_temp_modes = [\"color_temp\"];\n      if\
            \ (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
            \ => color_temp_modes.includes(r))) {\n          return \"block\";\n \
            \     }\n      return \"none\";\n]]]\n"
        content3:
        - align-self: center
        - display: "[[[\n      var color_modes = [\"hs\", \"rgb\", \"rgbw\", \"xy\"\
            ];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
            \ => color_modes.includes(r))) {\n          return \"block\";\n      }\n\
            \      return \"none\";\n]]]\n"
        footer:
        - align-self: end
        - margin-top: 25px
        header:
        - align-self: start
      grid:
      - grid-template-areas: "[[[\n      var contents = [];\n      var brightness_modes\
          \ = [\"brightness\", \"hs\", \"color_temp\", \"rgb\", \"rgbw\", \"xy\"];\n\
          \      var color_temp_modes = [\"color_temp\"];\n      var color_modes =\
          \ [\"hs\", \"rgb\", \"rgbw\", \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => brightness_modes.includes(r))) {\n          contents.push(\"content1\"\
          );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => color_temp_modes.includes(r))) {\n          contents.push(\"content2\"\
          );\n      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => color_modes.includes(r))) {\n          contents.push(\"content3\");\n\
          \      }\n      return \"\\\"\" + \"header \".repeat(contents.length) +\
          \ \"\\\" \" + \"\\\"\" + contents.join(\" \") + \"\\\" \" + \"\\\"\" + \"\
          footer \".repeat(contents.length) + \"\\\"\";\n]]]\n"
      - grid-template-rows: 16vh 56vh 14vh
      - grid-template-columns: "[[[\n      var columns = [];\n      var brightness_modes\
          \ = [\"brightness\", \"hs\", \"color_temp\", \"rgb\", \"rgbw\", \"xy\"];\n\
          \      var color_temp_modes = [\"color_temp\"];\n      var color_modes =\
          \ [\"hs\", \"rgb\", \"rgbw\", \"xy\"];\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => brightness_modes.includes(r))) {\n          columns.push(\"1fr\");\n\
          \      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => color_temp_modes.includes(r))) {\n          columns.push(\"1fr\");\n\
          \      }\n      if (states[variables.ulm_popup_light_entity].attributes.supported_color_modes.some(r\
          \ => color_modes.includes(r))) {\n          columns.push(\"2fr\");\n   \
          \   }\n      return columns.join(\" \");\n]]]\n"
  popup_light_color:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                icon: mdi:lightbulb-on
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_brightness
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_brightness
                type: custom:button-card
            item2:
              card:
                icon: mdi:sun-thermometer-outline
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_color_temp
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_color_temp
                type: custom:button-card
            item3:
              card:
                icon: mdi:palette
                template:
                - popup_button
                - popup_button_selected
                - popup_button_color
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_3_items
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content3\" \"buttons\" \"footer\" !important;\n    grid-template-rows:\
      \ 16vh 52vh 14vh 14vh !important;\n    grid-template-columns: 1fr !important;\n\
      \  }\n  #buttons {\n    display: block !important;\n    align-self: start !important;\n\
      \  }\n  #content1 {\n    display: none;\n  }\n  #content2 {\n    display: none;\n\
      \  }\n"
    styles:
      custom_fields:
        content1:
        - display: none
        content2:
        - display: none
        content3:
        - display: block
        - align-self: center
      grid:
      - grid-template-areas: '''header'' ''content3'' ''buttons'' ''footer'''
      - grid-template-rows: 16vh 52vh 14vh 14vh;
      - grid-template-columns: 1fr
    template: popup_light_brightness
  popup_light_color_temp:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                icon: mdi:lightbulb-on
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_brightness
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_brightness
                type: custom:button-card
            item2:
              card:
                icon: mdi:sun-thermometer-outline
                template:
                - popup_button
                - popup_button_selected
                - popup_button_color_temp
                type: custom:button-card
            item3:
              card:
                icon: mdi:palette
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_light_color
                      type: custom:button-card
                      variables:
                        ulm_popup_light_entity: '[[[ return variables.ulm_popup_light_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_color
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_3_items
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content2\" \"buttons\" \"footer\" !important;\n    grid-template-rows:\
      \ 16vh 52vh 14vh 14vh !important;\n    grid-template-columns: 1fr !important;\n\
      \  }\n  #buttons {\n    display: block !important;\n    align-self: start !important;\n\
      \  }\n  #content1 {\n    display: none;\n  }\n  #content3 {\n    display: none;\n\
      \  }\n"
    styles:
      custom_fields:
        content1:
        - display: none
        content2:
        - display: block
        - align-self: center
        content3:
        - display: none
      grid:
      - grid-template-areas: '''header'' ''content2'' ''buttons'' ''footer'''
      - grid-template-rows: 16vh 52vh 14vh 14vh;
      - grid-template-columns: 1fr
    template: popup_light_brightness
  popup_list_items:
    styles:
      card:
      - background: none
      - border-radius: none
      grid:
      - grid-template-areas: '''item1 item2 item3'''
      - justify-content: space-evenly
      - display: flex
    template: list_items
  popup_media_player:
    hold_action:
      action: fire-dom-event
      browser_mod:
        card:
          template: popup_media_player_infos
          type: custom:button-card
          variables:
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
  popup_media_player_infos:
    custom_fields:
      content1:
        card:
          custom_fields:
            app:
              card:
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                template: popup_button_app
                type: custom:button-card
            bar:
              card:
                custom_fields:
                  item1:
                    card:
                      styles:
                        card:
                        - background: none
                        - box-shadow: none
                        - padding: 0px
                      template: popup_chip_controls
                      type: custom:button-card
                      variables:
                        ulm_popup_media_player_entity: '[[[ return variables.ulm_popup_media_player_entity
                          ]]]'
                  item2:
                    card:
                      entity: '[[[ return variables.ulm_popup_media_player_entity
                        ]]]'
                      styles:
                        card:
                        - background: none
                        - box-shadow: none
                        - padding: '0'
                      tap_action:
                        action: fire-dom-event
                        browser_mod:
                          card:
                            template: popup_media_player_volume
                            type: custom:button-card
                            variables:
                              ulm_popup_media_player_entity: '[[[ return variables.ulm_popup_media_player_entity
                                ]]]'
                          command: popup
                          hide_header: true
                      template: popup_chip_volume
                      type: custom:button-card
                styles:
                  card:
                  - background: none
                  - box-shadow: none
                  - padding: 0px
                  grid:
                  - display: flex
                  - justify-content: center
                template: list_2_items
                type: custom:button-card
                variables:
                  ulm_popup_media_player_entity: '[[[ return variables.ulm_popup_media_player_entity
                    ]]]'
            control:
              card:
                card_mod:
                  style: "ha-card {\n  background: none !important;\n  box-shadow:\
                    \ none !important;\n  width: 50% !important;\n  margin-left: 6px\
                    \ !important;\n  margin-right: 6px !important;\n}\n.mmp__bg{\n\
                    \  background: none !important;\n}\n"
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                hide:
                  controls: true
                  icon: true
                  info: true
                  name: true
                  power: true
                  progress: true
                  source: true
                  volume: true
                type: custom:mini-media-player
            media:
              card:
                card_mod:
                  style: "ha-card {\n  background: none !important;\n  box-shadow:\
                    \ none !important;\n}\n.mmp__bg{\n  background: none !important;\n\
                    }\n.entity__info{\n  width: 100% !important;\n  text-align: center\
                    \ !important;\n}\n.entity__info__media {\n  font-weight: bold\
                    \ !important;\n  font-size: 14px !important;\n  color: var(--primary-text-color)\
                    \ !important;\n}\n:host {\n  --paper-progress-active-color: blue\
                    \ !important;\n}\n"
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                hide:
                  controls: true
                  icon: true
                  name: true
                  power: true
                  runtime: false
                  source: true
                  volume: true
                type: custom:mini-media-player
            picture:
              card:
                artwork: full-cover
                card_mod:
                  style: "ha-card{\n  width: 25vh !important;\n  height: 25vh !important;\n\
                    }\n"
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                hide:
                  controls: true
                  icon: true
                  info: true
                  name: true
                  power: true
                  progress: true
                  source: true
                  volume: true
                type: custom:mini-media-player
          show_icon: false
          show_label: false
          show_name: false
          styles:
            card:
            - background-blend-mode: soft-light
            - background: "[[[\n  if(hass.themes.darkMode){\n    return states[variables.ulm_popup_media_player_entity].state\
                \ == 'playing' && states[variables.ulm_popup_media_player_entity].attributes.entity_picture\
                \ != null\n    ? ' center / cover url(' + states[variables.ulm_popup_media_player_entity].attributes.entity_picture\
                \ + '), radial-gradient(circle, #333333 90%, grey 105% ,#333333 110%)'\n\
                \    : ''\n  }else{\n    return states[variables.ulm_popup_media_player_entity].state\
                \ == 'playing' && states[variables.ulm_popup_media_player_entity].attributes.entity_picture\
                \ != null\n    ? ' center / cover url(' + states[variables.ulm_popup_media_player_entity].attributes.entity_picture\
                \ + '), radial-gradient(circle, white 5%, grey 100% ,white 110%)'\n\
                \    : ''\n  }\n]]]\n"
            - box-shadow: none
            - padding: 1%
            custom_fields:
              app:
              - justify-self: start
              - align-self: start
              bar:
              - align-self: start
              - background: none
              - box-shadow: none
              - margin-bottom: 12px
              control:
              - background: none
              - box-shadow: none
              media:
              - background: none
              - box-shadow: none
              - width: calc(100vw - 60px)
              - max-width: 370px
              picture:
              - margin-left: auto
              - margin-right: auto
              - background: none
              - box-shadow: none
            grid:
            - grid-template-areas: '''app'' ''picture'' ''media'' ''control'' ''bar'''
          type: custom:button-card
      content2:
        card:
          card_mod:
            style: "ha-card {\n  background: none !important;\n  box-shadow: none\
              \ !important;\n}\n.slider-container input[type=\"range\"] {\n  position:\
              \ revert !important;\n  border: 1px solid rgba(var(--color-theme),0.3)\
              \ !important;\n}\n.slider-container {\n  display: flex;\n  justify-content:\
              \ center;\n  align-items: center;\n}\n"
          containerHeight: 320px
          entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
          height: 100px
          left: 17%
          mainSliderColor: rgba(var(--color-theme),0.1)
          mainSliderColorOff: rgba(var(--color-theme),0.1)
          radius: 20px
          rotate: 270
          secondarySliderColor: var(--color-theme)
          secondarySliderColorOff: var(--color-theme)
          thumbHorizontalPadding: 0px
          thumbWidth: 0px
          top: 100px
          type: custom:my-slider
          width: 250px
      footer:
        card:
          custom_fields:
            item1:
              card:
                template: popup_button_back
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                template: popup_button_power
                type: custom:button-card
            item3:
              card:
                entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
                template: popup_button_source
                type: custom:button-card
          template: popup_list_items
          type: custom:button-card
      header:
        card:
          entity: '[[[ return variables.ulm_popup_media_player_entity ]]]'
          template: popup_header
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content1\" \"footer\" !important;\n    grid-template-rows: 14vh\
      \ 56vh 16vh !important;\n    grid-template-columns: 1fr !important;\n  }\n \
      \ #buttons {\n    display: block !important;\n    align-self: start !important;\n\
      \  }\n  #content2 {\n    display: none;\n  }\n}\n"
    styles:
      card:
      - background: var(--primary-background-color)
      - box-shadow: none
      - padding: 4%
      - border-radius: none
      - height: 100vh
      custom_fields:
        buttons:
        - display: none
        content1:
        - align-self: center
        - background-color: var(--card-background-color)
        - border-radius: var(--border-radius)
        - box-shadow: var(--box-shadow)
        - width: 100%
        - max-width: 400px
        - justify-self: center
        content2:
        - display: none
        footer:
        - align-self: end
        - margin-top: 25px
        - padding-bottom: 4%
        header:
        - align-self: start
      grid:
      - grid-template-areas: '''header'' ''content1'' ''footer'''
      - grid-template-rows: 14vh 56vh 16vh
      - row-gap: 2.5%
    triggers_update: all
  popup_media_player_volume:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_media_player_infos
                      type: custom:button-card
                      variables:
                        ulm_popup_media_player_entity: '[[[ return variables.ulm_popup_media_player_entity
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_playing
                type: custom:button-card
            item2:
              card:
                template:
                - popup_button
                - popup_button_selected
                - popup_button_volume
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_2_items
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content2\" \"buttons\" \"footer\" !important;\n    grid-template-rows:\
      \ 16vh 52vh 14vh 14vh !important;\n    grid-template-columns: 1fr !important;\n\
      \  }\n  #buttons {\n    display: block !important;\n    align-self: start !important;\n\
      \  }\n  #content1 {\n    display: none;\n  }\n"
    styles:
      custom_fields:
        content1:
        - display: none
        content2:
        - display: block
        - align-self: start
      grid:
      - grid-template-areas: '''header'' ''content2'' ''buttons'' ''footer'''
      - grid-template-rows: 16vh 52vh 14vh 14vh;
      - grid-template-columns: 1fr
    template: popup_media_player_infos
  popup_power_outlet:
    hold_action:
      action: fire-dom-event
      browser_mod:
        card:
          template: popup_power_outlet_stats
          type: custom:button-card
          variables:
            ulm_popup_power_outlet_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_power_outlet_graph_sensor: '[[[ return variables.ulm_popup_power_outlet_graph_sensor
              ]]]'
            ulm_popup_power_outlet_sensor1: '[[[ return variables.ulm_popup_power_outlet_sensor1
              ]]]'
            ulm_popup_power_outlet_sensor2: '[[[ return variables.ulm_popup_power_outlet_sensor2
              ]]]'
        command: popup
        hide_header: true
        large: true
  popup_power_outlet_history:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                icon: mdi:chart-line
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_power_outlet_stats
                      type: custom:button-card
                      variables:
                        ulm_popup_power_outlet_entity: '[[[ return variables.ulm_popup_power_outlet_entity
                          ]]]'
                        ulm_popup_power_outlet_graph_sensor: '[[[ return variables.ulm_popup_power_outlet_graph_sensor
                          ]]]'
                        ulm_popup_power_outlet_sensor1: '[[[ return variables.ulm_popup_power_outlet_sensor1
                          ]]]'
                        ulm_popup_power_outlet_sensor2: '[[[ return variables.ulm_popup_power_outlet_sensor2
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_stats
                type: custom:button-card
            item2:
              card:
                icon: mdi:history
                template:
                - popup_button
                - popup_button_selected
                - popup_button_history
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_2_items
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content1\" \"content3\" \"buttons\" \"footer\" !important;\n\
      \    grid-template-rows: 16vh 12vh 40vh 14vh 14vh !important;\n    grid-template-columns:\
      \ 1fr !important;\n  }\n  #buttons {\n    display: block !important;\n    align-self:\
      \ start !important;\n  }\n  #content2 {\n    display: none;\n  }\n"
    styles:
      custom_fields:
        content2:
        - display: none
        content3:
        - display: block
        - align-self: start
      grid:
      - grid-template-areas: '''header'' ''content1'' ''content3'' ''buttons'' ''footer'''
      - grid-template-rows: 16vh 12vh 40vh 14vh 14vh;
      - grid-template-columns: 1fr
    template: popup_power_outlet_stats
  popup_power_outlet_stats:
    custom_fields:
      buttons:
        card:
          custom_fields:
            item1:
              card:
                icon: mdi:chart-line
                template:
                - popup_button
                - popup_button_selected
                - popup_button_stats
                type: custom:button-card
            item2:
              card:
                icon: mdi:history
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    card:
                      template: popup_power_outlet_history
                      type: custom:button-card
                      variables:
                        ulm_popup_power_outlet_entity: '[[[ return variables.ulm_popup_power_outlet_entity
                          ]]]'
                        ulm_popup_power_outlet_graph_sensor: '[[[ return variables.ulm_popup_power_outlet_graph_sensor
                          ]]]'
                        ulm_popup_power_outlet_sensor1: '[[[ return variables.ulm_popup_power_outlet_sensor1
                          ]]]'
                        ulm_popup_power_outlet_sensor2: '[[[ return variables.ulm_popup_power_outlet_sensor2
                          ]]]'
                    command: popup
                    hide_header: true
                template:
                - popup_button
                - popup_button_history
                type: custom:button-card
          styles:
            card:
            - background: none
          template: list_2_items
          type: custom:button-card
      content1:
        card:
          cards:
          - entity: '[[[ return variables.ulm_popup_power_outlet_sensor1 ]]]'
            extra_styles: "@media (min-width: 800px) {\n  ha-card {\n    margin-left:\
              \ calc(100% - 300px) !important;\n  }\n}\n"
            label: '[[[ return states[variables.ulm_popup_power_outlet_sensor1].state
              + states[variables.ulm_popup_power_outlet_sensor1].attributes.unit_of_measurement
              ]]]

              '
            styles:
              card:
              - max-width: 300px
              icon:
              - color: var(--color-theme)
            template:
            - icon_info_bg
            type: custom:button-card
          - entity: '[[[ return variables.ulm_popup_power_outlet_sensor2 ]]]'
            label: '[[[ return states[variables.ulm_popup_power_outlet_sensor2].state
              + states[variables.ulm_popup_power_outlet_sensor2].attributes.unit_of_measurement
              ]]]

              '
            styles:
              card:
              - max-width: 300px
              icon:
              - color: var(--color-theme)
            template:
            - icon_info_bg
            type: custom:button-card
          columns: 2
          square: false
          type: grid
      content2:
        card:
          card_mod:
            style: "ha-card {\n  box-shadow: \"none\" !important;\n  border-radius:\
              \ var(--border-radius) !important;\n  margin-bottom: 37px !important;\n\
              }\n"
          entities:
          - entity: '[[[ return variables.ulm_popup_power_outlet_graph_sensor ]]]'
          height: 276
          hours_to_show: 168
          line_color: var(--info-color)
          show:
            icon: false
            leg"end": false
            name: false
            state: false
          type: custom:mini-graph-card
      content3:
        card:
          card_mod:
            style: "ha-card {\n  box-shadow: none !important;\n  background: none\
              \ !important;\n  height: 257px !important;\n}\nha-logbook {\n  height:\
              \ 242px !important;\n}\nstate-badge {\n  background: red !important;\n\
              }\n"
          entities:
          - '[[[ return variables.ulm_popup_power_outlet_entity ]]]'
          type: logbook
      footer:
        card:
          custom_fields:
            item1:
              card:
                template: popup_button_back
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.ulm_popup_power_outlet_entity ]]]'
                template: popup_button_power
                type: custom:button-card
          template: popup_list_items
          type: custom:button-card
      header:
        card:
          entity: '[[[ return variables.ulm_popup_power_outlet_entity ]]]'
          template: popup_header
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-areas:\
      \ \"header\" \"content1\" \"content2\" \"buttons\" \"footer\" !important;\n\
      \    grid-template-rows: 16vh 12vh 40vh 14vh 14vh !important;\n    grid-template-columns:\
      \ 1fr !important;\n  }\n  #buttons {\n    display: block !important;\n    align-self:\
      \ start !important;\n  }\n  #content3 {\n    display: none;\n  }\n}\n"
    styles:
      card:
      - background: var(--primary-background-color)
      - box-shadow: none
      - padding: 4%
      custom_fields:
        buttons:
        - display: none
        content1:
        - align-self: start
        content2:
        - align-self: start
        content3:
        - align-self: start
        footer:
        - align-self: end
        - margin-top: 25px
        header:
        - align-self: start
      grid:
      - grid-template-areas: '''header header'' ''content1 content1'' ''content2 content3''
          ''footer footer'''
      - grid-template-rows: 16vh 12vh 44vh 14vh
      - grid-template-columns: 1fr 1fr
      - column-gap: 30px
  popup_subtitle:
    styles:
      card:
      - margin-left: 20px
      name:
      - font-weight: 500
      - font-size: 1.2rem
    template: title
  popup_thermostat:
    hold_action:
      action: fire-dom-event
      browser_mod:
        card:
          template: popup_thermostat_temperature
          type: custom:button-card
          variables:
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
  popup_thermostat_temperature:
    custom_fields:
      buttons:
        card:
          custom_fields:
            auto:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:autorenew
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: auto
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: auto
                template: widget_icon
                type: custom:button-card
            cool:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:snowflake
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: cool
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: cool
                template: widget_icon
                type: custom:button-card
            dry:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:water
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: dry
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: dry
                template: widget_icon
                type: custom:button-card
            fan_only:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:fan
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: fan_only
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: fan_only
                template: widget_icon
                type: custom:button-card
            heat:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:fire
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: heat
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: heat
                template: widget_icon
                type: custom:button-card
            heat_cool:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                icon: mdi:sun-snowflake
                state:
                - styles:
                    card:
                    - background-color: var(--card-background-color)
                    - box-shadow: var( --ha-card-box-shadow)
                    - transform: scale(0.95)
                  value: heat_cool
                styles:
                  card:
                  - background-color: transparent
                  - height: 42px
                  - width: 42px
                  - border-radius: 50%
                  - box-shadow: none
                tap_action:
                  action: call-service
                  service: climate.set_hvac_mode
                  service_data:
                    entity_id: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                    hvac_mode: heat_cool
                template: widget_icon
                type: custom:button-card
          styles:
            card:
            - box-shadow: none
            - padding: 0px
            - border-radius: 21px
            - background-color: rgba(var(--color-theme),0.1)
            custom_fields:
              auto:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  auto\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              cool:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  cool\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              dry:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  dry\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              fan_only:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  fan_only\")) {\n      return \"block\";\n  } else {\n      return\
                  \ \"none\";\n  }\n]]]\n"
              heat:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  heat\")) {\n      return \"block\";\n  } else {\n      return \"\
                  none\";\n  }\n]]]\n"
              heat_cool:
              - display: "[[[\n  if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                  heat_cool\")) {\n      return \"block\";\n  } else {\n      return\
                  \ \"none\";\n  }\n]]]\n"
            grid:
            - grid-template-areas: "[[[\n      var areas = [];\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                auto\")) {\n          areas.push(\"auto\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                heat\")) {\n          areas.push(\"heat\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                cool\")) {\n          areas.push(\"cool\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                dry\")) {\n          areas.push(\"dry\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                fan_only\")) {\n          areas.push(\"fan_only\");\n      }\n   \
                \   if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                heat_cool\")) {\n          areas.push(\"heat_cool\");\n      }\n \
                \     return \"\\\"\" + areas.join(\" \") + \"\\\"\";\n]]]\n"
            - grid-template-columns: "[[[\n      var columns = [];\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                auto\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                heat\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                cool\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                dry\")) {\n          columns.push(\"1fr\");\n      }\n      if (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                fan_only\")) {\n          columns.push(\"1fr\");\n      }\n      if\
                \ (states[variables.ulm_popup_thermostat_entity].attributes.hvac_modes.includes(\"\
                heat_cool\")) {\n          columns.push(\"1fr\");\n      }\n     \
                \ return columns.join(\" \");\n]]]\n"
            - grid-template-rows: min-content
            - justify-items: center
          type: custom:button-card
      content1:
        card:
          card_mod:
            style: "ha-card {\n  background: none !important;\n  box-shadow: none\
              \ !important;\n  padding: 0 0 20px 0 !important;\n}\n.more-info {\n\
              \  display: none;\n}\n#info {\n  display: none;\n}\n.type-thermostat\
              \ {\n  --mode-color: rgb(var(--color-blue)) !important;\n}\n"
          entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
          type: thermostat
      footer:
        card:
          custom_fields:
            item1:
              card:
                template: popup_button_back
                type: custom:button-card
            item2:
              card:
                entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
                template: popup_button_power
                type: custom:button-card
          template: popup_list_items
          type: custom:button-card
      header:
        card:
          entity: '[[[ return variables.ulm_popup_thermostat_entity ]]]'
          template: popup_header
          type: custom:button-card
    extra_styles: "@media (max-width: 800px) {\n  #container {\n    grid-template-rows:\
      \ 16vh 52vh 14vh 14vh !important;\n  }\n  #buttons {\n    width: 100% !important;\n\
      \  }\n"
    styles:
      card:
      - background: var(--primary-background-color)
      - box-shadow: none
      - padding: 4%
      custom_fields:
        buttons:
        - align-self: start
        - width: 50%
        - margin: 0 auto
        content1:
        - align-self: center
        footer:
        - align-self: end
        - margin-top: 25px
        header:
        - align-self: start
      grid:
      - grid-template-areas: '''header'' ''content1'' ''buttons'' ''footer'''
      - grid-template-rows: 16vh 42vh 14vh 14vh
      - grid-template-columns: 1fr
      - column-gap: 30px
  purple_no_state:
    styles:
      icon:
      - color: rgba(var(--color-purple),1)
      img_cell:
      - background-color: rgba(var(--color-purple), 0.2)
      label:
      - color: rgba(var(--color-purple-text),1)
      name:
      - color: rgba(var(--color-purple-text),1)
  purple_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-purple),1)
        img_cell:
        - background-color: rgba(var(--color-purple), 0.2)
        label:
        - color: rgba(var(--color-purple-text),1)
        name:
        - color: rgba(var(--color-purple-text),1)
      value: 'off'
  purple_on:
    state:
    - id: 'on'
      styles:
        icon:
        - color: rgba(var(--color-purple),1)
        img_cell:
        - background-color: rgba(var(--color-purple), 0.2)
        label:
        - color: rgba(var(--color-purple-text),1)
        name:
        - color: rgba(var(--color-purple-text),1)
      value: 'on'
  red_no_state:
    styles:
      icon:
      - color: rgba(var(--color-red),1)
      img_cell:
      - background-color: rgba(var(--color-red), 0.2)
      label:
      - color: rgba(var(--color-red-text),1)
      name:
      - color: rgba(var(--color-red-text),1)
  red_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-red),1)
        img_cell:
        - background-color: rgba(var(--color-red), 0.2)
        label:
        - color: rgba(var(--color-red-text),1)
        name:
        - color: rgba(var(--color-red-text),1)
      value: 'off'
  red_on:
    state:
    - id: 'on'
      styles:
        icon:
        - color: rgba(var(--color-red),1)
        img_cell:
        - background-color: rgba(var(--color-red), 0.2)
        label:
        - color: rgba(var(--color-red-text),1)
        name:
        - color: rgba(var(--color-red-text),1)
      value: 'on'
  teal_no_state:
    styles:
      card:
      - background-color: rgba(var(--color-background-teal), var(--opacity-bg))
      icon:
      - color: rgba(var(--color-teal),1)
      img_cell:
      - background-color: rgba(var(--color-teal), 0.2)
      label:
      - color: rgba(var(--color-teal-text),1)
      name:
      - color: rgba(var(--color-teal-text),1)
  teal_off:
    state:
    - id: 'off'
      styles:
        icon:
        - color: rgba(var(--color-teal),1)
        img_cell:
        - background-color: rgba(var(--color-teal), 0.2)
        label:
        - color: rgba(var(--color-teal-text),1)
        name:
        - color: rgba(var(--color-teal-text),1)
      value: 'off'
  teal_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-teal), var(--opacity-bg))
        icon:
        - color: rgba(var(--color-teal),1)
        img_cell:
        - background-color: rgba(var(--color-teal), 0.2)
        label:
        - color: rgba(var(--color-teal-text),1)
        name:
        - color: rgba(var(--color-teal-text),1)
      value: 'on'
  title:
    template: card_title
  ulm_actions_card:
    double_tap_action:
      action: "[[[\n  var action = variables.ulm_card_double_tap_action;\n  let domain\
        \ = entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    hold_action:
      action: "[[[\n  var action = variables.ulm_card_hold_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    tap_action:
      action: "[[[\n  var action = variables.ulm_card_tap_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    template:
    - ulm_custom_actions
  ulm_actions_icon:
    double_tap_action:
      action: "[[[\n  var action = variables.ulm_icon_double_tap_action;\n  let domain\
        \ = entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    hold_action:
      action: "[[[\n  var action = variables.ulm_icon_hold_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    tap_action:
      action: "[[[\n  var action = variables.ulm_icon_tap_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    template:
    - ulm_custom_actions
  ulm_actions_name:
    double_tap_action:
      action: "[[[\n  var action = variables.ulm_name_double_tap_action;\n  let domain\
        \ = entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    hold_action:
      action: "[[[\n  var action = variables.ulm_name_hold_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    tap_action:
      action: "[[[\n  var action = variables.ulm_name_tap_action;\n  let domain =\
        \ entity.entity_id.substr(0, entity.entity_id.indexOf(\".\"));\n\n  if (domain\
        \ == \"binary_sensor\" || domain == \"sensor\"){\n    if (action == 'toggle')\n\
        \      action = 'none';\n  }\n\n  if (action == 'adaptive' && !(variables.ulm_input_select_option)\
        \ ){\n    action = 'popup'\n  }\n  if (action == 'adaptive'){\n    action\
        \ = 'call-service'\n  }\n\n  if (action == 'popup' && (variables.ulm_card_light_enable_popup\
        \ || variables.ulm_card_media_player_enable_popup || variables.ulm_card_thermostat_enable_popup)\
        \ ){\n    action = 'fire-dom-event'\n  }\n  if (action == 'popup'){\n    action\
        \ = 'more-info'\n  }\n\n  return action\n]]]\n"
      browser_mod:
        card:
          template: "[[[\n  if (variables.ulm_card_light_enable_popup){\n    return\
            \ 'popup_light_brightness'\n  }\n  if (variables.ulm_card_thermostat_enable_popup){\n\
            \    return 'popup_thermostat_temperature'\n  }\n  if (variables.ulm_card_media_player_enable_popup){\n\
            \    return 'popup_media_player_infos'\n  }\n]]]\n"
          type: custom:button-card
          variables:
            ulm_popup_light_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_media_player_entity: '[[[ return entity.entity_id ]]]'
            ulm_popup_thermostat_entity: '[[[ return entity.entity_id ]]]'
        command: popup
        hide_header: true
        large: true
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return variables.ulm_input_select ]]]'
        option: '[[[ return variables.ulm_input_select_option ]]]'
    template:
    - ulm_custom_actions
  ulm_custom_actions:
    variables:
      ulm_card_double_tap_action: adaptive
      ulm_card_hold_action: more-info
      ulm_card_tap_action: toggle
      ulm_icon_double_tap_action: adaptive
      ulm_icon_hold_action: more-info
      ulm_icon_tap_action: toggle
      ulm_name_double_tap_action: adaptive
      ulm_name_hold_action: more-info
      ulm_name_tap_action: toggle
  ulm_language_variables:
    variables:
      ulm_afternoon: Good afternoon
      ulm_currency: $
      ulm_evening: Good evening
      ulm_geen_ophaling: No collections
      ulm_hello: Hello
      ulm_morning: Good morning
      ulm_no_updates_available: No updates available
      ulm_ophaling: Garbage collection!
      ulm_popups_color: Color
      ulm_updates_available: Updates available!
      ulm_volgende_ophaling: Next collections
      ulm_volume: Volume
  ulm_translation_engine:
    variables:
      ulm_translation_back: '[[[ return hass.resources[hass[''language'']][''ui.common.back''];
        ]]]'
      ulm_translation_brightness: '[[[ return hass.resources[hass[''language'']][''ui.card.light.brightness''];
        ]]]'
      ulm_translation_color_temperature: '[[[ return hass.resources[hass[''language'']][''ui.card.light.color_temperature''];
        ]]]'
      ulm_translation_currency: "[[[\n  var hasscurrency = hass.config[\"currency\"\
        ];\n  var currency =\n  { \"AFA\": \"؋\",\n    \"ALL\": \"Lek\",\n    \"DZD\"\
        : \"دج\",\n    \"AOA\": \"Kz\",\n    \"ARS\": \"$\",\n    \"AMD\": \"֏\",\n\
        \    \"AWG\": \"ƒ\",\n    \"AUD\": \"$\",\n    \"AZN\": \"m\",\n    \"BSD\"\
        : \"B$\",\n    \"BHD\": \".د.ب\",\n    \"BDT\": \"৳\",\n    \"BBD\": \"Bds$\"\
        ,\n    \"BYR\": \"Br\",\n    \"BEF\": \"fr\",\n    \"BZD\": \"$\",\n    \"\
        BMD\": \"$\",\n    \"BTN\": \"Nu.\",\n    \"BTC\": \"฿\",\n    \"BOB\": \"\
        Bs.\",\n    \"BAM\": \"KM\",\n    \"BWP\": \"P\",\n    \"BRL\": \"R$\",\n\
        \    \"GBP\": \"£\",\n    \"BND\": \"B$\",\n    \"BGN\": \"Лв.\",\n    \"\
        BIF\": \"FBu\",\n    \"KHR\": \"KHR\",\n    \"CAD\": \"$\",\n    \"CVE\":\
        \ \"$\",\n    \"KYD\": \"$\",\n    \"XOF\": \"CFA\",\n    \"XAF\": \"FCFA\"\
        ,\n    \"XPF\": \"₣\",\n    \"CLP\": \"$\",\n    \"CNY\": \"¥\",\n    \"COP\"\
        : \"$\",\n    \"KMF\": \"CF\",\n    \"CDF\": \"FC\",\n    \"CRC\": \"₡\",\n\
        \    \"HRK\": \"kn\",\n    \"CUC\": \"$, CUC\",\n    \"CZK\": \"Kč\",\n  \
        \  \"DKK\": \"Kr.\",\n    \"DJF\": \"Fdj\",\n    \"DOP\": \"$\",\n    \"XCD\"\
        : \"$\",\n    \"EGP\": \"ج.م\",\n    \"ERN\": \"Nfk\",\n    \"EEK\": \"kr\"\
        ,\n    \"ETB\": \"Nkf\",\n    \"EUR\": \"€\",\n    \"FKP\": \"£\",\n    \"\
        FJD\": \"FJ$\",\n    \"GMD\": \"D\",\n    \"GEL\": \"ლ\",\n    \"DEM\": \"\
        DM\",\n    \"GHS\": \"GH₵\",\n    \"GIP\": \"£\",\n    \"GRD\": \"₯, Δρχ,\
        \ Δρ\",\n    \"GTQ\": \"Q\",\n    \"GNF\": \"FG\",\n    \"GYD\": \"$\",\n\
        \    \"HTG\": \"G\",\n    \"HNL\": \"L\",\n    \"HKD\": \"$\",\n    \"HUF\"\
        : \"Ft\",\n    \"ISK\": \"kr\",\n    \"INR\": \"₹\",\n    \"IDR\": \"Rp\"\
        ,\n    \"IRR\": \"﷼\",\n    \"IQD\": \"د.ع\",\n    \"ILS\": \"₪\",\n    \"\
        ITL\": \"L,£\",\n    \"JMD\": \"J$\",\n    \"JPY\": \"¥\",\n    \"JOD\": \"\
        ا.د\",\n    \"KZT\": \"лв\",\n    \"KES\": \"KSh\",\n    \"KWD\": \"ك.د\"\
        ,\n    \"KGS\": \"лв\",\n    \"LAK\": \"₭\",\n    \"LVL\": \"Ls\",\n    \"\
        LBP\": \"£\",\n    \"LSL\": \"L\",\n    \"LRD\": \"$\",\n    \"LYD\": \"د.ل\"\
        ,\n    \"LTL\": \"Lt\",\n    \"MOP\": \"$\",\n    \"MKD\": \"ден\",\n    \"\
        MGA\": \"Ar\",\n    \"MWK\": \"MK\",\n    \"MYR\": \"RM\",\n    \"MVR\": \"\
        Rf\",\n    \"MRO\": \"MRU\",\n    \"MUR\": \"₨\",\n    \"MXN\": \"$\",\n \
        \   \"MDL\": \"L\",\n    \"MNT\": \"₮\",\n    \"MAD\": \"MAD\",\n    \"MZM\"\
        : \"MT\",\n    \"MMK\": \"K\",\n    \"NAD\": \"$\",\n    \"NPR\": \"₨\",\n\
        \    \"ANG\": \"ƒ\",\n    \"TWD\": \"$\",\n    \"NZD\": \"$\",\n    \"NIO\"\
        : \"C$\",\n    \"NGN\": \"₦\",\n    \"KPW\": \"₩\",\n    \"NOK\": \"kr\",\n\
        \    \"OMR\": \".ع.ر\",\n    \"PKR\": \"₨\",\n    \"PAB\": \"B/.\",\n    \"\
        PGK\": \"K\",\n    \"PYG\": \"₲\",\n    \"PEN\": \"S/.\",\n    \"PHP\": \"\
        ₱\",\n    \"PLN\": \"zł\",\n    \"QAR\": \"ق.ر\",\n    \"RON\": \"lei\",\n\
        \    \"RUB\": \"₽\",\n    \"RWF\": \"FRw\",\n    \"SVC\": \"₡\",\n    \"WST\"\
        : \"SAT\",\n    \"SAR\": \"﷼\",\n    \"RSD\": \"din\",\n    \"SCR\": \"SRe\"\
        ,\n    \"SLL\": \"Le\",\n    \"SGD\": \"$\",\n    \"SKK\": \"Sk\",\n    \"\
        SBD\": \"Si$\",\n    \"SOS\": \"Sh.so.\",\n    \"ZAR\": \"R\",\n    \"KRW\"\
        : \"₩\",\n    \"XDR\": \"SDR\",\n    \"LKR\": \"Rs\",\n    \"SHP\": \"£\"\
        ,\n    \"SDG\": \".س.ج\",\n    \"SRD\": \"$\",\n    \"SZL\": \"E\",\n    \"\
        SEK\": \"kr\",\n    \"CHF\": \"CHf\",\n    \"SYP\": \"LS\",\n    \"STD\":\
        \ \"Db\",\n    \"TJS\": \"SM\",\n    \"TZS\": \"TSh\",\n    \"THB\": \"฿\"\
        ,\n    \"TOP\": \"$\",\n    \"TTD\": \"$\",\n    \"TND\": \"ت.د\",\n    \"\
        TRY\": \"₺\",\n    \"TMT\": \"T\",\n    \"UGX\": \"USh\",\n    \"UAH\": \"\
        ₴\",\n    \"AED\": \"إ.د\",\n    \"UYU\": \"$\",\n    \"USD\": \"$\",\n  \
        \  \"UZS\": \"лв\",\n    \"VUV\": \"VT\",\n    \"VEF\": \"Bs\",\n    \"VND\"\
        : \"₫\",\n    \"YER\": \"﷼\",\n    \"ZMK\": \"ZK\"\n  }\n  return currency[hasscurrency];\n\
        ]]]\n"
      ulm_translation_history: '[[[ return hass.resources[hass[''language'']][''ui.dialogs.more_info_control.history''];
        ]]]'
      ulm_translation_hour: "[[[\n  var number = hass.resources[hass['language']][\"\
        ui.duration.hour\"];\n  var matches = number.match(/[^{\\}]+(?=})/g);\n  var\
        \ hour = \"Hour\";\n  if (matches) {\n    var hour = matches[1];\n  }\n  return(hour);\n\
        ]]]\n"
      ulm_translation_hours: "[[[\n  var number = hass.resources[hass['language']][\"\
        ui.duration.hour\"];\n  var matches = number.match(/[^{\\}]+(?=})/g);\n  var\
        \ hour = \"Hours\";\n  if (matches) {\n    var hour = matches[2];\n  }\n \
        \ return(hour);\n]]]\n"
      ulm_translation_hvac: "[[[\n  if (typeof(entity) !== 'undefined' && entity !==\
        \ undefined){\n    let state = entity.state;\n    let d_class = entity.attributes.device_class;\n\
        \    let def = [\"unknown\", \"unavailable\"];\n    let lang = hass[\"language\"\
        ];\n    let action = entity.attributes.hvac_action;\n    let domain = entity.entity_id.substr(0,\
        \ entity.entity_id.indexOf(\".\"));\n    var mode = hass.resources[lang][\"\
        state_attributes.\" + domain + \".hvac_action.\" + action];\n    if (def.includes(state))\
        \ {\n      var mode = hass.resources[lang][\"state.default.\" + state ];\n\
        \    }\n    var label = hass.resources[lang][\"component.\" + domain + \"\
        .state._.\" + state];\n    var translation = label ? label : state;\n    return\
        \ (entity.attributes.current_temperature ) + '°' + ' • ' + translation + (entity.state\
        \ !='off' ? ' (' + mode + ')' : '');\n    }\n]]]\n"
      ulm_translation_off: '[[[ return hass.resources[hass[''language'']][''state.default.off''];
        ]]]'
      ulm_translation_on: '[[[ return hass.resources[hass[''language'']][''state.default.on''];
        ]]]'
      ulm_translation_scenes: '[[[ return hass.resources[hass[''language'']][''ui.dialogs.quick-bar.commands.reload.scene''];
        ]]]'
      ulm_translation_source: '[[[ return hass.resources[hass[''language'']][''ui.card.media_player.source''];
        ]]]'
      ulm_translation_state: "[[[\n  if (typeof(entity) !== 'undefined' && entity\
        \ !== undefined){\n    let state = entity.state;\n    let d_class = entity.attributes.device_class;\n\
        \    let def = [\"unknown\", \"unavailable\"];\n    let lang = hass[\"language\"\
        ];\n    let domain = entity.entity_id.substr(0, entity.entity_id.indexOf(\"\
        .\"));\n    var translation = hass.resources[lang][\"component.\" + domain\
        \ + \".state._.\" + state]\n    if (def.includes(state)) {\n      var translation\
        \ = hass.resources[lang][\"state.default.\" + state ];\n    }\n    else if\
        \ (domain == \"binary_sensor\" && d_class != ''){\n      var translation =\
        \ hass.resources[lang][\"component.\" + domain + \".state.\" + d_class + \"\
        .\" + state]\n    }\n    return translation ? translation : state;\n  }\n\
        ]]]\n"
      ulm_translation_state_reverse: "[[[\n  if (typeof(entity) !== 'undefined' &&\
        \ entity !== undefined){\n    let state = entity.state;\n    let def = [\"\
        unknown\", \"unavailable\"];\n    let lang = hass[\"language\"];\n    if (state\
        \ === \"on\"){\n      var translation = hass.resources[lang][\"state.default.off\"\
        ];\n    } else if (state === \"off\"){\n      var translation = hass.resources[lang][\"\
        state.default.on\"];\n    }\n    if (def.includes(state)) {\n      var translation\
        \ = hass.resources[lang][\"state.default.\" + state ];\n    }\n    return\
        \ translation ? translation : state;\n  }\n]]]\n"
      ulm_translation_state_unit: "[[[\n  if (typeof(entity) !== 'undefined' && entity\
        \ !== undefined){\n    let state = entity.state;\n    let d_class = entity.attributes.device_class;\n\
        \    let def = [\"unknown\", \"unavailable\"];\n    let lang = hass[\"language\"\
        ];\n    let domain = entity.entity_id.substr(0, entity.entity_id.indexOf(\"\
        .\"));\n    let unit = entity.attributes.unit_of_measurement != null ? \"\
        \ \" + entity.attributes.unit_of_measurement : \"\";\n\n    if(hass.resources[lang][\"\
        component.\" + domain + \".state._.\" + state]){\n    var translation = hass.resources[lang][\"\
        component.\" + domain + \".state._.\" + state] + unit\n    } else {\n    var\
        \ translation =  state + unit;\n    }\n    if (def.includes(state)) {\n  \
        \    var translation = hass.resources[lang][\"state.default.\" + state ];\n\
        \    }\n    else if (domain == \"binary_sensor\" && d_class != ''){\n    \
        \  var translation = hass.resources[lang][\"component.\" + domain + \".state.\"\
        \ + d_class + \".\" + state]\n    }\n    else if (domain == \"media_player\"\
        \ && d_class != ''){\n      if (state == 'idle' || state == 'paused')\n  \
        \      var translation = hass.resources[lang][\"component.\" + domain + \"\
        .state.\" + state];\n      else {\n        var translation = (entity.attributes.source)\
        \ + ' • ' +  ( Math.round(entity.attributes.volume_level / 0.01)) + '%' ;\n\
        \      }\n    }\n    return translation ? translation : state;\n  }\n]]]\n"
      ulm_translation_statistics: '[[[ return hass.resources[hass[''language'']][''ui.components.statistic-picker.statistic''];
        ]]]'
      ulm_translation_status: '[[[ return hass.resources[hass[''language'']][''ui.dialogs.more_info_control.vacuum.status''];
        ]]]'
      ulm_translation_unavailable: '[[[ return hass.resources[hass[''language'']][''state.default.unavailable''];
        ]]]'
  vertical_buttons:
    label: '[[[ return (entity.attributes.value )]]]'
    show_label: true
    size: 20px
    styles:
      card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 10px 0px 8px 0px
      grid:
      - grid-template-areas: '''i'' ''n'' ''l'''
      icon:
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
      label:
      - justify-self: center
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      name:
      - margin-top: 10px
      - justify-self: center
      - font-weight: bold
      - font-size: 14px
  vertical_buttons_custom_state:
    name: '[[[ return variables.state ]]]'
    show_last_changed: false
    state:
    - operator: template
      styles:
        card:
        - background-color: '[[[ return `rgba(var(--color-background-${variables.color}),
            var(--opacity-bg))`; ]]]'
        icon:
        - color: '[[[ return `rgba(var(--color-${variables.color}), 1)`; ]]]'
        img_cell:
        - background-color: '[[[ return `rgba(var(--color-${variables.color}), 0.2)`;
            ]]]'
        label:
        - color: '[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]'
        name:
        - color: '[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]'
      value: '[[[ return entity.state == variables.state ]]]'
    styles:
      name:
      - text-transform: capitalize
    tap_action:
      action: call-service
      service: input_select.select_option
      service_data:
        entity_id: '[[[ return entity.entity_id ]]]'
        option: '[[[ return variables.state ]]]'
    template: vertical_buttons
    variables:
      color: blue
      state: default
  widget_icon:
    color: var(--google-grey)
    show_icon: true
    show_name: false
    size: 20px
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      - background-color: rgba(var(--color-theme),0.05)
      - border-radius: 14px
      - place-self: center
      - height: 42px
      grid:
      - grid-template-areas: '''i'''
      icon:
      - color: rgba(var(--color-theme),0.9)
    tap_action:
      action: toggle
  widget_icon_room:
    color: var(--google-grey)
    hold_action:
      action: '[[[ if (variables?.hold_action?.action) return variables.hold_action.action;
        else return ''none''; ]]]

        '
      entity: '[[[ return variables.hold_action.entity; ]]]'
      navigation_path: '[[[ return variables.hold_action.navigation_path; ]]]'
      service: '[[[ return variables.hold_action.service; ]]]'
      service_data: '[[[ return variables.hold_action.service_data; ]]]'
      url_path: '[[[ return variables.hold_action.url_path; ]]]'
    show_icon: true
    show_name: false
    size: 15px
    styles:
      card:
      - height: 100%
      - box-shadow: none
      - padding: 0px
      - border-radius: 50%
      grid:
      - grid-template-areas: '''i'''
      icon:
      - width: 50%
      - height: 50%
      - line-height: '0'
      - color: rgba(var(--color-theme),0.2)
      img_cell:
      - border-radius: 50%
      - background-color: rgba(var(--color-theme),0.05)
    tap_action:
      action: '[[[ if (variables?.tap_action?.action) return variables.tap_action.action;
        else return ''none''; ]]]

        '
      entity: '[[[ return variables.tap_action.entity; ]]]'
      navigation_path: '[[[ return variables.tap_action.navigation_path; ]]]'
      service: '[[[ return variables.tap_action.service; ]]]'
      service_data: '[[[ return variables.tap_action.service_data; ]]]'
      url_path: '[[[ return variables.tap_action.url_path; ]]]'
    variables:
      hold_action:
        action: none
      tap_action:
        action: toggle
  widget_icon_state:
    color: var(--color-grey)
    label: "[[[\n  var unit = entity.attributes.unit_of_measurement != null ? \" \"\
      \ + entity.attributes.unit_of_measurement : \"\"\n  if (entity.state == \"on\"\
      ) {\n    return variables.ulm_on;\n  } else if (entity.state == \"off\") {\n\
      \    return variables.ulm_off;\n  } else if (entity.state == \"unavailable\"\
      ) {\n    return variables.ulm_unavailable;\n  } else if (entity.state == \"\
      idle\") {\n    return variables.ulm_idle;\n  } else if (entity.state == \"open\"\
      ) {\n    return variables.ulm_open;\n  } else if (entity.state == \"closed\"\
      ) {\n    return variables.ulm_closed;\n  } else {\n    return entity.state +\
      \ unit;\n  }\n]]]\n"
    size: 20px
    styles:
      card:
      - box-shadow: none
      - padding: 0px
      - background-color: rgba(var(--color-theme), 0.05)
      - border-radius: 14px
      - place-self: center
      - height: 42px
      grid:
      - grid-template-areas: '''i l'' ''i n'''
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
      icon:
      - color: rgba(var(--color-theme),0.9)
      img_cell:
      - background-color: none
      label:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
      - margin-left: 12px
      - filter: opacity(100%)
      name:
      - justify-self: start
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
      - margin-left: 12px
    template:
    - icon_info_bg
    - ulm_language_variables
  yellow:
    template: yellow_on
  yellow_no_card:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(0,0,0,0)
        icon:
        - color: rgba(var(--color-yellow),1)
        img_cell:
        - background-color: rgba(var(--color-yellow), 0.2)
        label:
        - color: rgba(var(--color-yellow-text),1)
        name:
        - color: rgba(var(--color-yellow-text),1)
      value: 'on'
  yellow_no_state:
    styles:
      icon:
      - color: rgba(var(--color-yellow),1)
      img_cell:
      - background-color: rgba(var(--color-yellow), 0.2)
      label:
      - color: rgba(var(--color-yellow-text),1)
      name:
      - color: rgba(var(--color-yellow-text),1)
  yellow_off:
    state:
    - id: 'off'
      styles:
        card:
        - background-color: rgba(var(--color-background-yellow),var(--opacity-bg))
        icon:
        - color: rgba(var(--color-yellow),1)
        img_cell:
        - background-color: rgba(var(--color-yellow), 0.2)
        label:
        - color: rgba(var(--color-yellow-text),1)
        name:
        - color: rgba(var(--color-yellow-text),1)
      value: 'off'
  yellow_on:
    state:
    - id: 'on'
      styles:
        card:
        - background-color: rgba(var(--color-background-yellow),var(--opacity-bg))
        icon:
        - color: rgba(var(--color-yellow),1)
        img_cell:
        - background-color: rgba(var(--color-yellow), 0.2)
        label:
        - color: rgba(var(--color-yellow-text),1)
        name:
        - color: rgba(var(--color-yellow-text),1)
      value: 'on'
  yellow_slider:
    state:
    - styles:
        card:
        - background-color: rgba(0,0,0,0)
        icon:
        - color: rgba(var(--color-yellow),1)
        img_cell:
        - background-color: rgba(var(--color-yellow), 0.2)
        label:
        - color: rgba(var(--color-yellow-text),1)
        name:
        - color: rgba(var(--color-yellow-text),1)
      value: 'on'
kiosk_mode:
  mobile_settings:
    hide_header: true
    ignore_entity_settings: true
title: Mechanix
views:
- badges: []
  cards:
  - alignment: justify
    chips:
    - type: menu
    - content: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"Secure\" if ns.entities|count == 0 else \"Not Secure\"\
        \ }}"
      entity: lock.lock_front
      icon: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"mdi:shield-check\" if ns.entities|count == 0 else \"mdi:shield-alert\"\
        \ }}"
      icon_color: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"green\" if ns.entities|count == 0 else \"pink\" }}"
      tap_action:
        action: navigate
        navigation_path: security
      type: template
    - entity: weather.openweathermap
      show_conditions: true
      show_temperature: true
      tap_action:
        action: fire-dom-event
        browser_mod:
          card:
            cards:
            - current: true
              entity: weather.openweathermap
              forecast: true
              icons: /local/icons/weather_icons/animated/
              number_of_forecasts: 6
              type: custom:weather-card
            - type: iframe
              url: https://embed.windy.com/embed2.html?lat=43.241&lon=-112.143&zoom=7&level=surface&overlay=wind&menu=&message=true&marker=&calendar=&pressure=&type=map&location=coordinates&detail=&detailLat=43.490&detailLon=-112.040&metricWind=mph&metricTemp=%C2%B0F&radarRange=-1
            - darkMode: true
              type: custom:sun-card
            type: vertical-stack
          command: popup
          title: Weather
        target: {}
      type: weather
    - content: '{{ states(entity)|float }}'
      entity: sensor.allergy_index_today
      icon: mdi:flower-pollen
      icon_color: "{%- set level = states(entity)|float -%}\n{%- if level >= 9.7 -%}\n\
        \  red\n{%- elif level >= 7.3 -%}\n  orange\n{%- elif level >= 4.9 -%}\n \
        \ yellow\n{%- elif level >= 2.5 -%}\n  lime\n{%- else -%}\n  green\n{%- endif\
        \ -%}"
      tap_action:
        action: fire-dom-event
        browser_mod:
          card:
            cards:
            - subtitle: Allergens
              type: custom:mushroom-title-card
            - double_tap_action:
                action: none
              entity: sensor.allergy_index_today
              fill_container: false
              hold_action:
                action: none
              multiline_secondary: true
              secondary: '{{states.sensor.allergy_index_today.attributes.allergen_name_1}},
                {{states.sensor.allergy_index_today.attributes.allergen_name_2}},
                {{states.sensor.allergy_index_today.attributes.allergen_name_3}}

                {{states.sensor.allergy_index_forecasted_average.attributes.outlook}}'
              tap_action:
                action: none
              type: custom:mushroom-template-card
            - subtitle: Forecast
              type: custom:mushroom-title-card
            - animation:
                state: 'on'
              decimal: 1
              entities:
              - entity: sensor.allergy_index_today
              - entity: sensor.allergy_index_tomorrow
              - entity: sensor.allergy_index_forecasted_average
              - entity: sensor.asthma_index_today
              - entity: sensor.asthma_index_tomorrow
              - entity: sensor.asthma_index_forecasted_average
              - entity: sensor.cold_flu_index_today
              - entity: sensor.cold_flu_forecasted_average
              max: 12
              min: 0
              positions:
                indicator: inside
              severity:
              - color: rgb(var(--color-green))
                from: '0'
                to: '2.4'
              - color: rgb(var(--color-lime))
                from: '2.5'
                to: '4.8'
              - color: rgb(var(--color-amber))
                from: '4.9'
                to: '7.2'
              - color: rgb(var(--color-orange))
                from: '7.3'
                to: '9.6'
              - color: rgb(var(--color-red))
                from: '9.7'
                to: '12'
              style: "bar-card-name,\nbar-card-value {\n  text-shadow: 1px 1px #0005;\n\
                }"
              type: custom:bar-card
            type: vertical-stack
          command: popup
          title: Allergy / Asthma
        target: {}
      type: template
    - content: "{%- if is_state(entity, \"off\") -%}\n  Off\n{%- else -%}\n  {{ state_attr(\"\
        climate.home\", \"hvac_action\")|capitalize }}\n{%- endif -%}"
      entity: climate.home
      icon: mdi:thermostat-box
      icon_color: "{%- if is_state_attr(entity, \"hvac_action\", \"heating\") -%}\n\
        \  red\n{%- elif is_state_attr(entity, \"hvac_action\", \"cooling\") -%}\n\
        \  light-blue\n{%- elif is_state_attr(entity, \"hvac_action\", \"fan\") -%}\n\
        \  amber\n{%- elif is_state(entity, \"off\") -%}\n  grey\n{%- else -%}\n \
        \ blue-grey\n{%- endif -%}"
      tap_action:
        action: navigate
        navigation_path: climate
      type: template
    - content: "{%- set power = states(\"sensor.home_123_1min\")|int|abs -%}\n{%-\
        \ if power > 1000 -%}\n  {{ (power|float * 0.001)|round(2) }} kWh\n{%- else\
        \ -%}\n  {{ power }} W\n{%- endif %}"
      entity: sensor.home_123_1min
      icon: "{%- set power = states(entity)|int -%}\n{%- if power < 0 -%}\n  mdi:transmission-tower-import\n\
        {%- else -%}\n  mdi:transmission-tower-export\n{%- endif -%}"
      icon_color: "{%- set power = states(entity)|int -%}\n{%- if power < 0 -%}\n\
        \  lime\n{%- else -%}\n  deep-orange\n{%- endif -%}"
      tap_action:
        action: navigate
        navigation_path: power
      type: template
    - content: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ ns.lights|count\
        \ }}"
      entity: group.all_light_switches
      hold_action:
        action: call-service
        data: {}
        service: homeassistant.turn_off
        target:
          entity_id: group.all_light_switches
      icon: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{%- if ns.lights|count\
        \ > 0 -%}\n  mdi:lightbulb-group\n{%- else -%}\n  mdi:lightbulb-group-off\n\
        {%- endif -%}"
      icon_color: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{%- if ns.lights|count\
        \ > 0 -%}\n  amber\n{%- else -%}\n  grey\n{%- endif -%}"
      tap_action:
        action: navigate
        navigation_path: lights
      type: template
    type: custom:mushroom-chips-card
  - cards:
    - primary: "{%- set time = now().hour -%}\n{%- if (time >= 18) -%}\n  Good Evening,\
        \ {{user}}!\n{%- elif (time >= 12) -%}\n  Good Afternoon, {{user}}!\n{%- elif\
        \ (time >= 5) -%}\n  Good Morning, {{user}}!\n{%- elif (time < 5) -%}\n  WTF\
        \ {{user}}?! GO TO BED!\n{%- else -%}\n  Hello, {{user}}\n{%- endif -%}"
      type: custom:mushroom-template-card
    - cards:
      - entity: person.joshua
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - double_tap_action:
                  action: none
                entity: person.joshua
                hold_action:
                  action: none
                primary_info: state
                secondary_info: last-changed
                type: custom:mushroom-entity-card
                use_entity_picture: true
              - entities:
                - entity: person.joshua
                  name: ' '
                type: history-graph
              - cards:
                - entity: sensor.pixel_6_battery_level
                  icon: "{%- set value = states(entity)|int -%} {%- set state = \"\
                    \" -%} {%- if is_state(\"sensor.pixel_6_battery_state\", \"charging\"\
                    ) -%}\n  {%- set state = \"-charging\" -%}\n  {%- if is_state(\"\
                    sensor.pixel_6_charger_type\", \"wireless\") -%}\n    {%- set\
                    \ state = state ~ \"-wireless\" -%}\n  {%- endif -%}\n{%- endif\
                    \ -%} {%- if value == 100 -%}\n  mdi:battery{{ state }}\n{%- else\
                    \ -%}\n  mdi:battery{{ state }}-{{ value // 10 * 10 }}\n{%- endif\
                    \ -%}"
                  icon_color: "{%- set value = states(entity)|int -%} {%- if is_state(\"\
                    sensor.pixel_6_battery_state\", \"charging\") -%}\n  light-blue\n\
                    {%- elif (value >= 75) -%}\n  green\n{%- elif (value >= 65) -%}\n\
                    \  light-green\n{%- elif (value >= 55) -%}\n  lime\n{%- elif (value\
                    \ >= 45) -%}\n  yellow\n{%- elif (value >= 35) -%}\n  amber\n\
                    {%- elif (value >= 25) -%}\n  orange\n{%- elif (value >= 15) -%}\n\
                    \  deep-orange\n{%- else -%}\n  red\n{%- endif -%}"
                  layout: vertical
                  primary: Battery
                  secondary: '{{ states(entity) }}%'
                  tap_action:
                    action: more-info
                  type: custom:mushroom-template-card
                - double_tap_action:
                    action: none
                  entity: proximity.joshua_home
                  hold_action:
                    action: none
                  icon: "{%- set icon = \"map-marker-distance\" -%} {%- if is_state_attr(entity,\
                    \ \"dir_of_travel\", \"towards\") -%}\n  mdi:map-marker-left\n\
                    {%- elif is_state_attr(entity, \"dir_of_travel\", \"away_from\"\
                    ) -%}\n  mdi:map-marker-right\n{%- else -%}\n  mdi:map-marker-distance\n\
                    {%- endif -%}"
                  icon_color: "{%- if is_state_attr(entity, \"dir_of_travel\", \"\
                    towards\") -%}\n  green\n{%- elif is_state_attr(entity, \"dir_of_travel\"\
                    , \"away_from\") -%}\n  orange\n{%- else -%}\n  grey\n{%- endif\
                    \ -%}"
                  layout: vertical
                  primary: "{%- if is_state(\"person.joshua\", \"home\") -%}\n  Home\n\
                    {%- elif is_state(\"person.joshua\", \"not_home\") -%}\n  Away\n\
                    {%- else -%}\n  {{ states(\"person.joshua\") }}\n{%- endif -%}"
                  secondary: '{{ ((states(entity)|float) / 5280)|round(1) }} mi'
                  tap_action:
                    action: none
                  type: custom:mushroom-template-card
                - double_tap_action:
                    action: none
                  entity: sensor.pixel_6_geocoded_location
                  hold_action:
                    action: none
                  layout: vertical
                  name: Location
                  tap_action:
                    action: none
                  type: custom:mushroom-entity-card
                type: horizontal-stack
              - dark_mode: true
                default_zoom: 14
                entities:
                - entity: person.joshua
                type: map
              type: vertical-stack
            command: popup
            title: Joshua
          target: {}
        type: custom:mushroom-person-card
        use_entity_picture: true
      - entity: person.amy
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - double_tap_action:
                  action: none
                entity: person.amy
                hold_action:
                  action: none
                primary_info: state
                secondary_info: last-changed
                type: custom:mushroom-entity-card
                use_entity_picture: true
              - entities:
                - entity: person.amy
                  name: ' '
                type: history-graph
              - cards:
                - entity: sensor.galaxy_s21_battery_level
                  icon: "{%- set value = states(entity)|int -%} {%- set state = \"\
                    \" -%} {%- if is_state(\"sensor.galaxy_s21_battery_state\", \"\
                    charging\") -%}\n  {%- set state = \"-charging\" -%}\n  {%- if\
                    \ is_state(\"sensor.galaxy_s21_charger_type\", \"wireless\") -%}\n\
                    \    {%- set state = state ~ \"-wireless\" -%}\n  {%- endif -%}\n\
                    {%- endif -%} {%- if value == 100 -%}\n  mdi:battery{{ state }}\n\
                    {%- else -%}\n  mdi:battery{{ state }}-{{ value // 10 * 10 }}\n\
                    {%- endif -%}"
                  icon_color: "{%- set value = states(entity)|int %} {%- if is_state(\"\
                    sensor.galaxy_s21_battery_state\", \"charging\") -%}\n  light-blue\n\
                    {%- elif (value >= 75) -%}\n  green\n{%- elif (value >= 65) -%}\n\
                    \  light-green\n{%- elif (value >= 55) -%}\n  lime\n{%- elif (value\
                    \ >= 45) -%}\n  yellow\n{%- elif (value >= 35) -%}\n  amber\n\
                    {%- elif (value >= 25) -%}\n  orange\n{%- elif (value >= 15) -%}\n\
                    \  deep-orange\n{%- else -%}\n  red\n{%- endif -%}"
                  layout: vertical
                  primary: Battery
                  secondary: '{{ states(entity) }}%'
                  tap_action:
                    action: more-info
                  type: custom:mushroom-template-card
                - double_tap_action:
                    action: none
                  entity: proximity.amy_home
                  hold_action:
                    action: none
                  icon: "{%- set icon = \"map-marker-distance\" -%} {%- if is_state_attr(entity,\
                    \ \"dir_of_travel\", \"towards\") -%}\n  mdi:map-marker-left\n\
                    {%- elif is_state_attr(entity, \"dir_of_travel\", \"away_from\"\
                    ) -%}\n  mdi:map-marker-right\n{%- else -%}\n  mdi:map-marker-distance\n\
                    {%- endif -%}"
                  icon_color: "{%- if is_state_attr(entity, \"dir_of_travel\", \"\
                    towards\") -%}\n  green\n{%- elif is_state_attr(entity, \"dir_of_travel\"\
                    , \"away_from\") -%}\n  orange\n{%- else -%}\n  grey\n{%- endif\
                    \ -%}"
                  layout: vertical
                  primary: "{%- if is_state(\"person.amy\", \"home\") -%}\n  Home\n\
                    {%- elif is_state(\"person.amy\", \"not_home\") -%}\n  Away\n\
                    {%- else -%}\n  {{ states(\"person.amy\") }}\n{%- endif -%}"
                  secondary: '{{ ((states(entity)|float) / 5280)|round(1) }} mi'
                  tap_action:
                    action: none
                  type: custom:mushroom-template-card
                - double_tap_action:
                    action: none
                  entity: sensor.galaxy_s21_geocoded_location
                  hold_action:
                    action: none
                  layout: vertical
                  name: Location
                  tap_action:
                    action: none
                  type: custom:mushroom-entity-card
                type: horizontal-stack
              - dark_mode: true
                default_zoom: 14
                entities:
                - entity: person.amy
                type: map
              type: vertical-stack
            command: popup
            title: Amy
          target: {}
        type: custom:mushroom-person-card
        use_entity_picture: true
      columns: 2
      square: false
      type: grid
    type: custom:stack-in-card
  - cards:
    - entity: sensor.home_temperature
      icon: mdi:sofa-single
      name: Living Room
      tap_action:
        action: navigate
        navigation_path: living
      template:
      - card_room
      - orange_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.home_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: group.lights_living_room
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_4:
          entity_id: media_player.living_room_universal
          tap_action:
            action: none
          templates:
          - media_on
    - entity: sensor.family_room_temperature
      icon: mdi:gamepad-circle
      name: Family Room
      tap_action:
        action: navigate
        navigation_path: family
      template:
      - card_room
      - yellow_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.family_room_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: group.lights_family_room
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_3:
          entity_id: binary_sensor.ardena_connected
          tap_action:
            action: none
          templates:
          - orange_on
        entity_4:
          entity_id: media_player.family_room_universal
          tap_action:
            action: none
          templates:
          - media_on
    - entity: sensor.office_temperature
      icon: mdi:chair-rolling
      name: Office
      tap_action:
        action: navigate
        navigation_path: office
      template:
      - card_room
      - blue_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.office_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: group.lights_office
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_4:
          entity_id: switch.erebus
          tap_action:
            action: none
          templates:
          - pink_on
    - entity: sensor.kitchen_temperature
      icon: mdi:fridge-variant
      name: Kitchen
      tap_action:
        action: navigate
        navigation_path: kitchen
      template:
      - card_room
      - lime_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.kitchen_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: group.lights_kitchen
          tap_action:
            action: none
          templates:
          - yellow_on
    - entity: sensor.master_bedroom_temperature
      icon: mdi:bed-king
      name: Master Bed
      tap_action:
        action: navigate
        navigation_path: master
      template:
      - card_room
      - deep-purple_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.master_bedroom_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: light.master_bedroom_floor_lamp
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_4:
          entity_id: media_player.master_bedroom_universal
          tap_action:
            action: none
          templates:
          - media_on
    - entity: sensor.ethan_temperature
      icon: mdi:bed
      name: Ethan
      tap_action:
        action: navigate
        navigation_path: ethan
      template:
      - card_room
      - green_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.ethan_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: switch.ethans_lamp
          tap_action:
            action: none
          templates:
          - yellow_on
    - entity: sensor.emma_temperature
      icon: mdi:bed
      name: Emma
      tap_action:
        action: navigate
        navigation_path: emma
      template:
      - card_room
      - purple_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.emma_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
    - entity: sensor.garage_multisensor_air_temperature
      icon: mdi:garage-variant
      name: Garage
      tap_action:
        action: navigate
        navigation_path: garage
      template:
      - card_room
      - blue-grey_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.garage_occupancy
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: switch.garage_light
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_3:
          entity_id: cover.garage_door
          tap_action:
            action: none
          templates:
          - red_on
    - entity: sensor.openweathermap_temperature
      icon: mdi:spa
      name: Outside
      tap_action:
        action: navigate
        navigation_path: outside
      template:
      - card_room
      - light-green_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: binary_sensor.doorbell_motion
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: group.lights_outside
          tap_action:
            action: none
          templates:
          - yellow_on
    - entity: sensor.water_main_air_temperature
      icon: mdi:progress-wrench
      name: Utility
      tap_action:
        action: navigate
        navigation_path: utility
      template:
      - card_room
      - brown_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: switch.water_main
          tap_action:
            action: none
          templates:
          - green_on
        entity_2:
          entity_id: binary_sensor.water_leak_detected
          tap_action:
            action: none
          templates:
          - blue_on
    - entity: sensor.octoprint_tool_0_temperature
      icon: mdi:printer-3d
      label: null
      name: 3D Printer
      tap_action:
        action: fire-dom-event
        browser_mod:
          card:
            cards:
            - camera_view: live
              entity: camera.ender_3_pro
              show_name: false
              show_state: false
              type: picture-entity
            - entity: switch.octoprint_psu
              hold_action:
                action: toggle
              icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n\
                \  mdi:power-off\n{%- endif -%}"
              icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else\
                \ -%}\n  grey\n{%- endif -%}"
              primary: Power
              secondary: "{%- if is_state(entity, \"on\") -%}\n  Press and hold to\
                \ power off\n{%- else -%}\n  Press and hold to power on\n{%- endif\
                \ -%}"
              type: custom:mushroom-template-card
            - card:
                cards:
                - cards:
                  - entity: switch.octoprint_pause_print
                    hold_action:
                      action: toggle
                    icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:play\n{%- else\
                      \ -%}\n  mdi:pause\n{%- endif -%}"
                    icon_color: "{%- if is_state(entity, \"on\") -%}\n  red\n{%- else\
                      \ -%}\n  yellow\n{%- endif -%}"
                    layout: vertical
                    primary: Pause
                    tap_action:
                      action: none
                    type: custom:mushroom-template-card
                  - entity: button.octoprint_cancel_print
                    hold_action:
                      action: call-service
                      service: button.press
                      target:
                        entity_id: button.octoprint_cancel_print
                    icon: mdi:cancel
                    icon_color: grey
                    layout: vertical
                    primary: Cancel
                    tap_action:
                      action: none
                    type: custom:mushroom-template-card
                  - entity: button.octoprint_emergency_stop
                    hold_action:
                      action: call-service
                      service: button.press
                      target:
                        entity_id: button.octoprint_emergency_stop
                    icon: mdi:alert-octagon
                    icon_color: red
                    layout: vertical
                    multiline_secondary: false
                    primary: E-Stop
                    tap_action:
                      action: none
                    type: custom:mushroom-template-card
                  - entity: button.octoprint_shutdown_system
                    hold_action:
                      action: call-service
                      service: button.press
                      target:
                        entity_id: button.octoprint_shutdown_system
                    icon: mdi:power
                    icon_color: orange
                    layout: vertical
                    primary: Shutdown
                    tap_action:
                      action: none
                    type: custom:mushroom-template-card
                  type: horizontal-stack
                - animation:
                    state: 'on'
                  entities:
                  - entity: sensor.octoprint_print_progress
                  name: Completion
                  positions:
                    icon: 'off'
                    indicator: inside
                  style: "bar-card-name,\nbar-card-value {\n  text-shadow: 1px 1px\
                    \ #0005;\n}"
                  type: custom:bar-card
                - cards:
                  - entity: sensor.octoprint_layer_progress
                    layout: vertical
                    name: Layer
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  - entity: sensor.octoprint_print_time_format
                    layout: vertical
                    name: Print Time
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  - entity: sensor.octoprint_print_time_left_format
                    layout: vertical
                    name: Time Left
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  type: horizontal-stack
                - subtitle: Print Info
                  type: custom:mushroom-title-card
                - cards:
                  - entity: sensor.octoprint_print_file
                    name: File
                    type: custom:mushroom-entity-card
                  - entity: sensor.octoprint_print_file_size
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  type: horizontal-stack
                - cards:
                  - entity: sensor.octoprint_filament_cost
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  - entity: sensor.octoprint_filament_length
                    primary_info: state
                    secondary_info: name
                    type: custom:mushroom-entity-card
                  type: horizontal-stack
                - subtitle: Temperature
                  type: custom:mushroom-title-card
                - all_series_config:
                    curve: stepline
                    extend_to: now
                    float_precision: 2
                  apex_config:
                    chart:
                      foreColor: '#7B7B7B'
                      toolbar:
                        show: false
                    grid:
                      borderColor: '#7B7B7B'
                    xaxis:
                      tooltip:
                        enabled: false
                  brush:
                    apex_config:
                      chart:
                        foreColor: '#7B7B7B'
                        toolbar:
                          show: false
                      grid:
                        borderColor: '#7B7B7B'
                      xaxis:
                        tooltip:
                          enabled: false
                    selection_span: 1h
                  experimental:
                    brush: true
                  header:
                    colorize_states: true
                    show: true
                    show_states: true
                  series:
                  - color: rgb(244,67,54)
                    entity: sensor.octoprint_tool_0_temperature
                    name: Nozzle
                    show:
                      in_brush: true
                    stroke_width: 4
                  - color: rgb(3,169,244)
                    entity: sensor.octoprint_bed_temperature
                    name: Bed
                    stroke_width: 4
                  - color: rgb(255,235,59)
                    entity: sensor.octoprint_tool_0_target
                    name: Nozzle Target
                    stroke_width: 1
                    type: area
                  - color: rgb(233,30,99)
                    entity: sensor.octoprint_bed_target
                    name: Bed Target
                    stroke_width: 1
                    type: area
                  type: custom:apexcharts-card
                type: vertical-stack
              conditions:
              - entity: binary_sensor.octoprint_connected
                state: 'on'
              type: conditional
            type: vertical-stack
          command: popup
          title: 3D Printer
      template:
      - card_room
      - teal_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: switch.octoprint_psu
          tap_action:
            action: none
          templates:
          - lime_on
        entity_2:
          entity_id: binary_sensor.octoprint_connected
          tap_action:
            action: none
          templates:
          - amber_on
    - entity: light.magicmirror
      icon: mdi:desktop-tower
      label: null
      name: Computers
      tap_action:
        action: navigate
        navigation_path: computer
      template:
      - card_room
      - grey_no_state
      type: custom:button-card
      variables:
        entity_1:
          entity_id: switch.erebus
          tap_action:
            action: none
          templates:
          - blue_on
        entity_2:
          entity_id: binary_sensor.ardena_connected
          tap_action:
            action: none
          templates:
          - orange_on
        entity_3:
          entity_id: binary_sensor.athos_connected
          tap_action:
            action: none
          templates:
          - yellow_on
        entity_4:
          entity_id: binary_sensor.quest_interactive
          tap_action:
            action: none
          templates:
          - lime_on
        label_use_temperature: false
    columns: 3
    square: false
    type: grid
  - cards:
    - subtitle: Laundry / Dishes
      type: custom:mushroom-title-card
    - cards:
      - entity: input_boolean.washer
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:washing-machine\n{%- else\
          \ -%}\n  mdi:washing-machine-off\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  blue\n{%- else -%}\n \
          \ grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Washing\n{%- else -%}\n \
          \ Off\n{%- endif -%}"
        secondary: "Washer\n{% set last_changed = states[entity].last_changed -%}\n\
          {%- if last_changed < today_at() - timedelta(days=6) -%}\n  More than a\
          \ week ago\n{%- elif last_changed < today_at() - timedelta(days=1) -%}\n\
          \  {{ last_changed.timestamp()|timestamp_custom('%A at %-I:%M %p') }}\n\
          {%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: input_boolean.dryer
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:tumble-dryer\n{%- else -%}\n\
          \  mdi:tumble-dryer-off\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  orange\n{%- else -%}\n\
          \  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Drying\n{%- else -%}\n  Off\n\
          {%- endif -%}"
        secondary: "Dryer\n{% set last_changed = states[entity].last_changed -%}\n\
          {%- if last_changed < today_at() - timedelta(days=6) -%}\n  More than a\
          \ week ago\n{%- elif last_changed < today_at() - timedelta(days=1) -%}\n\
          \  {{ last_changed.timestamp()|timestamp_custom('%A at %-I:%M %p') }}\n\
          {%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: input_select.dishwasher_status
        icon: "{%- if not is_state(entity, \"Off\") -%}\n  mdi:dishwasher\n{%- else\
          \ -%}\n  mdi:dishwasher-off\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"Washing\") -%}\n  purple\n{%- elif\
          \ is_state(entity, \"Draining\") -%}\n  blue-grey\n{%- elif is_state(entity,\
          \ \"Rinsing\") -%}\n  blue\n{%- elif is_state(entity, \"Drying\") -%}\n\
          \  red\n{%- elif is_state(entity, \"Clean\") -%}\n  lime\n{%- else -%}\n\
          \  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: '{{ states(entity) }}'
        secondary: "Dishwasher\n{% set last_changed = states[entity].last_changed\
          \ -%}\n{%- if last_changed < today_at() - timedelta(days=6) -%}\n  More\
          \ than a week ago\n{%- elif last_changed < today_at() - timedelta(days=1)\
          \ -%}\n  {{ last_changed.timestamp()|timestamp_custom('%A at %-I:%M %p')\
          \ }}\n{%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - card:
          bar_background: rgba(var(--color-grey),50%)
          bar_direction: rtl
          bar_height: 20px
          bar_radius: var(--border-radius)
          entity: timer.dishwasher_run_time
          invert: true
          layout: hide_name
          text_width: 4em
          type: custom:timer-bar-card
        conditions:
        - entity: input_select.dishwasher_status
          state_not: 'Off'
        type: conditional
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - tap_action:
      action: navigate
      navigation_path: subaru
    template: custom_card_car
    type: custom:button-card
    variables:
      icon: mdi:car-estate
      item_1:
        entity: sensor.ascent_odometer
        name: Odometer
      item_2:
        entity: sensor.ascent_range
        name: Range
      name: Ascent
      tracker: device_tracker.ascent_location
  - card:
      cards:
      - subtitle: Mail / Deliveries
        type: custom:mushroom-title-card
      - cards:
        - card:
            badge_color: orange
            badge_icon: "{% if states(entity)|int > 0 %} \n  {{ 'mdi:numeric-' + states(entity)\
              \ + '-circle' }}\n{% endif %}"
            entity: sensor.mail_usps_mail
            icon: mdi:mailbox-up
            icon_color: grey
            primary: Mail
            secondary: "{% if states(entity)|int == 1 %}\n  1 piece\n{% else %}\n\
              \  {{ states(entity) }} pieces\n{% endif %}"
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  elements:
                  - camera_image: camera.mail_usps
                    camera_view: live
                    style:
                      left: 50%
                      top: 50%
                      width: 100%
                    type: image
                  - image: /local/mail_and_packages/overlay.png
                    style:
                      left: 50%
                      top: 50%
                      width: 101%
                    type: image
                  - entity: camera.mail_usps
                    image: /local/mail_and_packages/vignette.png
                    style:
                      left: 50%
                      top: 50%
                      width: 101%
                    type: image
                  entity: camera.mail_usps
                  image: local/mail_and_packages/white.png
                  type: picture-elements
                command: popup
                large: true
                title: Mail
            type: custom:mushroom-template-card
          conditions:
          - entity: sensor.mail_usps_mail
            state_not: '0'
          type: conditional
        - card:
            badge_color: orange
            badge_icon: "{% if states(entity)|int > 0 %} \n  {{ 'mdi:numeric-' + states(entity)\
              \ + '-circle' }}\n{% endif %}"
            entity: sensor.mail_usps_delivering
            icon: fab:usps
            icon_color: blue
            primary: USPS
            secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{% else %}\n\
              \  {{ states(entity) }} packages\n{% endif %}"
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_usps_delivering
                    icon: fab:usps
                    icon_color: blue
                    primary: USPS
                    secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{%\
                      \ else %}\n  {{ states(entity) }} packages\n{% endif %}"
                    type: custom:mushroom-template-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_usps_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://tools.usps.com/go/TrackConfirmAction?tLabels={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_usps_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: USPS Tracking
            type: custom:mushroom-template-card
          conditions:
          - entity: sensor.mail_usps_delivering
            state_not: '0'
          type: conditional
        - card:
            badge_color: orange
            badge_icon: "{% if states(entity)|int > 0 %} \n  {{ 'mdi:numeric-' + states(entity)\
              \ + '-circle' }}\n{% endif %}"
            entity: sensor.mail_ups_delivering
            icon: fab:ups
            icon_color: brown
            primary: UPS
            secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{% else %}\n\
              \  {{ states(entity) }} packages\n{% endif %}"
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_ups_delivering
                    icon: fab:ups
                    icon_color: brown
                    primary: UPS
                    secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{%\
                      \ else %}\n  {{ states(entity) }} packages\n{% endif %}"
                    type: custom:mushroom-template-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_ups_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://www.ups.com/track?loc=en_US&tracknum={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_ups_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: UPS Tracking
            type: custom:mushroom-template-card
          conditions:
          - entity: sensor.mail_ups_delivering
            state_not: '0'
          type: conditional
        - card:
            badge_color: orange
            badge_icon: "{% if states(entity)|int > 0 %} \n  {{ 'mdi:numeric-' + states(entity)\
              \ + '-circle' }}\n{% endif %}"
            entity: sensor.mail_fedex_delivering
            icon: fab:fedex
            icon_color: purple
            primary: FedEx
            secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{% else %}\n\
              \  {{ states(entity) }} packages\n{% endif %}"
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_fedex_delivering
                    icon: fab:fedex
                    icon_color: purple
                    primary: FedEx
                    secondary: "{% if states(entity)|int == 1 %}\n  1 package\n{%\
                      \ else %}\n  {{ states(entity) }} packages\n{% endif %}"
                    type: custom:mushroom-template-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_fedex_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://www.fedex.com/fedextrack/?trknbr={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_fedex_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: FedEx Tracking
            type: custom:mushroom-template-card
          conditions:
          - entity: sensor.mail_fedex_delivering
            state_not: '0'
          type: conditional
        columns: 2
        square: false
        type: grid
      type: vertical-stack
    conditions:
    - entity: binary_sensor.out_for_delivery
      state: 'on'
    type: conditional
  icon: mdi:home-assistant
  layout:
    max_cols: 2
  path: main
  theme: Backend-selected
  title: Main
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.home_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.home_temperature
      type: entity
    - entity: sensor.home_humidity
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Living Room
      type: custom:mushroom-title-card
    - entity: light.living_room
      layout: horizontal
      name: Main
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: light.living_room_floor_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
                transition: 1
              - color_temp: 250
                transition: 1
              - color_temp: 181
                transition: 1
              - brightness: 153
                color_temp: 370
                icon_color: 'center no-repeat url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22mdi-book-open-variant%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23FFFFFF%22%20d%3D%22M17.5%2014.33C18.29%2014.33%2019.13%2014.41%2020%2014.57V16.07C19.38%2015.91%2018.54%2015.83%2017.5%2015.83C15.6%2015.83%2014.11%2016.16%2013%2016.82V15.13C14.17%2014.6%2015.67%2014.33%2017.5%2014.33M13%2012.46C14.29%2011.93%2015.79%2011.67%2017.5%2011.67C18.29%2011.67%2019.13%2011.74%2020%2011.9V13.4C19.38%2013.24%2018.54%2013.16%2017.5%2013.16C15.6%2013.16%2014.11%2013.5%2013%2014.15M17.5%2010.5C15.6%2010.5%2014.11%2010.82%2013%2011.5V9.84C14.23%209.28%2015.73%209%2017.5%209C18.29%209%2019.13%209.08%2020%209.23V10.78C19.26%2010.59%2018.41%2010.5%2017.5%2010.5M21%2018.5V7C19.96%206.67%2018.79%206.5%2017.5%206.5C15.45%206.5%2013.62%207%2012%208V19.5C13.62%2018.5%2015.45%2018%2017.5%2018C18.69%2018%2019.86%2018.16%2021%2018.5M17.5%204.5C19.85%204.5%2021.69%205%2023%206V20.56C23%2020.68%2022.95%2020.8%2022.84%2020.91C22.73%2021%2022.61%2021.08%2022.5%2021.08C22.39%2021.08%2022.31%2021.06%2022.25%2021.03C20.97%2020.34%2019.38%2020%2017.5%2020C15.45%2020%2013.62%2020.5%2012%2021.5C10.66%2020.5%208.83%2020%206.5%2020C4.84%2020%203.25%2020.36%201.75%2021.07C1.72%2021.08%201.68%2021.08%201.63%2021.1C1.59%2021.11%201.55%2021.12%201.5%2021.12C1.39%2021.12%201.27%2021.08%201.16%2021C1.05%2020.89%201%2020.78%201%2020.65V6C2.34%205%204.18%204.5%206.5%204.5C8.83%204.5%2010.66%205%2012%206C13.34%205%2015.17%204.5%2017.5%204.5Z%22%20%2F%3E%3C%2Fsvg%3E"),
                  #EA888C'
                transition: 1
              entity: light.living_room_floor_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Floor Lamp
      layout: horizontal
      name: Floor Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
    - entity: switch.hallway_light
      icon_color: amber
      name: Hallway
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    - cards:
      - entity: switch.front_entry_light
        icon_color: amber
        name: Entry
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      - entity: switch.garage_entry_light
        icon_color: amber
        name: Garage Entry
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Media
      type: custom:mushroom-title-card
    - cards:
      - entity: media_player.living_room_shield
        icon: mdi:motion-play-outline
        icon_color: "{%- if not is_state(entity, \"off\") -%}\n  green\n{%- else -%}\n\
          \  grey\n{%- endif -%}"
        primary: Shield
        tap_action:
          action: call-service
          service: media_player.turn_on
          target:
            entity_id: media_player.living_room_shield
        type: custom:mushroom-template-card
      - card:
          entity: media_player.living_room_shield
          icon: mdi:power
          icon_color: red
          primary: Power
          tap_action:
            action: call-service
            service: media_player.turn_off
            target:
              entity_id: media_player.living_room_shield
          type: custom:mushroom-template-card
        conditions:
        - entity: media_player.living_room_shield
          state_not: 'off'
        type: conditional
      type: horizontal-stack
    - card:
        artwork: material
        entity: media_player.living_room_universal
        hide:
          power: true
          source: true
        icon: mdi:motion-play-outline
        info: scroll
        name: TV
        shortcuts:
          attribute: source
          buttons:
          - icon: mdi:apps
            id: com.google.android.tvlauncher
            name: Home
            type: source
          - icon: mdi:plex
            id: com.plexapp.android
            name: Plex
            type: source
          - icon: mdi:netflix
            id: com.netflix.ninja
            name: Netflix
            type: source
          - icon: fab:amazon
            id: com.amazon.amazonvideo.livingroom
            name: Prime
            type: source
          - icon: mdi:hulu
            id: com.hulu.livingroomplus
            name: Hulu
            type: source
          - icon: mdi:youtube
            id: com.google.android.youtube.tv
            name: YouTube
            type: source
          - icon: mdi:youtube-subscription
            id: com.google.android.youtube.tvkids
            name: YT Kids
            type: source
          - icon: fas:child
            id: org.pbskids.video
            name: PBS Kids
            type: source
          - icon: mdi:spotify
            id: com.spotify.tv.android
            name: Spotify
            type: source
          - icon: mdi:twitch
            id: tv.twitch.android.viewer
            name: Twitch
            type: source
          columns: 3
          hide_when_off: true
        type: custom:mini-media-player
      conditions:
      - entity: media_player.living_room_shield
        state_not: 'off'
      type: conditional
    - entity: media_player.cast_living_room
      hide:
        power: true
        volume: true
      info: scroll
      name: Cast
      type: custom:mini-media-player
    - entity: media_player.living_room_speaker
      hide:
        power: true
      icon: mdi:dots-horizontal-circle
      info: scroll
      name: Google Home
      type: custom:mini-media-player
    type: vertical-stack
  icon: mdi:sofa-single
  layout:
    max_cols: 2
  path: living
  theme: Backend-selected
  title: Living
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.family_room_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.family_room_temperature
      type: entity
    - entity: binary_sensor.quest_interactive
      icon: fas:vr-cardboard
      icon_color: blue
      name: Quest
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Family Room
      type: custom:mushroom-title-card
    - entity: light.family_room
      layout: horizontal
      name: Main
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: light.play_space
      layout: horizontal
      name: Play Space
      show_brightness_control: true
      type: custom:mushroom-light-card
    - cards:
      - entity: switch.stair_light
        icon_color: amber
        name: Stairs
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      - entity: script.family_room_game_light_mode
        icon: mdi:light-flood-up
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  amber\n{%- else -%}\n\
          \  grey\n{%- endif -%}"
        primary: Game Lighting
        secondary: Set lighting for Games
        tap_action:
          action: call-service
          service: script.family_room_game_light_mode
          target: {}
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Media
      type: custom:mushroom-title-card
    - cards:
      - entity: remote.family_room
        icon: mdi:motion-play-outline
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"Shield TV\"\
          ) -%}\n  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: Shield
        tap_action:
          action: call-service
          data:
            activity: Shield TV
          service: remote.turn_on
          target:
            entity_id: remote.family_room
        type: custom:mushroom-template-card
      - entity: remote.family_room
        icon: mdi:desktop-tower
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"Computer\"\
          ) -%}\n  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: PC
        tap_action:
          action: call-service
          data:
            activity: Computer
          service: remote.turn_on
          target:
            entity_id: remote.family_room
        type: custom:mushroom-template-card
      - entity: remote.family_room
        icon: mdi:sony-playstation
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"PS4\") -%}\n\
          \  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: PS4
        tap_action:
          action: call-service
          data:
            activity: PS4
          service: remote.turn_on
          target:
            entity_id: remote.family_room
        type: custom:mushroom-template-card
      - entity: remote.family_room
        icon: mdi:sony-playstation
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"PS3\") -%}\n\
          \  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: PS3
        tap_action:
          action: call-service
          data:
            activity: PS3
          service: remote.turn_on
          target:
            entity_id: remote.family_room
        type: custom:mushroom-template-card
      - entity: remote.family_room
        icon: mdi:microsoft-xbox
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"XBox\")\
          \ -%}\n  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: XBox
        tap_action:
          action: call-service
          data:
            activity: XBox
          service: remote.turn_on
          target:
            entity_id: remote.family_room
        type: custom:mushroom-template-card
      - card:
          entity: remote.family_room
          icon: mdi:power
          icon_color: red
          primary: Power
          tap_action:
            action: call-service
            service: remote.turn_off
            target:
              entity_id: remote.family_room
          type: custom:mushroom-template-card
        conditions:
        - entity: remote.family_room
          state: 'on'
        type: conditional
      columns: 3
      square: false
      type: grid
    - card:
        artwork: material
        entity: media_player.family_room_universal
        hide:
          power: true
          source: true
        icon: mdi:motion-play-outline
        info: scroll
        name: TV
        shortcuts:
          attribute: source
          buttons:
          - icon: mdi:apps
            id: com.google.android.tvlauncher
            name: Home
            type: source
          - icon: mdi:plex
            id: com.plexapp.android
            name: Plex
            type: source
          - icon: mdi:netflix
            id: com.netflix.ninja
            name: Netflix
            type: source
          - icon: fab:amazon
            id: com.amazon.amazonvideo.livingroom
            name: Prime
            type: source
          - icon: mdi:hulu
            id: com.hulu.livingroomplus
            name: Hulu
            type: source
          - icon: mdi:youtube
            id: com.google.android.youtube.tv
            name: YouTube
            type: source
          - icon: mdi:youtube-subscription
            id: com.google.android.youtube.tvkids
            name: YT Kids
            type: source
          - icon: fas:child
            id: org.pbskids.video
            name: PBS Kids
            type: source
          - icon: mdi:spotify
            id: com.spotify.tv.android
            name: Spotify
            type: source
          - icon: mdi:twitch
            id: tv.twitch.android.viewer
            name: Twitch
            type: source
          columns: 3
          hide_when_off: true
        type: custom:mini-media-player
      conditions:
      - entity: sensor.family_room_yamaha_source
        state: Shield
      type: conditional
    - card:
        entity: media_player.yamaha_receiver
        hide:
          controls: true
          power: true
          sound_mode: false
          source: true
        icon: mdi:audio-video
        shortcuts:
          attribute: source
          buttons:
          - icon: mdi:desktop-tower
            id: Computer
            name: Computer
            type: source
          - icon: mdi:sony-playstation
            id: PS4
            name: PS4
            type: source
          - icon: mdi:sony-playstation
            id: PS3
            name: PS3
            type: source
          - icon: mdi:microsoft-xbox
            id: XBox
            name: XBox
            type: source
          columns: 2
          hide_when_off: true
        type: custom:mini-media-player
      conditions:
      - entity: sensor.family_room_yamaha_source
        state_not: Shield
      - entity: sensor.family_room_yamaha_source
        state_not: 'off'
      type: conditional
    - card:
        artwork: cover
        entity: media_player.playstation_4
        hide:
          controls: true
          mute: true
          power: true
          volume: true
        info: scroll
        type: custom:mini-media-player
      conditions:
      - entity: sensor.family_room_yamaha_source
        state: PS4
      type: conditional
    - entity: media_player.cast_family_room
      hide:
        power: true
        volume: true
      info: scroll
      name: Cast
      type: custom:mini-media-player
    - entity: media_player.family_room_speaker
      hide:
        power: true
      icon: mdi:dots-horizontal-circle
      info: scroll
      name: Google Home
      type: custom:mini-media-player
    type: vertical-stack
  - cards:
    - subtitle: Dreamscreen
      type: custom:mushroom-title-card
    - card:
        entity: dreamscreen.family_room
        icon: mdi:power
        icon_color: red
        primary: Power
        tap_action:
          action: call-service
          data:
            entity_id: dreamscreen.family_room
            mode: 0
          service: dreamscreen.set_mode
          target:
            entity_id: dreamscreen.family_room
        type: custom:mushroom-template-card
      conditions:
      - entity: dreamscreen.family_room
        state: 'on'
      type: conditional
    - cards:
      - entity: dreamscreen.family_room
        icon: mdi:television
        icon_color: "{%- if is_state_attr(entity, \"device_mode\", 1) -%}\n  purple\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        primary: Video
        tap_action:
          action: call-service
          data:
            entity_id: dreamscreen.family_room
            mode: 1
          service: dreamscreen.set_mode
          target:
            entity_id: dreamscreen.family_room
        type: custom:mushroom-template-card
      - entity: dreamscreen.family_room
        icon: mdi:music-note
        icon_color: "{%- if is_state_attr(entity, \"device_mode\", 2) -%}\n  blue\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        primary: Music
        tap_action:
          action: call-service
          data:
            entity_id: dreamscreen.family_room
            mode: 2
          service: dreamscreen.set_mode
          target:
            entity_id: dreamscreen.family_room
        type: custom:mushroom-template-card
      - entity: dreamscreen.family_room
        icon: mdi:lightbulb-on
        icon_color: "{%- if is_state_attr(entity, \"device_mode\", 3) -%}\n  amber\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        primary: Ambient
        tap_action:
          action: call-service
          data:
            entity_id: dreamscreen.family_room
            mode: 3
          service: dreamscreen.set_mode
          target:
            entity_id: dreamscreen.family_room
        type: custom:mushroom-template-card
      type: horizontal-stack
    - card:
        entities:
        - input_select.dreamscreen_family_room_scene
        type: entities
      conditions:
      - entity: sensor.ds_family_room_mode
        state: Ambient
      type: conditional
    type: vertical-stack
  icon: mdi:gamepad-circle
  layout:
    max_cols: 2
  path: family
  theme: Backend-selected
  title: Family
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.office_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.office_temperature
      type: entity
    - entity: switch.erebus
      tap_action:
        action: more-info
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Office
      type: custom:mushroom-title-card
    - entity: light.office_light
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              entity: light.office_light
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Main
        target: {}
      icon: mdi:lightbulb
      layout: horizontal
      name: Main
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: light.office_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              entity: light.office_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Lamp
        target: {}
      layout: horizontal
      name: Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: light.office_desk_led
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              - rgb_color:
                - 255
                - 255
                - 255
              - rgb_color:
                - 255
                - 0
                - 0
              - rgb_color:
                - 255
                - 0
                - 100
              - rgb_color:
                - 255
                - 116
                - 64
              - rgb_color:
                - 255
                - 165
                - 0
              - rgb_color:
                - 255
                - 255
                - 0
              - rgb_color:
                - 8
                - 224
                - 9
              - rgb_color:
                - 0
                - 255
                - 0
              - rgb_color:
                - 153
                - 255
                - 0
              - rgb_color:
                - 29
                - 187
                - 255
              - rgb_color:
                - 0
                - 255
                - 255
              - rgb_color:
                - 169
                - 3
                - 255
              - rgb_color:
                - 255
                - 0
                - 255
              entity: light.office_desk_led
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Desk LED
        target: {}
      icon: mdi:led-strip-variant
      layout: horizontal
      name: Desk
      show_brightness_control: true
      show_color_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: switch.office_shelf_led
      icon_color: amber
      name: Shelf
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - entity: media_player.office_speaker
    hide:
      power: true
    icon: mdi:dots-horizontal-circle
    info: scroll
    name: Google Home
    type: custom:mini-media-player
  icon: mdi:chair-rolling
  layout:
    max_cols: 2
  path: office
  theme: Backend-selected
  title: Office
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.kitchen_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.kitchen_temperature
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Kitchen
      type: custom:mushroom-title-card
    - entity: light.kitchen
      layout: horizontal
      name: Main
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: switch.dining_room_light
      icon_color: amber
      name: Dining
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  icon: mdi:fridge-variant
  layout:
    max_cols: 2
  path: kitchen
  theme: Backend-selected
  title: Kitchen
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.master_bedroom_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.master_bedroom_temperature
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Master Bedroom
      type: custom:mushroom-title-card
    - entity: light.master_bedroom_floor_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
                transition: 1
              - color_temp: 250
                transition: 1
              - color_temp: 181
                transition: 1
              - brightness: 153
                color_temp: 370
                icon_color: 'center no-repeat url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22mdi-book-open-variant%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23FFFFFF%22%20d%3D%22M17.5%2014.33C18.29%2014.33%2019.13%2014.41%2020%2014.57V16.07C19.38%2015.91%2018.54%2015.83%2017.5%2015.83C15.6%2015.83%2014.11%2016.16%2013%2016.82V15.13C14.17%2014.6%2015.67%2014.33%2017.5%2014.33M13%2012.46C14.29%2011.93%2015.79%2011.67%2017.5%2011.67C18.29%2011.67%2019.13%2011.74%2020%2011.9V13.4C19.38%2013.24%2018.54%2013.16%2017.5%2013.16C15.6%2013.16%2014.11%2013.5%2013%2014.15M17.5%2010.5C15.6%2010.5%2014.11%2010.82%2013%2011.5V9.84C14.23%209.28%2015.73%209%2017.5%209C18.29%209%2019.13%209.08%2020%209.23V10.78C19.26%2010.59%2018.41%2010.5%2017.5%2010.5M21%2018.5V7C19.96%206.67%2018.79%206.5%2017.5%206.5C15.45%206.5%2013.62%207%2012%208V19.5C13.62%2018.5%2015.45%2018%2017.5%2018C18.69%2018%2019.86%2018.16%2021%2018.5M17.5%204.5C19.85%204.5%2021.69%205%2023%206V20.56C23%2020.68%2022.95%2020.8%2022.84%2020.91C22.73%2021%2022.61%2021.08%2022.5%2021.08C22.39%2021.08%2022.31%2021.06%2022.25%2021.03C20.97%2020.34%2019.38%2020%2017.5%2020C15.45%2020%2013.62%2020.5%2012%2021.5C10.66%2020.5%208.83%2020%206.5%2020C4.84%2020%203.25%2020.36%201.75%2021.07C1.72%2021.08%201.68%2021.08%201.63%2021.1C1.59%2021.11%201.55%2021.12%201.5%2021.12C1.39%2021.12%201.27%2021.08%201.16%2021C1.05%2020.89%201%2020.78%201%2020.65V6C2.34%205%204.18%204.5%206.5%204.5C8.83%204.5%2010.66%205%2012%206C13.34%205%2015.17%204.5%2017.5%204.5Z%22%20%2F%3E%3C%2Fsvg%3E"),
                  #EA888C'
                transition: 1
              entity: light.master_bedroom_floor_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Floor Lamp
      layout: horizontal
      name: Floor Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
    type: vertical-stack
  - cards:
    - subtitle: Media
      type: custom:mushroom-title-card
    - cards:
      - entity: remote.master_bedroom
        icon: mdi:motion-play-outline
        icon_color: "{%- if is_state_attr(entity, \"current_activity\", \"Shield TV\"\
          ) -%}\n  green\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: Shield
        tap_action:
          action: call-service
          data:
            activity: Shield TV
          service: remote.turn_on
          target:
            entity_id: remote.master_bedroom
        type: custom:mushroom-template-card
      - card:
          entity: remote.master_bedroom
          icon: mdi:power
          icon_color: red
          primary: Power
          tap_action:
            action: call-service
            service: remote.turn_off
            target:
              entity_id: remote.master_bedroom
          type: custom:mushroom-template-card
        conditions:
        - entity: remote.master_bedroom
          state: 'on'
        type: conditional
      columns: 2
      square: false
      type: grid
    - card:
        artwork: material
        entity: media_player.master_bedroom_universal
        hide:
          power: true
          source: true
        icon: mdi:motion-play-outline
        info: scroll
        name: TV
        shortcuts:
          attribute: source
          buttons:
          - icon: mdi:apps
            id: com.google.android.tvlauncher
            name: Home
            type: source
          - icon: mdi:plex
            id: com.plexapp.android
            name: Plex
            type: source
          - icon: mdi:netflix
            id: com.netflix.ninja
            name: Netflix
            type: source
          - icon: fab:amazon
            id: com.amazon.amazonvideo.livingroom
            name: Prime
            type: source
          - icon: mdi:hulu
            id: com.hulu.livingroomplus
            name: Hulu
            type: source
          - icon: mdi:youtube
            id: com.google.android.youtube.tv
            name: YouTube
            type: source
          - icon: mdi:youtube-subscription
            id: com.google.android.youtube.tvkids
            name: YT Kids
            type: source
          - icon: fas:child
            id: org.pbskids.video
            name: PBS Kids
            type: source
          - icon: mdi:spotify
            id: com.spotify.tv.android
            name: Spotify
            type: source
          - icon: mdi:twitch
            id: tv.twitch.android.viewer
            name: Twitch
            type: source
          columns: 3
          hide_when_off: true
        type: custom:mini-media-player
      conditions:
      - entity: remote.master_bedroom
        state_not: 'off'
      type: conditional
    - entity: media_player.cast_master_bedroom
      hide:
        power: true
        volume: true
      info: scroll
      name: Cast
      type: custom:mini-media-player
    type: vertical-stack
  icon: mdi:bed-king
  layout:
    max_cols: 2
  path: master
  theme: Backend-selected
  title: Master
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.ethan_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.ethan_temperature
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Ethan
      type: custom:mushroom-title-card
    - entity: switch.ethans_lamp
      icon_color: amber
      name: Lamp
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  icon: mdi:robot
  layout:
    max_cols: 2
  path: ethan
  theme: Backend-selected
  title: Ethan
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.emma_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.emma_temperature
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Emma
      type: custom:mushroom-title-card
    type: vertical-stack
  icon: mdi:unicorn-variant
  layout:
    max_cols: 2
  path: emma
  theme: Backend-selected
  title: Emma
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- if is_state(entity, \"on\") -%}\n  Detected\n{%- else -%}\n  Clear\n\
        {%- endif -%}"
      entity: binary_sensor.garage_occupancy
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:home-circle\n{%- else -%}\n\
        \  mdi:circle-off-outline\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  cyan\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    - entity: sensor.garage_multisensor_air_temperature
      type: entity
    - entity: sensor.garage_multisensor_humidity
      type: entity
    - entity: sensor.garage_multisensor_illuminance
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Garage
      type: custom:mushroom-title-card
    - entity: switch.garage_light
      icon_color: amber
      name: Light
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - entity: cover.garage_door
    show_buttons_control: true
    tap_action:
      action: more-info
    type: custom:mushroom-cover-card
  - entity: binary_sensor.opengarage_vehicle_present
    icon: mdi:car-estate
    icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n  red\n\
      {%- endif -%}"
    primary: Ascent in Garage
    secondary: '{{ "Yes" if is_state(entity, "on") else "No" }}'
    tap_action:
      action: more-info
    type: custom:mushroom-template-card
  icon: mdi:garage-variant
  layout:
    max_cols: 2
  path: garage
  theme: Backend-selected
  title: Garage
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - entity: sensor.ascent_odometer
      type: entity
    - entity: sensor.ascent_range
      type: entity
    - chip:
        entity: sensor.ascent_external_temp
        type: entity
      conditions:
      - entity: sensor.ascent_external_temp
        state_not: unavailable
      type: conditional
    - entity: sensor.ascent_12v_battery_voltage
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Press and Hold to Activate Actions
      title: Ascent
      type: custom:mushroom-title-card
    - entity: script.subaru_remote_start
      hold_action:
        action: call-service
        service: remote.turn_off
        target:
          entity_id: script.subaru_remote_start
      icon: mdi:key-wireless
      icon_color: amber
      primary: Start Car
      secondary: Open the Garage and Start the Ascent
      tap_action:
        action: none
      type: custom:mushroom-template-card
    - entities:
      - select.ascent_climate_preset
      type: entities
    - cards:
      - entity: lock.ascent_door_locks
        hold_action:
          action: call-service
          service: lock.lock
          target:
            entity_id: lock.ascent_door_locks
        icon: mdi:lock
        icon_color: grey
        primary: Lock
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: lock.ascent_door_locks
        hold_action:
          action: call-service
          service: lock.unlock
          target:
            entity_id: lock.ascent_door_locks
        icon: mdi:lock-open
        icon_color: grey
        primary: Unlock
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_remote_start
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_remote_start
        icon: mdi:key-wireless
        icon_color: grey
        primary: Remote Start
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_remote_stop
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_remote_stop
        icon: mdi:stop-circle-outline
        icon_color: grey
        primary: Remote Stop
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_lights_start
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_lights_start
        icon: mdi:lightbulb-on
        icon_color: grey
        primary: Flash Lights
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_lights_stop
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_lights_stop
        icon: mdi:lightbulb-off
        icon_color: grey
        primary: Stop Flash Lights
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_horn_start
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_horn_start
        icon: mdi:volume-high
        icon_color: grey
        primary: Sound Horn
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_horn_stop
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_horn_stop
        icon: mdi:volume-off
        icon_color: grey
        primary: Stop Horn
        tap_action:
          action: none
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Location
      type: custom:mushroom-title-card
    - cards:
      - entity: device_tracker.ascent_location
        icon: mdi:car-estate
        icon_color: disabled
        type: custom:mushroom-entity-card
      - entity: binary_sensor.opengarage_vehicle_present
        icon: mdi:car-estate
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
          \  red\n{%- endif -%}"
        primary: Ascent in Garage
        secondary: '{{ "Yes" if is_state(entity, "on") else "No" }}'
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    - entities:
      - entity: device_tracker.ascent_location
        name: ' '
      type: history-graph
    - aspect_ratio: '16:9'
      dark_mode: true
      default_zoom: 12
      entities:
      - entity: device_tracker.ascent_location
      hours_to_show: 4
      type: map
    type: vertical-stack
  - cards:
    - subtitle: Doors / Windows
      type: custom:mushroom-title-card
    - card:
        columns: 1
        square: false
        type: grid
      card_param: cards
      filter:
        exclude:
        - state: 'off'
        - state: unavailable
        include:
        - entity_id: binary_sensor.ascent_*_door
          options:
            type: custom:mushroom-entity-card
        - entity_id: binary_sensor.ascent_*_window
          options:
            type: custom:mushroom-entity-card
      type: custom:auto-entities
    type: vertical-stack
  - cards:
    - subtitle: Tire Pressure
      type: custom:mushroom-title-card
    - cards:
      - entity: sensor.ascent_tire_pressure_fl
        max: 40
        min: 25
        name: Front Left
        needle: true
        segments:
        - color: rgb(var(--color-red))
          from: 25
        - color: rgb(var(--color-yellow))
          from: 28
        - color: rgb(var(--color-green))
          from: 30
        - color: rgb(var(--color-yellow))
          from: 35
        - color: rgb(var(--color-red))
          from: 37
        type: gauge
      - entity: sensor.ascent_tire_pressure_fr
        max: 40
        min: 25
        name: Front Right
        needle: true
        segments:
        - color: rgb(var(--color-red))
          from: 25
        - color: rgb(var(--color-yellow))
          from: 28
        - color: rgb(var(--color-green))
          from: 30
        - color: rgb(var(--color-yellow))
          from: 35
        - color: rgb(var(--color-red))
          from: 37
        type: gauge
      - entity: sensor.ascent_tire_pressure_rl
        max: 40
        min: 25
        name: Rear Left
        needle: true
        segments:
        - color: rgb(var(--color-red))
          from: 25
        - color: rgb(var(--color-yellow))
          from: 28
        - color: rgb(var(--color-green))
          from: 30
        - color: rgb(var(--color-yellow))
          from: 35
        - color: rgb(var(--color-red))
          from: 37
        type: gauge
      - entity: sensor.ascent_tire_pressure_rr
        max: 40
        min: 25
        name: Rear Right
        needle: true
        segments:
        - color: rgb(var(--color-red))
          from: 25
        - color: rgb(var(--color-yellow))
          from: 28
        - color: rgb(var(--color-green))
          from: 30
        - color: rgb(var(--color-yellow))
          from: 35
        - color: rgb(var(--color-red))
          from: 37
        type: gauge
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Update Data
      type: custom:mushroom-title-card
    - cards:
      - entity: button.ascent_refresh
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_refresh
        icon: mdi:refresh
        icon_color: grey
        primary: Refresh
        secondary: Get from server
        tap_action:
          action: none
        type: custom:mushroom-template-card
      - entity: button.ascent_locate
        hold_action:
          action: call-service
          service: button.press
          target:
            entity_id: button.ascent_locate
        icon: mdi:car-connected
        icon_color: grey
        primary: Poll
        secondary: Get instant data
        tap_action:
          action: none
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  icon: mdi:car-estate
  layout:
    max_cols: 2
  path: subaru
  theme: Backend-selected
  title: Subaru
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Lights
      title: Outside
      type: custom:mushroom-title-card
    - entity: light.outside_front
      layout: horizontal
      name: Front
      show_brightness_control: true
      type: custom:mushroom-light-card
    - cards:
      - entity: switch.outside_side_light
        icon_color: amber
        name: Side
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      - entity: switch.outside_back_light
        icon_color: amber
        name: Back
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  icon: mdi:spa
  layout:
    max_cols: 2
  path: outside
  theme: Backend-selected
  title: Outside
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Water
      title: Utility
      type: custom:mushroom-title-card
    - cards:
      - entity: binary_sensor.water_main_water_alarm_water_leak_detected
        icon_color: pink
        name: Water Main
        type: custom:mushroom-entity-card
      - entity: binary_sensor.fridge_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Fridge
        type: custom:mushroom-entity-card
      - entity: binary_sensor.laundry_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Laundry
        type: custom:mushroom-entity-card
      - entity: binary_sensor.water_heater_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Water Heater
        type: custom:mushroom-entity-card
      - entity: binary_sensor.bathroom_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Bathroom
        type: custom:mushroom-entity-card
      - entity: binary_sensor.master_bathroom_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Master Bathroom
        type: custom:mushroom-entity-card
      - entity: binary_sensor.basement_bathroom_leak_sensor_water_alarm_water_leak_detected
        icon_color: pink
        name: Basement Bathroom
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    - entity: switch.water_main
      hold_action:
        action: toggle
      icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:valve-open\n{%- elif is_state(entity,\
        \ \"off\") -%}\n  mdi:valve-closed\n{%- else -%}\n  mdi:valve\n{%- endif -%}"
      icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- elif is_state(entity,\
        \ \"off\") -%}\n  red\n{%- else -%}\n  grey\n{%- endif -%}"
      primary: Water Main Valve
      secondary: "{%- if is_state(entity, \"on\") -%}\n  Press and Hold to close\n\
        {%- elif is_state(entity, \"off\") -%}\n  Press and Hold to open\n{%- endif\
        \ -%}"
      tap_action:
        action: more-info
      type: custom:mushroom-template-card
    - animation:
        state: 'on'
      decimal: 1
      entities:
      - entity: sensor.salt_level
        name: Water Softener Salt Level
      name: Water Softener Salt Level
      positions:
        icon: 'off'
        indicator: 'off'
      severity:
      - color: rgb(var(--color-red))
        from: 0
        to: 19
      - color: rgb(var(--color-orange))
        from: 20
        to: 39
      - color: rgb(var(--color-amber))
        from: 40
        to: 59
      - color: rgb(var(--color-lime))
        from: 60
        to: 79
      - color: rgb(var(--color-green))
        from: 80
        to: 100
      style: "bar-card-name,\nbar-card-value {\n  text-shadow: 1px 1px #0005;\n}"
      type: custom:bar-card
    type: vertical-stack
  - cards:
    - subtitle: Sprinklers
      type: custom:mushroom-title-card
    - cards:
      - entity: switch.zone_1_front_north
        hold_action:
          action: toggle
        name: 1 | Front North
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_2_front_middle
        hold_action:
          action: toggle
        name: 2 | Front Middle
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_3_north_fence
        hold_action:
          action: toggle
        name: 3 | North Fence
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_4_back_middle_south
        hold_action:
          action: toggle
        name: 4 | Back Middle
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_5_back_south
        hold_action:
          action: toggle
        name: 5 | Back South
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_6_front_south
        hold_action:
          action: toggle
        name: 6 | Front South
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.zone_7_flower_beds
        hold_action:
          action: toggle
        name: 7 | Flower Beds
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      - entity: switch.rachio_standby_mode
        hold_action:
          action: toggle
        name: Standby
        tap_action:
          action: more-info
        type: custom:mushroom-entity-card
        use_entity_picture: false
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  icon: mdi:progress-wrench
  layout:
    max_cols: 2
  path: utility
  theme: Backend-selected
  title: Utility
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    type: custom:mushroom-chips-card
  - title: Computers
    type: custom:mushroom-title-card
  - cards:
    - entity: light.magicmirror
      layout: horizontal
      show_brightness_control: true
      type: custom:mushroom-light-card
    type: vertical-stack
  - cards:
    - subtitle: 'Ardena

        R5-5600X | RTX 3080 | 750W'
      type: custom:mushroom-title-card
    - card:
        entity: switch.ardena
        hold_action:
          action: call-service
          data: {}
          service: switch.toggle
          target:
            entity_id: switch.ardena
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n  mdi:power-off\n\
          {%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
          \  red\n{%- endif -%}"
        primary: Power
        tap_action:
          action: none
        type: custom:mushroom-template-card
      conditions:
      - entity: binary_sensor.ardena_connected
        state: 'off'
      type: conditional
    - card:
        cards:
        - entity: switch.ardena
          hold_action:
            action: call-service
            data: {}
            service: switch.toggle
            target:
              entity_id: switch.ardena
          icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n\
            \  mdi:power-off\n{%- endif -%}"
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  red\n{%- endif -%}"
          layout: vertical
          primary: Power
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_lock
          hold_action:
            action: call-service
            data:
              computer: ardena
            service: script.iotlink_lock
            target: {}
          icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:lock\n{%- else -%}\n \
            \ mdi:lock-open\n{%- endif -%}"
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Lock
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_suspend
          hold_action:
            action: call-service
            data:
              computer: ardena
            service: script.iotlink_suspend
            target: {}
          icon: mdi:sleep
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Sleep
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_reboot
          hold_action:
            action: call-service
            data:
              computer: ardena
            service: script.iotlink_reboot
            target: {}
          icon: mdi:reload
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Reboot
          tap_action:
            action: none
          type: custom:mushroom-template-card
        type: horizontal-stack
      conditions:
      - entity: binary_sensor.ardena_connected
        state: 'on'
      type: conditional
    - entity: switch.computer_exhaust_fan
      icon: mdi:fan
      icon_animation: true
      type: custom:mushroom-fan-card
    - alias:
        ko: Offline
        ok: Online
      alignment:
        header: left
        icon_first: true
        status: spaced
      bar:
        amount: 60
        height: 20
        round: 0
        spacing: 1
      color:
        half: rgb(var(--color-orange))
        ko: rgba(var(--color-grey),50%)
        none: rgb(var(--color-black))
        ok: rgb(var(--color-green))
      entity: binary_sensor.ardena_connected
      hours_to_show: 120
      icon: mdi:connection
      icon_adaptive_color: true
      ko: 'off'
      ko_icon: mdi:exclamation-thick
      name: Ardena Up-Time
      ok: 'on'
      show:
        average: true
        footer: true
        header: true
        icon: true
        status: true
        timeline: true
        title: true
      tap_action:
        action: more-info
      title_adaptive_color: true
      tooltip:
        animation: true
        hour24: false
      type: custom:uptime-card
      update_interval: 30
    type: vertical-stack
  - cards:
    - subtitle: 'Erebus

        R7-2700 | RX 580 | 650W'
      type: custom:mushroom-title-card
    - cards:
      - entity: switch.erebus
        hold_action:
          action: call-service
          data: {}
          service: switch.toggle
          target:
            entity_id: switch.erebus
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n  mdi:power-off\n\
          {%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
          \  red\n{%- endif -%}"
        primary: Power
        tap_action:
          action: none
        type: custom:mushroom-template-card
      type: horizontal-stack
    - alias:
        ko: Offline
        ok: Online
      alignment:
        header: left
        icon_first: true
        status: spaced
      bar:
        amount: 60
        height: 20
        round: 0
        spacing: 1
      color:
        half: rgb(var(--color-orange))
        ko: rgba(var(--color-grey),50%)
        none: rgb(var(--color-black))
        ok: rgb(var(--color-green))
      entity: switch.erebus
      hours_to_show: 120
      icon: mdi:connection
      icon_adaptive_color: true
      ko: 'off'
      ko_icon: mdi:exclamation-thick
      name: Erebus Up-Time
      ok: 'on'
      show:
        average: true
        footer: true
        header: true
        icon: true
        status: true
        timeline: true
        title: true
      tap_action:
        action: more-info
      title_adaptive_color: true
      tooltip:
        animation: true
        hour24: false
      type: custom:uptime-card
      update_interval: 30
    type: vertical-stack
  - cards:
    - subtitle: Oculus Quest 2
      type: custom:mushroom-title-card
    - alias:
        ko: Standby
        ok: Playing
      alignment:
        header: left
        icon_first: true
        status: spaced
      bar:
        amount: 60
        height: 20
        round: 0
        spacing: 1
      color:
        half: rgb(var(--color-orange))
        ko: rgba(var(--color-grey),50%)
        none: rgb(var(--color-black))
        ok: rgb(var(--color-green))
      entity: binary_sensor.quest_interactive
      hours_to_show: 120
      icon: fas:vr-cardboard
      icon_adaptive_color: true
      ko: 'off'
      ko_icon: mdi:exclamation-thick
      name: Quest 2 Interactive
      ok: 'on'
      show:
        average: true
        footer: true
        header: true
        icon: true
        status: true
        timeline: true
        title: true
      tap_action:
        action: more-info
      title_adaptive_color: true
      tooltip:
        animation: true
        hour24: false
      type: custom:uptime-card
      update_interval: 30
    - animation:
        state: 'on'
      decimal: 0
      entities:
      - entity: sensor.quest_battery_level
      name: Quest 2 Battery Level
      positions:
        indicator: inside
      severity:
      - color: rgb(var(--color-red))
        from: 0
        to: 9
      - color: rgb(var(--color-orange))
        from: 10
        to: 29
      - color: rgb(var(--color-amber))
        from: 30
        to: 49
      - color: rgb(var(--color-lime))
        from: 50
        to: 69
      - color: rgb(var(--color-green))
        from: 80
        to: 100
      style: "bar-card-name,\nbar-card-value {\n  text-shadow: 1px 1px #0005;\n}"
      type: custom:bar-card
    - cards:
      - entities:
        - entity: sensor.quest_wifi_link_speed
          name: WiFi Speed
        font_size: 75
        line_color: rgb(var(--color-blue))
        line_width: 8
        points_per_hour: 1
        show:
          labels: false
          labels_secondary: false
        type: custom:mini-graph-card
      - entities:
        - entity: sensor.quest_wifi_signal_strength
          name: WiFi Signal
        font_size: 75
        line_color: rgb(var(--color-yellow))
        line_width: 8
        points_per_hour: 1
        show:
          labels: false
          labels_secondary: false
        type: custom:mini-graph-card
      type: horizontal-stack
    type: vertical-stack
  - cards:
    - subtitle: 'Athos

        i5-6500 | GTX 1070 | 500W'
      type: custom:mushroom-title-card
    - card:
        entity: switch.athos
        hold_action:
          action: call-service
          data: {}
          service: switch.toggle
          target:
            entity_id: switch.athos
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n  mdi:power-off\n\
          {%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
          \  red\n{%- endif -%}"
        primary: Power
        tap_action:
          action: none
        type: custom:mushroom-template-card
      conditions:
      - entity: binary_sensor.athos_connected
        state: 'off'
      type: conditional
    - card:
        cards:
        - entity: switch.athos
          hold_action:
            action: call-service
            data: {}
            service: switch.toggle
            target:
              entity_id: switch.athos
          icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:power\n{%- else -%}\n\
            \  mdi:power-off\n{%- endif -%}"
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  red\n{%- endif -%}"
          layout: vertical
          primary: Power
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_lock
          hold_action:
            action: call-service
            data:
              computer: athos
            service: script.iotlink_lock
            target: {}
          icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:lock\n{%- else -%}\n \
            \ mdi:lock-open\n{%- endif -%}"
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Lock
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_suspend
          hold_action:
            action: call-service
            data:
              computer: athos
            service: script.iotlink_suspend
            target: {}
          icon: mdi:sleep
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Sleep
          tap_action:
            action: none
          type: custom:mushroom-template-card
        - entity: script.iotlink_reboot
          hold_action:
            action: call-service
            data:
              computer: athos
            service: script.iotlink_reboot
            target: {}
          icon: mdi:reload
          icon_color: "{%- if is_state(entity, \"on\") -%}\n  green\n{%- else -%}\n\
            \  grey\n{%- endif -%}"
          layout: vertical
          primary: Reboot
          tap_action:
            action: none
          type: custom:mushroom-template-card
        type: horizontal-stack
      conditions:
      - entity: binary_sensor.athos_connected
        state: 'on'
      type: conditional
    - alias:
        ko: Offline
        ok: Online
      alignment:
        header: left
        icon_first: true
        status: spaced
      bar:
        amount: 60
        height: 20
        round: 0
        spacing: 1
      color:
        half: rgb(var(--color-orange))
        ko: rgba(var(--color-grey),50%)
        none: rgb(var(--color-black))
        ok: rgb(var(--color-green))
      entity: binary_sensor.athos_connected
      hours_to_show: 120
      icon: mdi:connection
      icon_adaptive_color: true
      ko: 'off'
      ko_icon: mdi:exclamation-thick
      name: Athos Up-Time
      ok: 'on'
      show:
        average: true
        footer: true
        header: true
        icon: true
        status: true
        timeline: true
        title: true
      tap_action:
        action: more-info
      title_adaptive_color: true
      tooltip:
        animation: true
        hour24: false
      type: custom:uptime-card
      update_interval: 30
    type: vertical-stack
  icon: mdi:desktop-tower
  layout:
    max_cols: 3
  path: computer
  theme: Backend-selected
  title: Computer
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - entity: binary_sensor.ecobee_away_mode
      icon_color: cyan
      type: entity
    type: custom:mushroom-chips-card
  - cards:
    - title: Climate
      type: custom:mushroom-title-card
    - cards:
      - entity: climate.home
        template: card_thermostat
        type: custom:button-card
        variables:
          ulm_card_thermostat_enable_background_color: false
          ulm_card_thermostat_enable_collapse: true
          ulm_card_thermostat_enable_controls: true
          ulm_card_thermostat_enable_hvac_modes: true
          ulm_card_thermostat_enable_popup: true
          ulm_card_thermostat_minimum_temp_spread: 4
      - cards:
        - entity: sensor.home_temperature
          icon_color: green
          name: Inside
          primary_info: state
          secondary_info: name
          type: custom:mushroom-entity-card
        - entity: sensor.home_humidity
          icon_color: blue
          name: Humidity
          primary_info: state
          secondary_info: name
          type: custom:mushroom-entity-card
        columns: 3
        square: false
        type: grid
      keep:
        background: false
        box_shadow: false
        margin: false
      type: custom:stack-in-card
    - entities:
      - entity: sensor.ecobee_mode
        name: ' '
      type: history-graph
    type: vertical-stack
  - cards:
    - subtitle: Thermostat Detail
      type: custom:mushroom-title-card
    - all_series_config:
        extend_to: now
        stroke_width: 2
        type: line
      apex_config:
        chart:
          foreColor: '#7B7B7B'
          toolbar:
            show: false
        grid:
          borderColor: '#7B7B7B'
        xaxis:
          tooltip:
            enabled: false
      graph_span: 1d
      header:
        colorize_states: true
        show: true
        show_states: true
      series:
      - color: rgb(158,158,158)
        entity: sensor.home_temperature
        name: Indoor Temp
        yaxis_id: temp
      - attribute: target_temp_high
        color: rgb(33,150,243)
        entity: climate.home
        name: Cool Setpoint
        stroke_width: 1
        unit: °F
        yaxis_id: temp
      - attribute: target_temp_low
        color: rgb(255,152,0)
        entity: climate.home
        name: Heat Setpoint
        stroke_width: 1
        unit: °F
        yaxis_id: temp
      - attribute: temperature
        color: rgb(33,150,243)
        entity: climate.home
        name: Setpoint
        stroke_width: 1
        unit: °F
        yaxis_id: temp
      - color: rgb(0,150,136)
        entity: sensor.home_humidity
        name: Indoor Humidity
        yaxis_id: perc
      - color: rgb(96,125,139)
        entity: sensor.garage_multisensor_humidity
        name: Garage Humidity
        yaxis_id: perc
      type: custom:apexcharts-card
      yaxis:
      - apex_config:
          tickAmount: 4
        decimals: 0
        id: temp
        max: ~85
        min: ~65
      - apex_config:
          tickAmount: 4
        decimals: 0
        id: perc
        max: ~50
        min: ~10
        opposite: true
    type: vertical-stack
  - cards:
    - subtitle: Temperatures
      type: custom:mushroom-title-card
    - all_series_config:
        extend_to: now
        stroke_width: 2
        type: line
      apex_config:
        chart:
          foreColor: '#7B7B7B'
          toolbar:
            show: false
        grid:
          borderColor: '#7B7B7B'
        xaxis:
          tooltip:
            enabled: false
      graph_span: 1d
      header:
        colorize_states: true
        show: true
        show_states: true
      series:
      - color: rgb(255,87,34)
        entity: sensor.home_temperature
        name: Home
      - color: rgb(255,235,59)
        entity: sensor.family_room_temperature
        name: Family
      - color: rgb(33,150,243)
        entity: sensor.office_temperature
        name: Office
      - color: rgb(205,220,57)
        entity: sensor.kitchen_temperature
        name: Kitchen
      - color: rgb(103,58,183)
        entity: sensor.master_bedroom_temperature
        name: Master
      - color: rgb(156,39,176)
        entity: sensor.emma_temperature
        name: Emma
      - color: rgb(76,175,80)
        entity: sensor.ethan_temperature
        name: Ethan
      - color: rgb(0,188,212)
        entity: sensor.guest_room_temperature
        name: Guest
      - color: rgb(121,85,72)
        entity: sensor.water_main_air_temperature
        name: Utility
      - color: rgb(96,125,139)
        entity: sensor.garage_multisensor_air_temperature
        name: Garage
      type: custom:apexcharts-card
      yaxis:
      - apex_config:
          tickAmount: 4
        decimals: 0
        max: ~78
        min: ~65
    type: vertical-stack
  icon: mdi:thermostat-box
  layout:
    max_cols: 2
  path: climate
  theme: Backend-selected
  title: Climate
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ ns.lights|count\
        \ }}"
      entity: group.all_light_switches
      hold_action:
        action: call-service
        data: {}
        service: homeassistant.turn_off
        target:
          entity_id: group.all_light_switches
      icon: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{%- if ns.lights|count\
        \ > 0 -%}\n  mdi:lightbulb-group\n{%- else -%}\n  mdi:lightbulb-group-off\n\
        {%- endif -%}"
      icon_color: "{%- set ns = namespace(lights=[]) -%}\n{%- for entity_id in states[entity].attributes.entity_id\
        \ -%}\n  {%- if is_state(entity_id, \"on\") -%}\n    {%- set ns.lights = ns.lights\
        \ + [ entity_id ] -%}\n  {%- endif -%}\n{%- endfor -%}\n{%- if ns.lights|count\
        \ > 0 -%}\n  amber\n{%- else -%}\n  grey\n{%- endif -%}"
      tap_action:
        action: more-info
      type: template
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Living Room
      title: Light Control
      type: custom:mushroom-title-card
    - entity: light.living_room
      layout: horizontal
      name: Living Room
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: light.living_room_floor_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
                transition: 1
              - color_temp: 250
                transition: 1
              - color_temp: 181
                transition: 1
              - brightness: 153
                color_temp: 370
                icon_color: 'center no-repeat url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22mdi-book-open-variant%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23FFFFFF%22%20d%3D%22M17.5%2014.33C18.29%2014.33%2019.13%2014.41%2020%2014.57V16.07C19.38%2015.91%2018.54%2015.83%2017.5%2015.83C15.6%2015.83%2014.11%2016.16%2013%2016.82V15.13C14.17%2014.6%2015.67%2014.33%2017.5%2014.33M13%2012.46C14.29%2011.93%2015.79%2011.67%2017.5%2011.67C18.29%2011.67%2019.13%2011.74%2020%2011.9V13.4C19.38%2013.24%2018.54%2013.16%2017.5%2013.16C15.6%2013.16%2014.11%2013.5%2013%2014.15M17.5%2010.5C15.6%2010.5%2014.11%2010.82%2013%2011.5V9.84C14.23%209.28%2015.73%209%2017.5%209C18.29%209%2019.13%209.08%2020%209.23V10.78C19.26%2010.59%2018.41%2010.5%2017.5%2010.5M21%2018.5V7C19.96%206.67%2018.79%206.5%2017.5%206.5C15.45%206.5%2013.62%207%2012%208V19.5C13.62%2018.5%2015.45%2018%2017.5%2018C18.69%2018%2019.86%2018.16%2021%2018.5M17.5%204.5C19.85%204.5%2021.69%205%2023%206V20.56C23%2020.68%2022.95%2020.8%2022.84%2020.91C22.73%2021%2022.61%2021.08%2022.5%2021.08C22.39%2021.08%2022.31%2021.06%2022.25%2021.03C20.97%2020.34%2019.38%2020%2017.5%2020C15.45%2020%2013.62%2020.5%2012%2021.5C10.66%2020.5%208.83%2020%206.5%2020C4.84%2020%203.25%2020.36%201.75%2021.07C1.72%2021.08%201.68%2021.08%201.63%2021.1C1.59%2021.11%201.55%2021.12%201.5%2021.12C1.39%2021.12%201.27%2021.08%201.16%2021C1.05%2020.89%201%2020.78%201%2020.65V6C2.34%205%204.18%204.5%206.5%204.5C8.83%204.5%2010.66%205%2012%206C13.34%205%2015.17%204.5%2017.5%204.5Z%22%20%2F%3E%3C%2Fsvg%3E"),
                  #EA888C'
                transition: 1
              entity: light.living_room_floor_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Floor Lamp
      layout: horizontal
      name: Floor Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
    - entity: switch.hallway_light
      icon_color: amber
      name: Hallway
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    - cards:
      - entity: switch.front_entry_light
        icon_color: amber
        name: Entry
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      - entity: switch.garage_entry_light
        icon_color: amber
        name: Garage Entry
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Kitchen
      type: custom:mushroom-title-card
    - entity: light.kitchen
      layout: horizontal
      name: Kitchen
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: switch.dining_room_light
      icon_color: amber
      name: Dining
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - cards:
    - subtitle: Office
      type: custom:mushroom-title-card
    - entity: light.office_light
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              entity: light.office_light
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Main
        target: {}
      icon: mdi:lightbulb
      layout: horizontal
      name: Main
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: light.office_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              entity: light.office_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Lamp
        target: {}
      layout: horizontal
      name: Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: light.office_desk_led
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
              - color_temp: 250
              - color_temp: 181
              - icon_color: linear-gradient(15deg, rgba(144,0,0,1) 0%, rgba(255,0,0,1)
                  100%)
                rgb_color:
                - 255
                - 30
                - 0
              - icon_color: linear-gradient(15deg, rgba(16,101,54,1) 0%, rgba(102,211,151,1)
                  100%)
                rgb_color:
                - 8
                - 224
                - 9
              - icon_color: linear-gradient(15deg, rgba(46,217,8,1) 0%, rgba(176,255,59,1)
                  100%)
                rgb_color:
                - 153
                - 255
                - 0
              - icon_color: linear-gradient(15deg, rgba(26,87,130,1) 0%, rgba(0,149,255,1)
                  100%)
                rgb_color:
                - 29
                - 187
                - 255
              - icon_color: linear-gradient(15deg, rgba(96,21,149,1) 0%, rgba(181,126,220,1)
                  100%)
                rgb_color:
                - 169
                - 3
                - 255
              - icon_color: linear-gradient(15deg, rgba(255,59,39,1) 0%, rgba(255,116,64,1)
                  100%)
                rgb_color:
                - 255
                - 116
                - 64
              - icon_color: linear-gradient(15deg, rgba(201,38,101,1) 0%, rgba(255,0,100,1)
                  100%)
                rgb_color:
                - 255
                - 0
                - 100
              - rgb_color:
                - 255
                - 0
                - 0
              - rgb_color:
                - 255
                - 165
                - 0
              - rgb_color:
                - 255
                - 255
                - 0
              - rgb_color:
                - 0
                - 255
                - 0
              - rgb_color:
                - 0
                - 255
                - 255
              - rgb_color:
                - 255
                - 0
                - 255
              entity: light.office_desk_led
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Desk LED
        target: {}
      icon: mdi:led-strip-variant
      layout: horizontal
      name: Desk
      show_brightness_control: true
      show_color_control: true
      type: custom:mushroom-light-card
      use_light_color: true
    - entity: switch.office_shelf_led
      icon_color: amber
      name: Shelf
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - cards:
    - subtitle: Family Room
      type: custom:mushroom-title-card
    - entity: light.family_room
      layout: horizontal
      name: Family Room
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: light.play_space
      layout: horizontal
      name: Play Space
      show_brightness_control: true
      type: custom:mushroom-light-card
    - entity: switch.stair_light
      icon_color: amber
      name: Stairs
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - cards:
    - subtitle: Bedrooms
      type: custom:mushroom-title-card
    - entity: light.master_bedroom_floor_lamp
      hold_action:
        action: fire-dom-event
        browser_mod:
          card:
            card:
              colors:
              - color_temp: 370
                transition: 1
              - color_temp: 250
                transition: 1
              - color_temp: 181
                transition: 1
              - brightness: 153
                color_temp: 370
                icon_color: 'center no-repeat url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22mdi-book-open-variant%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23FFFFFF%22%20d%3D%22M17.5%2014.33C18.29%2014.33%2019.13%2014.41%2020%2014.57V16.07C19.38%2015.91%2018.54%2015.83%2017.5%2015.83C15.6%2015.83%2014.11%2016.16%2013%2016.82V15.13C14.17%2014.6%2015.67%2014.33%2017.5%2014.33M13%2012.46C14.29%2011.93%2015.79%2011.67%2017.5%2011.67C18.29%2011.67%2019.13%2011.74%2020%2011.9V13.4C19.38%2013.24%2018.54%2013.16%2017.5%2013.16C15.6%2013.16%2014.11%2013.5%2013%2014.15M17.5%2010.5C15.6%2010.5%2014.11%2010.82%2013%2011.5V9.84C14.23%209.28%2015.73%209%2017.5%209C18.29%209%2019.13%209.08%2020%209.23V10.78C19.26%2010.59%2018.41%2010.5%2017.5%2010.5M21%2018.5V7C19.96%206.67%2018.79%206.5%2017.5%206.5C15.45%206.5%2013.62%207%2012%208V19.5C13.62%2018.5%2015.45%2018%2017.5%2018C18.69%2018%2019.86%2018.16%2021%2018.5M17.5%204.5C19.85%204.5%2021.69%205%2023%206V20.56C23%2020.68%2022.95%2020.8%2022.84%2020.91C22.73%2021%2022.61%2021.08%2022.5%2021.08C22.39%2021.08%2022.31%2021.06%2022.25%2021.03C20.97%2020.34%2019.38%2020%2017.5%2020C15.45%2020%2013.62%2020.5%2012%2021.5C10.66%2020.5%208.83%2020%206.5%2020C4.84%2020%203.25%2020.36%201.75%2021.07C1.72%2021.08%201.68%2021.08%201.63%2021.1C1.59%2021.11%201.55%2021.12%201.5%2021.12C1.39%2021.12%201.27%2021.08%201.16%2021C1.05%2020.89%201%2020.78%201%2020.65V6C2.34%205%204.18%204.5%206.5%204.5C8.83%204.5%2010.66%205%2012%206C13.34%205%2015.17%204.5%2017.5%204.5Z%22%20%2F%3E%3C%2Fsvg%3E"),
                  #EA888C'
                transition: 1
              entity: light.master_bedroom_floor_lamp
              justify: around
              type: custom:rgb-light-card
            style: "ha-card {\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom:\
              \ 20px;     \n}\n"
            type: custom:mod-card
          command: popup
          title: Floor Lamp
      layout: horizontal
      name: M. Bed Floor Lamp
      show_brightness_control: true
      show_color_temp_control: true
      type: custom:mushroom-light-card
    - entity: switch.ethans_lamp
      icon_color: amber
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  - cards:
    - subtitle: Outside
      type: custom:mushroom-title-card
    - entity: light.outside_front
      layout: horizontal
      name: Front
      show_brightness_control: true
      type: custom:mushroom-light-card
    - cards:
      - entity: switch.outside_side_light
        icon_color: amber
        name: Side
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      - entity: switch.outside_back_light
        icon_color: amber
        name: Back
        tap_action:
          action: toggle
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    - entity: switch.garage_light
      icon_color: amber
      name: Garage
      tap_action:
        action: toggle
      type: custom:mushroom-entity-card
    type: vertical-stack
  icon: mdi:lightbulb-group
  layout:
    max_cols: 3
  path: lights
  theme: Backend-selected
  title: Lights
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    - content: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"Secure\" if ns.entities|count == 0 else \"Not Secure\"\
        \ }}"
      entity: lock.lock_front
      hold_action:
        action: none
      icon: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"mdi:shield-check\" if ns.entities|count == 0 else \"mdi:shield-alert\"\
        \ }}"
      icon_color: "{%- set ns = namespace(entities=[]) -%} {%- set open_doors = states|selectattr(\"\
        entity_id\", \"in\", state_attr(\"group.all_doors\",\"entity_id\"))|map(attribute=\"\
        entity_id\")|list -%} {%- for entity_id in open_doors -%}\n  {%- if is_state(entity_id,\
        \ \"on\") -%}\n    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n\
        \  {%- endif -%}\n{%- endfor -%} {%- set security = [\n  \"lock.lock_front\"\
        ,\n  \"cover.garage_door\"\n] -%} {%- for entity_id in security -%}\n  {%-\
        \ if is_state(entity_id, \"open\") or is_state(entity_id, \"unlocked\") -%}\n\
        \    {%- set ns.entities = ns.entities + [ entity_id ] -%}\n  {%- endif -%}\n\
        {%- endfor -%} {{ \"green\" if ns.entities|count == 0 else \"pink\" }}"
      tap_action:
        action: none
      type: template
    type: custom:mushroom-chips-card
  - title: Security
    type: custom:mushroom-title-card
  - entity: lock.lock_front
    name: Front Door
    tap_action:
      action: more-info
    type: custom:mushroom-lock-card
  - entity: cover.garage_door
    show_buttons_control: true
    tap_action:
      action: more-info
    type: custom:mushroom-cover-card
  - cards:
    - subtitle: Cameras
      type: custom:mushroom-title-card
    - cards:
      - aspect_ratio: '16:9'
        camera_view: auto
        entity: camera.emma
        show_name: false
        show_state: false
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - entity: camera.emma
                intersection: 0.75
                muted: false
                type: custom:webrtc-camera
                ui: true
              type: vertical-stack
            command: popup
            large: true
            title: Emma
        type: picture-entity
      - aspect_ratio: '16:9'
        camera_view: auto
        entity: camera.ethan
        show_name: false
        show_state: false
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - entity: camera.ethan
                intersection: 0.75
                muted: false
                type: custom:webrtc-camera
                ui: true
              type: vertical-stack
            command: popup
            large: true
            title: Ethan
        type: picture-entity
      - aspect_ratio: '16:9'
        camera_view: auto
        entity: camera.family_room
        show_name: false
        show_state: false
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - entity: camera.family_room
                intersection: 0.75
                muted: false
                type: custom:webrtc-camera
                ui: true
              type: vertical-stack
            command: popup
            large: true
            title: Family Room
        type: picture-entity
      - aspect_ratio: '16:9'
        camera_view: auto
        entity: camera.garage
        show_name: false
        show_state: false
        tap_action:
          action: fire-dom-event
          browser_mod:
            card:
              cards:
              - entity: camera.garage
                intersection: 0.75
                muted: false
                type: custom:webrtc-camera
                ui: true
              type: vertical-stack
            command: popup
            large: true
            title: Garage
        type: picture-entity
      - aspect_ratio: '16:9'
        camera_image: camera.doorbell
        camera_view: auto
        entities:
        - binary_sensor.doorbell_ding
        - binary_sensor.doorbell_motion
        type: picture-glance
      - cards:
        - entity: sensor.doorbell_last_ding
          name: Last Ding
          type: custom:mushroom-entity-card
        - entity: sensor.doorbell_last_motion
          icon_color: disabled
          name: Last Motion
          type: custom:mushroom-entity-card
        type: vertical-stack
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Doors
      type: custom:mushroom-title-card
    - cards:
      - entity: binary_sensor.front_door_is_open
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:door-open\n{%- elif is_state(\"\
          lock.lock_front\", \"locked\") -%}\n  mdi:door-closed-lock\n{%- else -%}\n\
          \  mdi:door-closed\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") and is_state(\"input_boolean.ignore_alert_doors\"\
          , \"on\") -%}\n  yellow\n{%- elif is_state(entity, \"on\") -%}\n  red\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Open\n{%- elif is_state(\"\
          lock.lock_front\", \"locked\") -%}\n  Locked\n{%- else -%}\n  Closed\n{%-\
          \ endif %}"
        secondary: "{{ state_attr(entity, \"friendly_name\") }}\n{% set last_changed\
          \ = states[entity].last_changed -%}\n{%- if last_changed < today_at() -\
          \ timedelta(days=6) -%}\n  More than a week ago\n{%- elif last_changed <\
          \ today_at() - timedelta(days=1) -%}\n  {{ last_changed.timestamp()|timestamp_custom('%A\
          \ at %-I:%M %p') }}\n{%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: binary_sensor.sliding_door_is_open
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:door-sliding-open\n{%- else\
          \ -%}\n  mdi:door-sliding\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") and is_state(\"input_boolean.ignore_alert_doors\"\
          , \"on\") -%}\n  yellow\n{%- elif is_state(entity, \"on\") -%}\n  red\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Open\n{%- else -%}\n  Closed\n\
          {%- endif %}"
        secondary: "{{ state_attr(entity, \"friendly_name\") }}\n{% set last_changed\
          \ = states[entity].last_changed -%}\n{%- if last_changed < today_at() -\
          \ timedelta(days=6) -%}\n  More than a week ago\n{%- elif last_changed <\
          \ today_at() - timedelta(days=1) -%}\n  {{ last_changed.timestamp()|timestamp_custom('%A\
          \ at %-I:%M %p') }}\n{%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: binary_sensor.garage_entry_door_is_open
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:door-open\n{%- else -%}\n\
          \  mdi:door-closed\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") and is_state(\"input_boolean.ignore_alert_doors\"\
          , \"on\") -%}\n  yellow\n{%- elif is_state(entity, \"on\") -%}\n  red\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Open\n{%- else -%}\n  Closed\n\
          {%- endif %}"
        secondary: "{{ state_attr(entity, \"friendly_name\") }}\n{% set last_changed\
          \ = states[entity].last_changed -%}\n{%- if last_changed < today_at() -\
          \ timedelta(days=6) -%}\n  More than a week ago\n{%- elif last_changed <\
          \ today_at() - timedelta(days=1) -%}\n  {{ last_changed.timestamp()|timestamp_custom('%A\
          \ at %-I:%M %p') }}\n{%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: binary_sensor.garage_side_door_is_open
        icon: "{%- if is_state(entity, \"on\") -%}\n  mdi:door-open\n{%- else -%}\n\
          \  mdi:door-closed\n{%- endif -%}"
        icon_color: "{%- if is_state(entity, \"on\") and is_state(\"input_boolean.ignore_alert_doors\"\
          , \"on\") -%}\n  yellow\n{%- elif is_state(entity, \"on\") -%}\n  red\n\
          {%- else -%}\n  grey\n{%- endif -%}"
        multiline_secondary: true
        primary: "{%- if is_state(entity, \"on\") -%}\n  Open\n{%- else -%}\n  Closed\n\
          {%- endif %}"
        secondary: "{{ state_attr(entity, \"friendly_name\") }}\n{% set last_changed\
          \ = states[entity].last_changed -%}\n{%- if last_changed < today_at() -\
          \ timedelta(days=6) -%}\n  More than a week ago\n{%- elif last_changed <\
          \ today_at() - timedelta(days=1) -%}\n  {{ last_changed.timestamp()|timestamp_custom('%A\
          \ at %-I:%M %p') }}\n{%- elif last_changed < today_at() -%}\n  {{ last_changed.timestamp()|timestamp_custom('Yesterday\
          \ at %-I:%M %p') }}\n{%- else -%}\n  {{ relative_time(last_changed) }} ago\n\
          {%- endif -%}"
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Occupancy
      type: custom:mushroom-title-card
    - cards:
      - entity: binary_sensor.home_occupancy
        icon_color: light-green
        name: Home
        type: custom:mushroom-entity-card
      - entity: binary_sensor.kitchen_occupancy
        icon_color: light-green
        name: Kitchen
        type: custom:mushroom-entity-card
      - entity: binary_sensor.family_room_occupancy
        icon_color: light-green
        name: Family
        type: custom:mushroom-entity-card
      - entity: binary_sensor.master_bedroom_occupancy
        icon_color: light-green
        name: Master
        type: custom:mushroom-entity-card
      - entity: binary_sensor.emma_occupancy
        icon_color: light-green
        name: Emma
        type: custom:mushroom-entity-card
      - entity: binary_sensor.ethan_occupancy
        icon_color: light-green
        name: Ethan
        type: custom:mushroom-entity-card
      - entity: binary_sensor.guest_room_occupancy
        icon_color: light-green
        name: Guest Room
        type: custom:mushroom-entity-card
      - entity: binary_sensor.office_occupancy
        icon_color: light-green
        name: Office
        type: custom:mushroom-entity-card
      - entity: binary_sensor.garage_occupancy
        icon_color: light-green
        name: Garage
        type: custom:mushroom-entity-card
      columns: 3
      square: false
      type: grid
    type: vertical-stack
  icon: mdi:shield
  layout:
    max_cols: 3
  path: security
  theme: Backend-selected
  title: Security
  type: custom:masonry-layout
- badges: []
  cards:
  - chips:
    - icon: mdi:chevron-left
      tap_action:
        action: navigate
        navigation_path: main
      type: template
    type: custom:mushroom-chips-card
  - cards:
    - subtitle: Cost
      title: Power
      type: custom:mushroom-title-card
    - cards:
      - entity: sensor.minute_power_cost
        icon: mdi:currency-usd
        icon_color: grey
        primary: ${{ states(entity)|float }}
        secondary: Minute
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: sensor.day_power_cost
        icon: mdi:currency-usd
        icon_color: grey
        primary: ${{ states(entity)|float }}
        secondary: Day
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: sensor.month_power_cost
        icon: mdi:currency-usd
        icon_color: grey
        primary: ${{ states(entity)|float }}
        secondary: Month
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      columns: 3
      square: false
      type: grid
    - cards:
      - entity: select.monthly_energy
        icon: mdi:transmission-tower
        icon_color: "{%- if is_state(entity, 'summer_offpeak') -%}\n  amber\n{%- elif\
          \ is_state(entity, 'summer_peak') -%}\n  deep-orange\n{%- elif is_state(entity,\
          \ 'winter_offpeak') -%}\n  blue\n{%- elif is_state(entity, 'winter_peak')\
          \ -%}\n  pink\n{%- else -%}\n  grey\n{%- endif -%}"
        primary: "{%- if is_state(entity, 'summer_offpeak') -%}\n  Summer Off-Peak\n\
          {%- elif is_state(entity, 'summer_peak') -%}\n  Summer Peak\n{%- elif is_state(entity,\
          \ 'winter_offpeak') -%}\n  Winter Off-Peak\n{%- elif is_state(entity, 'winter_peak')\
          \ -%}\n  Winter Peak\n{%- else -%}\n  Huh?\n{%- endif -%}"
        secondary: '{{ states("sensor.tariff_price") }} {{ state_attr("sensor.tariff_price",
          "unit_of_measurement") }}'
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      - entity: sensor.current_monthly_energy
        icon: mdi:flash
        icon_color: orange
        primary: '{{ (states(entity)|float)|round(2) }} {{ state_attr(entity, "unit_of_measurement")
          }}'
        secondary: Monthly Energy
        tap_action:
          action: more-info
        type: custom:mushroom-template-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Solar Generation
      type: custom:mushroom-title-card
    - entity: sensor.solar_1min
      name: Current
      type: custom:mushroom-entity-card
    - cards:
      - entity: sensor.solar_1d
        name: Today
        type: custom:mushroom-entity-card
      - entity: sensor.solar_1mon
        name: This Month
        type: custom:mushroom-entity-card
      - entity: sensor.solar_this_year
        name: This Year
        type: custom:mushroom-entity-card
      - entity: sensor.solar_lifetime
        name: Lifetime
        type: custom:mushroom-entity-card
      columns: 2
      square: false
      type: grid
    type: vertical-stack
  - cards:
    - subtitle: Power Usage
      type: custom:mushroom-title-card
    - animation:
        state: 'on'
      decimal: 0
      entities:
      - entity: sensor.home_123_1min
        max: 24000
        min: -4800
        name: Power Draw
        severity:
        - color: rgb(var(--color-light-blue))
          from: -4800
          to: -2400
        - color: rgb(var(--color-blue))
          from: -2399
          to: 0
        - color: rgb(var(--color-green))
          from: 0
          to: 4800
        - color: rgb(var(--color-lime))
          from: 4801
          to: 9600
        - color: rgb(var(--color-amber))
          from: 9601
          to: 14400
        - color: rgb(var(--color-orange))
          from: 14401
          to: 19200
        - color: rgb(var(--color-red))
          from: 19200
          to: 24000
      - entity: sensor.solar_1min
        max: 4800
        min: 0
        name: Solar
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 960
        - color: rgb(var(--color-lime))
          from: 961
          to: 1920
        - color: rgb(var(--color-amber))
          from: 1921
          to: 2880
        - color: rgb(var(--color-orange))
          from: 2881
          to: 3840
        - color: rgb(var(--color-red))
          from: 3841
          to: 4800
      - entity: sensor.home_balance_1min
        name: Home Balance
      - entity: sensor.family_room_1_1min
        name: Family Room
      - entity: sensor.dishwasher_disposal_2_1min
        name: Dishwasher / Disposal
      - entity: sensor.refrigerator_3_1min
        name: Fridge / Kitchen Outlets
      - entity: sensor.theater_room_4_1min
        name: Theater Room
      - entity: sensor.washer_5_1min
        name: Washer
      - entity: sensor.basement_bedrooms_6_1min
        name: Basement Bedrooms
      - entity: sensor.master_bedroom_7_1min
        name: Master Bed / Living
      - entity: sensor.bedrooms_8_1min
        name: Bedrooms
      - entity: sensor.range_9_1min
        max: 9600
        name: Range
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 1920
        - color: rgb(var(--color-lime))
          from: 1921
          to: 3840
        - color: rgb(var(--color-amber))
          from: 3841
          to: 5760
        - color: rgb(var(--color-orange))
          from: 5761
          to: 7680
        - color: rgb(var(--color-red))
          from: 7681
          to: 9600
      - entity: sensor.dryer_10_1min
        max: 7200
        name: Dryer
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 1440
        - color: rgb(var(--color-lime))
          from: 1441
          to: 2880
        - color: rgb(var(--color-amber))
          from: 2881
          to: 4320
        - color: rgb(var(--color-orange))
          from: 4321
          to: 5760
        - color: rgb(var(--color-red))
          from: 5761
          to: 7200
      - entity: sensor.garage_outlets_11_1min
        max: 1800
        name: Garage Outlets
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 360
        - color: rgb(var(--color-lime))
          from: 361
          to: 720
        - color: rgb(var(--color-amber))
          from: 721
          to: 1080
        - color: rgb(var(--color-orange))
          from: 1081
          to: 1440
        - color: rgb(var(--color-red))
          from: 1441
          to: 1800
      - entity: sensor.mechanical_12_1min
        max: 1800
        name: Utility
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 360
        - color: rgb(var(--color-lime))
          from: 361
          to: 720
        - color: rgb(var(--color-amber))
          from: 721
          to: 1080
        - color: rgb(var(--color-orange))
          from: 1081
          to: 1440
        - color: rgb(var(--color-red))
          from: 1441
          to: 1800
      - entity: sensor.entry_13_1min
        max: 1800
        name: Entry
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 360
        - color: rgb(var(--color-lime))
          from: 361
          to: 720
        - color: rgb(var(--color-amber))
          from: 721
          to: 1080
        - color: rgb(var(--color-orange))
          from: 1081
          to: 1440
        - color: rgb(var(--color-red))
          from: 1441
          to: 1800
      - entity: sensor.air_conditioner_14_1min
        max: 7200
        name: A/C
        severity:
        - color: rgb(var(--color-green))
          from: 0
          to: 1440
        - color: rgb(var(--color-lime))
          from: 1441
          to: 2880
        - color: rgb(var(--color-amber))
          from: 2881
          to: 4320
        - color: rgb(var(--color-orange))
          from: 4321
          to: 5760
        - color: rgb(var(--color-red))
          from: 5761
          to: 7200
      height: 30px
      max: 2400
      min: 0
      positions:
        icon: 'off'
        indicator: inside
      severity:
      - color: rgb(var(--color-green))
        from: 0
        to: 480
      - color: rgb(var(--color-lime))
        from: 481
        to: 960
      - color: rgb(var(--color-amber))
        from: 961
        to: 1440
      - color: rgb(var(--color-orange))
        from: 1441
        to: 1920
      - color: rgb(var(--color-red))
        from: 1921
        to: 2400
      style: "bar-card-name,\nbar-card-value {\n  text-shadow: 1px 1px #0005;\n}"
      type: custom:bar-card
    type: vertical-stack
  icon: mdi:transmission-tower
  layout:
    max_cols: 2
  path: power
  theme: Backend-selected
  title: Power
  type: custom:masonry-layout
- badges: []
  cards:
  - cards:
    - subtitle: Map
      type: custom:mushroom-title-card
    - dark_mode: true
      default_zoom: 12
      entities:
      - person.joshua
      - person.amy
      hours_to_show: 2
      type: map
    type: vertical-stack
  - card:
      cards:
      - subtitle: Mail / Deliveries
        type: custom:mushroom-title-card
      - cards:
        - card:
            entity: sensor.mail_usps_mail
            icon_color: grey
            name: Mail
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  elements:
                  - camera_image: camera.mail_usps
                    camera_view: live
                    style:
                      left: 50%
                      top: 50%
                      width: 100%
                    type: image
                  - image: /local/mail_and_packages/overlay.png
                    style:
                      left: 50%
                      top: 50%
                      width: 101%
                    type: image
                  - entity: camera.mail_usps
                    image: /local/mail_and_packages/vignette.png
                    style:
                      left: 50%
                      top: 50%
                      width: 101%
                    type: image
                  entity: camera.mail_usps
                  image: local/mail_and_packages/white.png
                  type: picture-elements
                command: popup
                large: true
                title: Mail
              target: {}
            type: custom:mushroom-entity-card
          conditions:
          - entity: sensor.mail_usps_mail
            state_not: '0'
          type: conditional
        - card:
            entity: sensor.mail_usps_delivering
            icon: fab:usps
            icon_color: blue
            name: USPS
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_usps_delivering
                    icon_color: grey
                    type: custom:mushroom-entity-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_usps_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://tools.usps.com/go/TrackConfirmAction?tLabels={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_usps_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: USPS Tracking
            type: custom:mushroom-entity-card
          conditions:
          - entity: sensor.mail_usps_delivering
            state_not: '0'
          type: conditional
        - card:
            entity: sensor.mail_ups_delivering
            icon: fab:ups
            icon_color: brown
            name: UPS
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_ups_delivering
                    icon_color: grey
                    type: custom:mushroom-entity-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_ups_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://www.ups.com/track?loc=en_US&tracknum={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_ups_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: UPS Tracking
            type: custom:mushroom-entity-card
          conditions:
          - entity: sensor.mail_ups_delivering
            state_not: '0'
          type: conditional
        - card:
            entity: sensor.mail_fedex_delivering
            icon: fab:fedex
            icon_color: purple
            name: FedEx
            tap_action:
              action: fire-dom-event
              browser_mod:
                card:
                  cards:
                  - entity: sensor.mail_fedex_delivering
                    icon_color: grey
                    type: custom:mushroom-entity-card
                  - card:
                      cards:
                      - subtitle: Tracking Numbers
                        type: custom:mushroom-title-card
                      - content: '{%- for trk_number in state_attr(''sensor.mail_fedex_delivering'',
                          ''tracking_#'') %}

                          [{{ trk_number }}](https://www.fedex.com/fedextrack/?trknbr={{
                          trk_number }})

                          {%- endfor -%}'
                        type: markdown
                      type: vertical-stack
                    conditions:
                    - entity: sensor.mail_fedex_delivering
                      state_not: '0'
                    type: conditional
                  type: vertical-stack
                command: popup
                title: FedEx Tracking
            type: custom:mushroom-entity-card
          conditions:
          - entity: sensor.mail_fedex_delivering
            state_not: '0'
          type: conditional
        columns: 2
        square: false
        type: grid
      type: vertical-stack
    conditions:
    - entity: binary_sensor.out_for_delivery
      state: 'on'
    type: conditional
  icon: mdi:test-tube
  layout:
    max_cols: 3
  path: test
  theme: Backend-selected
  title: Test
  type: custom:masonry-layout
